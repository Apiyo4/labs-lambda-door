!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("react"),require("prop-types"),require("react-dom")):"function"==typeof define&&define.amd?define(["react","prop-types","react-dom"],e):"object"==typeof exports?exports.Recharts=e(require("react"),require("prop-types"),require("react-dom")):t.Recharts=e(t.React,t.PropTypes,t.ReactDOM)}(window,(function(t,e,n){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=152)}([function(e,n){e.exports=t},function(t,n){t.exports=e},function(t,e,n){"use strict";function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var o=n(0),a=i(n(3)),u=["viewBox","children"],s=["className","color","height","id","lang","max","media","method","min","name","style","target","type","width","role","tabIndex","accentHeight","accumulate","additive","alignmentBaseline","allowReorder","alphabetic","amplitude","arabicForm","ascent","attributeName","attributeType","autoReverse","azimuth","baseFrequency","baselineShift","baseProfile","bbox","begin","bias","by","calcMode","capHeight","clip","clipPath","clipPathUnits","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","contentScriptType","contentStyleType","cursor","cx","cy","d","decelerate","descent","diffuseConstant","direction","display","divisor","dominantBaseline","dur","dx","dy","edgeMode","elevation","enableBackground","end","exponent","externalResourcesRequired","fill","fillOpacity","fillRule","filter","filterRes","filterUnits","floodColor","floodOpacity","focusable","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","format","from","fx","fy","g1","g2","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","glyphRef","gradientTransform","gradientUnits","hanging","horizAdvX","horizOriginX","href","ideographic","imageRendering","in2","in","intercept","k1","k2","k3","k4","k","kernelMatrix","kernelUnitLength","kerning","keyPoints","keySplines","keyTimes","lengthAdjust","letterSpacing","lightingColor","limitingConeAngle","local","markerEnd","markerHeight","markerMid","markerStart","markerUnits","markerWidth","mask","maskContentUnits","maskUnits","mathematical","mode","numOctaves","offset","opacity","operator","order","orient","orientation","origin","overflow","overlinePosition","overlineThickness","paintOrder","panose1","pathLength","patternContentUnits","patternTransform","patternUnits","pointerEvents","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","r","radius","refX","refY","renderingIntent","repeatCount","repeatDur","requiredExtensions","requiredFeatures","restart","result","rotate","rx","ry","seed","shapeRendering","slope","spacing","specularConstant","specularExponent","speed","spreadMethod","startOffset","stdDeviation","stemh","stemv","stitchTiles","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","string","stroke","strokeDasharray","strokeDashoffset","strokeLinecap","strokeLinejoin","strokeMiterlimit","strokeOpacity","strokeWidth","surfaceScale","systemLanguage","tableValues","targetX","targetY","textAnchor","textDecoration","textLength","textRendering","to","transform","u1","u2","underlinePosition","underlineThickness","unicode","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","values","vectorEffect","version","vertAdvY","vertOriginX","vertOriginY","vHanging","vIdeographic","viewTarget","visibility","vMathematical","widths","wordSpacing","writingMode","x1","x2","x","xChannelSelector","xHeight","xlinkActuate","xlinkArcrole","xlinkHref","xlinkRole","xlinkShow","xlinkTitle","xlinkType","xmlBase","xmlLang","xmlns","xmlnsXlink","xmlSpace","y1","y2","y","yChannelSelector","z","zoomAndPan","ref","key","angle"],l=["dangerouslySetInnerHTML","onCopy","onCopyCapture","onCut","onCutCapture","onPaste","onPasteCapture","onCompositionEnd","onCompositionEndCapture","onCompositionStart","onCompositionStartCapture","onCompositionUpdate","onCompositionUpdateCapture","onFocus","onFocusCapture","onBlur","onBlurCapture","onChange","onChangeCapture","onBeforeInput","onBeforeInputCapture","onInput","onInputCapture","onReset","onResetCapture","onSubmit","onSubmitCapture","onInvalid","onInvalidCapture","onLoad","onLoadCapture","onError","onErrorCapture","onKeyDown","onKeyDownCapture","onKeyPress","onKeyPressCapture","onKeyUp","onKeyUpCapture","onAbort","onAbortCapture","onCanPlay","onCanPlayCapture","onCanPlayThrough","onCanPlayThroughCapture","onDurationChange","onDurationChangeCapture","onEmptied","onEmptiedCapture","onEncrypted","onEncryptedCapture","onEnded","onEndedCapture","onLoadedData","onLoadedDataCapture","onLoadedMetadata","onLoadedMetadataCapture","onLoadStart","onLoadStartCapture","onPause","onPauseCapture","onPlay","onPlayCapture","onPlaying","onPlayingCapture","onProgress","onProgressCapture","onRateChange","onRateChangeCapture","onSeeked","onSeekedCapture","onSeeking","onSeekingCapture","onStalled","onStalledCapture","onSuspend","onSuspendCapture","onTimeUpdate","onTimeUpdateCapture","onVolumeChange","onVolumeChangeCapture","onWaiting","onWaitingCapture","onAuxClick","onAuxClickCapture","onClick","onClickCapture","onContextMenu","onContextMenuCapture","onDoubleClick","onDoubleClickCapture","onDrag","onDragCapture","onDragEnd","onDragEndCapture","onDragEnter","onDragEnterCapture","onDragExit","onDragExitCapture","onDragLeave","onDragLeaveCapture","onDragOver","onDragOverCapture","onDragStart","onDragStartCapture","onDrop","onDropCapture","onMouseDown","onMouseDownCapture","onMouseEnter","onMouseLeave","onMouseMove","onMouseMoveCapture","onMouseOut","onMouseOutCapture","onMouseOver","onMouseOverCapture","onMouseUp","onMouseUpCapture","onSelect","onSelectCapture","onTouchCancel","onTouchCancelCapture","onTouchEnd","onTouchEndCapture","onTouchMove","onTouchMoveCapture","onTouchStart","onTouchStartCapture","onPointerDown","onPointerDownCapture","onPointerMove","onPointerMoveCapture","onPointerUp","onPointerUpCapture","onPointerCancel","onPointerCancelCapture","onPointerEnter","onPointerEnterCapture","onPointerLeave","onPointerLeaveCapture","onPointerOver","onPointerOverCapture","onPointerOut","onPointerOutCapture","onGotPointerCapture","onGotPointerCaptureCapture","onLostPointerCapture","onLostPointerCaptureCapture","onScroll","onScrollCapture","onWheel","onWheelCapture","onAnimationStart","onAnimationStartCapture","onAnimationEnd","onAnimationEndCapture","onAnimationIteration","onAnimationIterationCapture","onTransitionEnd","onTransitionEndCapture"];e.filterProps=function(t,e,n){if(!t||"function"==typeof t||"boolean"==typeof t)return null;var r=t;if(o.isValidElement(t)&&(r=t.props),!a.default.isObject(r))return null;var i={};return Object.keys(r).forEach((function(t){(s.includes(t)||n&&u.includes(t)||e&&l.includes(t))&&(i[t]=r[t])})),i},e.adaptEventHandlers=function(t,e){if(!t||"function"==typeof t||"boolean"==typeof t)return null;var n=t;if(o.isValidElement(t)&&(n=t.props),!a.default.isObject(n))return null;var r={};return Object.keys(n).forEach((function(t){l.includes(t)&&(r[t]=e||function(e){return n[t](n,e)})})),r};e.adaptEventsOfChild=function(t,e,n){if(!a.default.isObject(t)||"object"!==r(t))return null;var i=null;return Object.keys(t).forEach((function(r){var o=t[r];l.includes(r)&&"function"==typeof o&&(i||(i={}),i[r]=function(t,e,n){return function(r){return t(e,n,r),null}}(o,e,n))})),i}},function(t,e,n){(function(t,r){var i;
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */(function(){var o,a=200,u="Unsupported core-js use. Try https://npms.io/search?q=ponyfill.",s="Expected a function",l="__lodash_hash_undefined__",c=500,f="__lodash_placeholder__",h=1,p=2,d=4,y=1,v=2,g=1,m=2,_=4,x=8,b=16,w=32,A=64,O=128,E=256,M=512,S=30,k="...",P=800,N=16,C=1,T=2,j=1/0,I=9007199254740991,D=17976931348623157e292,R=NaN,L=4294967295,B=L-1,F=L>>>1,z=[["ary",O],["bind",g],["bindKey",m],["curry",x],["curryRight",b],["flip",M],["partial",w],["partialRight",A],["rearg",E]],W="[object Arguments]",V="[object Array]",U="[object AsyncFunction]",q="[object Boolean]",G="[object Date]",H="[object DOMException]",K="[object Error]",X="[object Function]",Y="[object GeneratorFunction]",$="[object Map]",Z="[object Number]",J="[object Null]",Q="[object Object]",tt="[object Proxy]",et="[object RegExp]",nt="[object Set]",rt="[object String]",it="[object Symbol]",ot="[object Undefined]",at="[object WeakMap]",ut="[object WeakSet]",st="[object ArrayBuffer]",lt="[object DataView]",ct="[object Float32Array]",ft="[object Float64Array]",ht="[object Int8Array]",pt="[object Int16Array]",dt="[object Int32Array]",yt="[object Uint8Array]",vt="[object Uint8ClampedArray]",gt="[object Uint16Array]",mt="[object Uint32Array]",_t=/\b__p \+= '';/g,xt=/\b(__p \+=) '' \+/g,bt=/(__e\(.*?\)|\b__t\)) \+\n'';/g,wt=/&(?:amp|lt|gt|quot|#39);/g,At=/[&<>"']/g,Ot=RegExp(wt.source),Et=RegExp(At.source),Mt=/<%-([\s\S]+?)%>/g,St=/<%([\s\S]+?)%>/g,kt=/<%=([\s\S]+?)%>/g,Pt=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,Nt=/^\w*$/,Ct=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,Tt=/[\\^$.*+?()[\]{}|]/g,jt=RegExp(Tt.source),It=/^\s+|\s+$/g,Dt=/^\s+/,Rt=/\s+$/,Lt=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,Bt=/\{\n\/\* \[wrapped with (.+)\] \*/,Ft=/,? & /,zt=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,Wt=/\\(\\)?/g,Vt=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,Ut=/\w*$/,qt=/^[-+]0x[0-9a-f]+$/i,Gt=/^0b[01]+$/i,Ht=/^\[object .+?Constructor\]$/,Kt=/^0o[0-7]+$/i,Xt=/^(?:0|[1-9]\d*)$/,Yt=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,$t=/($^)/,Zt=/['\n\r\u2028\u2029\\]/g,Jt="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",Qt="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",te="[\\ud800-\\udfff]",ee="["+Qt+"]",ne="["+Jt+"]",re="\\d+",ie="[\\u2700-\\u27bf]",oe="[a-z\\xdf-\\xf6\\xf8-\\xff]",ae="[^\\ud800-\\udfff"+Qt+re+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",ue="\\ud83c[\\udffb-\\udfff]",se="[^\\ud800-\\udfff]",le="(?:\\ud83c[\\udde6-\\uddff]){2}",ce="[\\ud800-\\udbff][\\udc00-\\udfff]",fe="[A-Z\\xc0-\\xd6\\xd8-\\xde]",he="(?:"+oe+"|"+ae+")",pe="(?:"+fe+"|"+ae+")",de="(?:"+ne+"|"+ue+")"+"?",ye="[\\ufe0e\\ufe0f]?"+de+("(?:\\u200d(?:"+[se,le,ce].join("|")+")[\\ufe0e\\ufe0f]?"+de+")*"),ve="(?:"+[ie,le,ce].join("|")+")"+ye,ge="(?:"+[se+ne+"?",ne,le,ce,te].join("|")+")",me=RegExp("['’]","g"),_e=RegExp(ne,"g"),xe=RegExp(ue+"(?="+ue+")|"+ge+ye,"g"),be=RegExp([fe+"?"+oe+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[ee,fe,"$"].join("|")+")",pe+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[ee,fe+he,"$"].join("|")+")",fe+"?"+he+"+(?:['’](?:d|ll|m|re|s|t|ve))?",fe+"+(?:['’](?:D|LL|M|RE|S|T|VE))?","\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",re,ve].join("|"),"g"),we=RegExp("[\\u200d\\ud800-\\udfff"+Jt+"\\ufe0e\\ufe0f]"),Ae=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,Oe=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],Ee=-1,Me={};Me[ct]=Me[ft]=Me[ht]=Me[pt]=Me[dt]=Me[yt]=Me[vt]=Me[gt]=Me[mt]=!0,Me[W]=Me[V]=Me[st]=Me[q]=Me[lt]=Me[G]=Me[K]=Me[X]=Me[$]=Me[Z]=Me[Q]=Me[et]=Me[nt]=Me[rt]=Me[at]=!1;var Se={};Se[W]=Se[V]=Se[st]=Se[lt]=Se[q]=Se[G]=Se[ct]=Se[ft]=Se[ht]=Se[pt]=Se[dt]=Se[$]=Se[Z]=Se[Q]=Se[et]=Se[nt]=Se[rt]=Se[it]=Se[yt]=Se[vt]=Se[gt]=Se[mt]=!0,Se[K]=Se[X]=Se[at]=!1;var ke={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},Pe=parseFloat,Ne=parseInt,Ce="object"==typeof t&&t&&t.Object===Object&&t,Te="object"==typeof self&&self&&self.Object===Object&&self,je=Ce||Te||Function("return this")(),Ie=e&&!e.nodeType&&e,De=Ie&&"object"==typeof r&&r&&!r.nodeType&&r,Re=De&&De.exports===Ie,Le=Re&&Ce.process,Be=function(){try{var t=De&&De.require&&De.require("util").types;return t||Le&&Le.binding&&Le.binding("util")}catch(t){}}(),Fe=Be&&Be.isArrayBuffer,ze=Be&&Be.isDate,We=Be&&Be.isMap,Ve=Be&&Be.isRegExp,Ue=Be&&Be.isSet,qe=Be&&Be.isTypedArray;function Ge(t,e,n){switch(n.length){case 0:return t.call(e);case 1:return t.call(e,n[0]);case 2:return t.call(e,n[0],n[1]);case 3:return t.call(e,n[0],n[1],n[2])}return t.apply(e,n)}function He(t,e,n,r){for(var i=-1,o=null==t?0:t.length;++i<o;){var a=t[i];e(r,a,n(a),t)}return r}function Ke(t,e){for(var n=-1,r=null==t?0:t.length;++n<r&&!1!==e(t[n],n,t););return t}function Xe(t,e){for(var n=null==t?0:t.length;n--&&!1!==e(t[n],n,t););return t}function Ye(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(!e(t[n],n,t))return!1;return!0}function $e(t,e){for(var n=-1,r=null==t?0:t.length,i=0,o=[];++n<r;){var a=t[n];e(a,n,t)&&(o[i++]=a)}return o}function Ze(t,e){return!!(null==t?0:t.length)&&sn(t,e,0)>-1}function Je(t,e,n){for(var r=-1,i=null==t?0:t.length;++r<i;)if(n(e,t[r]))return!0;return!1}function Qe(t,e){for(var n=-1,r=null==t?0:t.length,i=Array(r);++n<r;)i[n]=e(t[n],n,t);return i}function tn(t,e){for(var n=-1,r=e.length,i=t.length;++n<r;)t[i+n]=e[n];return t}function en(t,e,n,r){var i=-1,o=null==t?0:t.length;for(r&&o&&(n=t[++i]);++i<o;)n=e(n,t[i],i,t);return n}function nn(t,e,n,r){var i=null==t?0:t.length;for(r&&i&&(n=t[--i]);i--;)n=e(n,t[i],i,t);return n}function rn(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(e(t[n],n,t))return!0;return!1}var on=hn("length");function an(t,e,n){var r;return n(t,(function(t,n,i){if(e(t,n,i))return r=n,!1})),r}function un(t,e,n,r){for(var i=t.length,o=n+(r?1:-1);r?o--:++o<i;)if(e(t[o],o,t))return o;return-1}function sn(t,e,n){return e==e?function(t,e,n){var r=n-1,i=t.length;for(;++r<i;)if(t[r]===e)return r;return-1}(t,e,n):un(t,cn,n)}function ln(t,e,n,r){for(var i=n-1,o=t.length;++i<o;)if(r(t[i],e))return i;return-1}function cn(t){return t!=t}function fn(t,e){var n=null==t?0:t.length;return n?yn(t,e)/n:R}function hn(t){return function(e){return null==e?o:e[t]}}function pn(t){return function(e){return null==t?o:t[e]}}function dn(t,e,n,r,i){return i(t,(function(t,i,o){n=r?(r=!1,t):e(n,t,i,o)})),n}function yn(t,e){for(var n,r=-1,i=t.length;++r<i;){var a=e(t[r]);a!==o&&(n=n===o?a:n+a)}return n}function vn(t,e){for(var n=-1,r=Array(t);++n<t;)r[n]=e(n);return r}function gn(t){return function(e){return t(e)}}function mn(t,e){return Qe(e,(function(e){return t[e]}))}function _n(t,e){return t.has(e)}function xn(t,e){for(var n=-1,r=t.length;++n<r&&sn(e,t[n],0)>-1;);return n}function bn(t,e){for(var n=t.length;n--&&sn(e,t[n],0)>-1;);return n}var wn=pn({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"}),An=pn({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function On(t){return"\\"+ke[t]}function En(t){return we.test(t)}function Mn(t){var e=-1,n=Array(t.size);return t.forEach((function(t,r){n[++e]=[r,t]})),n}function Sn(t,e){return function(n){return t(e(n))}}function kn(t,e){for(var n=-1,r=t.length,i=0,o=[];++n<r;){var a=t[n];a!==e&&a!==f||(t[n]=f,o[i++]=n)}return o}function Pn(t){var e=-1,n=Array(t.size);return t.forEach((function(t){n[++e]=t})),n}function Nn(t){var e=-1,n=Array(t.size);return t.forEach((function(t){n[++e]=[t,t]})),n}function Cn(t){return En(t)?function(t){var e=xe.lastIndex=0;for(;xe.test(t);)++e;return e}(t):on(t)}function Tn(t){return En(t)?function(t){return t.match(xe)||[]}(t):function(t){return t.split("")}(t)}var jn=pn({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var In=function t(e){var n,r=(e=null==e?je:In.defaults(je.Object(),e,In.pick(je,Oe))).Array,i=e.Date,Jt=e.Error,Qt=e.Function,te=e.Math,ee=e.Object,ne=e.RegExp,re=e.String,ie=e.TypeError,oe=r.prototype,ae=Qt.prototype,ue=ee.prototype,se=e["__core-js_shared__"],le=ae.toString,ce=ue.hasOwnProperty,fe=0,he=(n=/[^.]+$/.exec(se&&se.keys&&se.keys.IE_PROTO||""))?"Symbol(src)_1."+n:"",pe=ue.toString,de=le.call(ee),ye=je._,ve=ne("^"+le.call(ce).replace(Tt,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),ge=Re?e.Buffer:o,xe=e.Symbol,we=e.Uint8Array,ke=ge?ge.allocUnsafe:o,Ce=Sn(ee.getPrototypeOf,ee),Te=ee.create,Ie=ue.propertyIsEnumerable,De=oe.splice,Le=xe?xe.isConcatSpreadable:o,Be=xe?xe.iterator:o,on=xe?xe.toStringTag:o,pn=function(){try{var t=Fo(ee,"defineProperty");return t({},"",{}),t}catch(t){}}(),Dn=e.clearTimeout!==je.clearTimeout&&e.clearTimeout,Rn=i&&i.now!==je.Date.now&&i.now,Ln=e.setTimeout!==je.setTimeout&&e.setTimeout,Bn=te.ceil,Fn=te.floor,zn=ee.getOwnPropertySymbols,Wn=ge?ge.isBuffer:o,Vn=e.isFinite,Un=oe.join,qn=Sn(ee.keys,ee),Gn=te.max,Hn=te.min,Kn=i.now,Xn=e.parseInt,Yn=te.random,$n=oe.reverse,Zn=Fo(e,"DataView"),Jn=Fo(e,"Map"),Qn=Fo(e,"Promise"),tr=Fo(e,"Set"),er=Fo(e,"WeakMap"),nr=Fo(ee,"create"),rr=er&&new er,ir={},or=fa(Zn),ar=fa(Jn),ur=fa(Qn),sr=fa(tr),lr=fa(er),cr=xe?xe.prototype:o,fr=cr?cr.valueOf:o,hr=cr?cr.toString:o;function pr(t){if(ku(t)&&!gu(t)&&!(t instanceof gr)){if(t instanceof vr)return t;if(ce.call(t,"__wrapped__"))return ha(t)}return new vr(t)}var dr=function(){function t(){}return function(e){if(!Su(e))return{};if(Te)return Te(e);t.prototype=e;var n=new t;return t.prototype=o,n}}();function yr(){}function vr(t,e){this.__wrapped__=t,this.__actions__=[],this.__chain__=!!e,this.__index__=0,this.__values__=o}function gr(t){this.__wrapped__=t,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=L,this.__views__=[]}function mr(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function _r(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function xr(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function br(t){var e=-1,n=null==t?0:t.length;for(this.__data__=new xr;++e<n;)this.add(t[e])}function wr(t){var e=this.__data__=new _r(t);this.size=e.size}function Ar(t,e){var n=gu(t),r=!n&&vu(t),i=!n&&!r&&bu(t),o=!n&&!r&&!i&&Ru(t),a=n||r||i||o,u=a?vn(t.length,re):[],s=u.length;for(var l in t)!e&&!ce.call(t,l)||a&&("length"==l||i&&("offset"==l||"parent"==l)||o&&("buffer"==l||"byteLength"==l||"byteOffset"==l)||Ho(l,s))||u.push(l);return u}function Or(t){var e=t.length;return e?t[bi(0,e-1)]:o}function Er(t,e){return sa(no(t),Ir(e,0,t.length))}function Mr(t){return sa(no(t))}function Sr(t,e,n){(n===o||pu(t[e],n))&&(n!==o||e in t)||Tr(t,e,n)}function kr(t,e,n){var r=t[e];ce.call(t,e)&&pu(r,n)&&(n!==o||e in t)||Tr(t,e,n)}function Pr(t,e){for(var n=t.length;n--;)if(pu(t[n][0],e))return n;return-1}function Nr(t,e,n,r){return Fr(t,(function(t,i,o){e(r,t,n(t),o)})),r}function Cr(t,e){return t&&ro(e,is(e),t)}function Tr(t,e,n){"__proto__"==e&&pn?pn(t,e,{configurable:!0,enumerable:!0,value:n,writable:!0}):t[e]=n}function jr(t,e){for(var n=-1,i=e.length,a=r(i),u=null==t;++n<i;)a[n]=u?o:Qu(t,e[n]);return a}function Ir(t,e,n){return t==t&&(n!==o&&(t=t<=n?t:n),e!==o&&(t=t>=e?t:e)),t}function Dr(t,e,n,r,i,a){var u,s=e&h,l=e&p,c=e&d;if(n&&(u=i?n(t,r,i,a):n(t)),u!==o)return u;if(!Su(t))return t;var f=gu(t);if(f){if(u=function(t){var e=t.length,n=new t.constructor(e);e&&"string"==typeof t[0]&&ce.call(t,"index")&&(n.index=t.index,n.input=t.input);return n}(t),!s)return no(t,u)}else{var y=Vo(t),v=y==X||y==Y;if(bu(t))return $i(t,s);if(y==Q||y==W||v&&!i){if(u=l||v?{}:qo(t),!s)return l?function(t,e){return ro(t,Wo(t),e)}(t,function(t,e){return t&&ro(e,os(e),t)}(u,t)):function(t,e){return ro(t,zo(t),e)}(t,Cr(u,t))}else{if(!Se[y])return i?t:{};u=function(t,e,n){var r=t.constructor;switch(e){case st:return Zi(t);case q:case G:return new r(+t);case lt:return function(t,e){var n=e?Zi(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.byteLength)}(t,n);case ct:case ft:case ht:case pt:case dt:case yt:case vt:case gt:case mt:return Ji(t,n);case $:return new r;case Z:case rt:return new r(t);case et:return function(t){var e=new t.constructor(t.source,Ut.exec(t));return e.lastIndex=t.lastIndex,e}(t);case nt:return new r;case it:return i=t,fr?ee(fr.call(i)):{}}var i}(t,y,s)}}a||(a=new wr);var g=a.get(t);if(g)return g;a.set(t,u),ju(t)?t.forEach((function(r){u.add(Dr(r,e,n,r,t,a))})):Pu(t)&&t.forEach((function(r,i){u.set(i,Dr(r,e,n,i,t,a))}));var m=f?o:(c?l?To:Co:l?os:is)(t);return Ke(m||t,(function(r,i){m&&(r=t[i=r]),kr(u,i,Dr(r,e,n,i,t,a))})),u}function Rr(t,e,n){var r=n.length;if(null==t)return!r;for(t=ee(t);r--;){var i=n[r],a=e[i],u=t[i];if(u===o&&!(i in t)||!a(u))return!1}return!0}function Lr(t,e,n){if("function"!=typeof t)throw new ie(s);return ia((function(){t.apply(o,n)}),e)}function Br(t,e,n,r){var i=-1,o=Ze,u=!0,s=t.length,l=[],c=e.length;if(!s)return l;n&&(e=Qe(e,gn(n))),r?(o=Je,u=!1):e.length>=a&&(o=_n,u=!1,e=new br(e));t:for(;++i<s;){var f=t[i],h=null==n?f:n(f);if(f=r||0!==f?f:0,u&&h==h){for(var p=c;p--;)if(e[p]===h)continue t;l.push(f)}else o(e,h,r)||l.push(f)}return l}pr.templateSettings={escape:Mt,evaluate:St,interpolate:kt,variable:"",imports:{_:pr}},pr.prototype=yr.prototype,pr.prototype.constructor=pr,vr.prototype=dr(yr.prototype),vr.prototype.constructor=vr,gr.prototype=dr(yr.prototype),gr.prototype.constructor=gr,mr.prototype.clear=function(){this.__data__=nr?nr(null):{},this.size=0},mr.prototype.delete=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e},mr.prototype.get=function(t){var e=this.__data__;if(nr){var n=e[t];return n===l?o:n}return ce.call(e,t)?e[t]:o},mr.prototype.has=function(t){var e=this.__data__;return nr?e[t]!==o:ce.call(e,t)},mr.prototype.set=function(t,e){var n=this.__data__;return this.size+=this.has(t)?0:1,n[t]=nr&&e===o?l:e,this},_r.prototype.clear=function(){this.__data__=[],this.size=0},_r.prototype.delete=function(t){var e=this.__data__,n=Pr(e,t);return!(n<0)&&(n==e.length-1?e.pop():De.call(e,n,1),--this.size,!0)},_r.prototype.get=function(t){var e=this.__data__,n=Pr(e,t);return n<0?o:e[n][1]},_r.prototype.has=function(t){return Pr(this.__data__,t)>-1},_r.prototype.set=function(t,e){var n=this.__data__,r=Pr(n,t);return r<0?(++this.size,n.push([t,e])):n[r][1]=e,this},xr.prototype.clear=function(){this.size=0,this.__data__={hash:new mr,map:new(Jn||_r),string:new mr}},xr.prototype.delete=function(t){var e=Lo(this,t).delete(t);return this.size-=e?1:0,e},xr.prototype.get=function(t){return Lo(this,t).get(t)},xr.prototype.has=function(t){return Lo(this,t).has(t)},xr.prototype.set=function(t,e){var n=Lo(this,t),r=n.size;return n.set(t,e),this.size+=n.size==r?0:1,this},br.prototype.add=br.prototype.push=function(t){return this.__data__.set(t,l),this},br.prototype.has=function(t){return this.__data__.has(t)},wr.prototype.clear=function(){this.__data__=new _r,this.size=0},wr.prototype.delete=function(t){var e=this.__data__,n=e.delete(t);return this.size=e.size,n},wr.prototype.get=function(t){return this.__data__.get(t)},wr.prototype.has=function(t){return this.__data__.has(t)},wr.prototype.set=function(t,e){var n=this.__data__;if(n instanceof _r){var r=n.__data__;if(!Jn||r.length<a-1)return r.push([t,e]),this.size=++n.size,this;n=this.__data__=new xr(r)}return n.set(t,e),this.size=n.size,this};var Fr=ao(Kr),zr=ao(Xr,!0);function Wr(t,e){var n=!0;return Fr(t,(function(t,r,i){return n=!!e(t,r,i)})),n}function Vr(t,e,n){for(var r=-1,i=t.length;++r<i;){var a=t[r],u=e(a);if(null!=u&&(s===o?u==u&&!Du(u):n(u,s)))var s=u,l=a}return l}function Ur(t,e){var n=[];return Fr(t,(function(t,r,i){e(t,r,i)&&n.push(t)})),n}function qr(t,e,n,r,i){var o=-1,a=t.length;for(n||(n=Go),i||(i=[]);++o<a;){var u=t[o];e>0&&n(u)?e>1?qr(u,e-1,n,r,i):tn(i,u):r||(i[i.length]=u)}return i}var Gr=uo(),Hr=uo(!0);function Kr(t,e){return t&&Gr(t,e,is)}function Xr(t,e){return t&&Hr(t,e,is)}function Yr(t,e){return $e(e,(function(e){return Ou(t[e])}))}function $r(t,e){for(var n=0,r=(e=Hi(e,t)).length;null!=t&&n<r;)t=t[ca(e[n++])];return n&&n==r?t:o}function Zr(t,e,n){var r=e(t);return gu(t)?r:tn(r,n(t))}function Jr(t){return null==t?t===o?ot:J:on&&on in ee(t)?function(t){var e=ce.call(t,on),n=t[on];try{t[on]=o;var r=!0}catch(t){}var i=pe.call(t);r&&(e?t[on]=n:delete t[on]);return i}(t):function(t){return pe.call(t)}(t)}function Qr(t,e){return t>e}function ti(t,e){return null!=t&&ce.call(t,e)}function ei(t,e){return null!=t&&e in ee(t)}function ni(t,e,n){for(var i=n?Je:Ze,a=t[0].length,u=t.length,s=u,l=r(u),c=1/0,f=[];s--;){var h=t[s];s&&e&&(h=Qe(h,gn(e))),c=Hn(h.length,c),l[s]=!n&&(e||a>=120&&h.length>=120)?new br(s&&h):o}h=t[0];var p=-1,d=l[0];t:for(;++p<a&&f.length<c;){var y=h[p],v=e?e(y):y;if(y=n||0!==y?y:0,!(d?_n(d,v):i(f,v,n))){for(s=u;--s;){var g=l[s];if(!(g?_n(g,v):i(t[s],v,n)))continue t}d&&d.push(v),f.push(y)}}return f}function ri(t,e,n){var r=null==(t=ea(t,e=Hi(e,t)))?t:t[ca(Aa(e))];return null==r?o:Ge(r,t,n)}function ii(t){return ku(t)&&Jr(t)==W}function oi(t,e,n,r,i){return t===e||(null==t||null==e||!ku(t)&&!ku(e)?t!=t&&e!=e:function(t,e,n,r,i,a){var u=gu(t),s=gu(e),l=u?V:Vo(t),c=s?V:Vo(e),f=(l=l==W?Q:l)==Q,h=(c=c==W?Q:c)==Q,p=l==c;if(p&&bu(t)){if(!bu(e))return!1;u=!0,f=!1}if(p&&!f)return a||(a=new wr),u||Ru(t)?Po(t,e,n,r,i,a):function(t,e,n,r,i,o,a){switch(n){case lt:if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case st:return!(t.byteLength!=e.byteLength||!o(new we(t),new we(e)));case q:case G:case Z:return pu(+t,+e);case K:return t.name==e.name&&t.message==e.message;case et:case rt:return t==e+"";case $:var u=Mn;case nt:var s=r&y;if(u||(u=Pn),t.size!=e.size&&!s)return!1;var l=a.get(t);if(l)return l==e;r|=v,a.set(t,e);var c=Po(u(t),u(e),r,i,o,a);return a.delete(t),c;case it:if(fr)return fr.call(t)==fr.call(e)}return!1}(t,e,l,n,r,i,a);if(!(n&y)){var d=f&&ce.call(t,"__wrapped__"),g=h&&ce.call(e,"__wrapped__");if(d||g){var m=d?t.value():t,_=g?e.value():e;return a||(a=new wr),i(m,_,n,r,a)}}if(!p)return!1;return a||(a=new wr),function(t,e,n,r,i,a){var u=n&y,s=Co(t),l=s.length,c=Co(e).length;if(l!=c&&!u)return!1;var f=l;for(;f--;){var h=s[f];if(!(u?h in e:ce.call(e,h)))return!1}var p=a.get(t);if(p&&a.get(e))return p==e;var d=!0;a.set(t,e),a.set(e,t);var v=u;for(;++f<l;){h=s[f];var g=t[h],m=e[h];if(r)var _=u?r(m,g,h,e,t,a):r(g,m,h,t,e,a);if(!(_===o?g===m||i(g,m,n,r,a):_)){d=!1;break}v||(v="constructor"==h)}if(d&&!v){var x=t.constructor,b=e.constructor;x!=b&&"constructor"in t&&"constructor"in e&&!("function"==typeof x&&x instanceof x&&"function"==typeof b&&b instanceof b)&&(d=!1)}return a.delete(t),a.delete(e),d}(t,e,n,r,i,a)}(t,e,n,r,oi,i))}function ai(t,e,n,r){var i=n.length,a=i,u=!r;if(null==t)return!a;for(t=ee(t);i--;){var s=n[i];if(u&&s[2]?s[1]!==t[s[0]]:!(s[0]in t))return!1}for(;++i<a;){var l=(s=n[i])[0],c=t[l],f=s[1];if(u&&s[2]){if(c===o&&!(l in t))return!1}else{var h=new wr;if(r)var p=r(c,f,l,t,e,h);if(!(p===o?oi(f,c,y|v,r,h):p))return!1}}return!0}function ui(t){return!(!Su(t)||(e=t,he&&he in e))&&(Ou(t)?ve:Ht).test(fa(t));var e}function si(t){return"function"==typeof t?t:null==t?Ns:"object"==typeof t?gu(t)?di(t[0],t[1]):pi(t):Fs(t)}function li(t){if(!Zo(t))return qn(t);var e=[];for(var n in ee(t))ce.call(t,n)&&"constructor"!=n&&e.push(n);return e}function ci(t){if(!Su(t))return function(t){var e=[];if(null!=t)for(var n in ee(t))e.push(n);return e}(t);var e=Zo(t),n=[];for(var r in t)("constructor"!=r||!e&&ce.call(t,r))&&n.push(r);return n}function fi(t,e){return t<e}function hi(t,e){var n=-1,i=_u(t)?r(t.length):[];return Fr(t,(function(t,r,o){i[++n]=e(t,r,o)})),i}function pi(t){var e=Bo(t);return 1==e.length&&e[0][2]?Qo(e[0][0],e[0][1]):function(n){return n===t||ai(n,t,e)}}function di(t,e){return Xo(t)&&Jo(e)?Qo(ca(t),e):function(n){var r=Qu(n,t);return r===o&&r===e?ts(n,t):oi(e,r,y|v)}}function yi(t,e,n,r,i){t!==e&&Gr(e,(function(a,u){if(i||(i=new wr),Su(a))!function(t,e,n,r,i,a,u){var s=na(t,n),l=na(e,n),c=u.get(l);if(c)return void Sr(t,n,c);var f=a?a(s,l,n+"",t,e,u):o,h=f===o;if(h){var p=gu(l),d=!p&&bu(l),y=!p&&!d&&Ru(l);f=l,p||d||y?gu(s)?f=s:xu(s)?f=no(s):d?(h=!1,f=$i(l,!0)):y?(h=!1,f=Ji(l,!0)):f=[]:Cu(l)||vu(l)?(f=s,vu(s)?f=qu(s):Su(s)&&!Ou(s)||(f=qo(l))):h=!1}h&&(u.set(l,f),i(f,l,r,a,u),u.delete(l));Sr(t,n,f)}(t,e,u,n,yi,r,i);else{var s=r?r(na(t,u),a,u+"",t,e,i):o;s===o&&(s=a),Sr(t,u,s)}}),os)}function vi(t,e){var n=t.length;if(n)return Ho(e+=e<0?n:0,n)?t[e]:o}function gi(t,e,n){var r=-1;return e=Qe(e.length?e:[Ns],gn(Ro())),function(t,e){var n=t.length;for(t.sort(e);n--;)t[n]=t[n].value;return t}(hi(t,(function(t,n,i){return{criteria:Qe(e,(function(e){return e(t)})),index:++r,value:t}})),(function(t,e){return function(t,e,n){var r=-1,i=t.criteria,o=e.criteria,a=i.length,u=n.length;for(;++r<a;){var s=Qi(i[r],o[r]);if(s){if(r>=u)return s;var l=n[r];return s*("desc"==l?-1:1)}}return t.index-e.index}(t,e,n)}))}function mi(t,e,n){for(var r=-1,i=e.length,o={};++r<i;){var a=e[r],u=$r(t,a);n(u,a)&&Mi(o,Hi(a,t),u)}return o}function _i(t,e,n,r){var i=r?ln:sn,o=-1,a=e.length,u=t;for(t===e&&(e=no(e)),n&&(u=Qe(t,gn(n)));++o<a;)for(var s=0,l=e[o],c=n?n(l):l;(s=i(u,c,s,r))>-1;)u!==t&&De.call(u,s,1),De.call(t,s,1);return t}function xi(t,e){for(var n=t?e.length:0,r=n-1;n--;){var i=e[n];if(n==r||i!==o){var o=i;Ho(i)?De.call(t,i,1):Bi(t,i)}}return t}function bi(t,e){return t+Fn(Yn()*(e-t+1))}function wi(t,e){var n="";if(!t||e<1||e>I)return n;do{e%2&&(n+=t),(e=Fn(e/2))&&(t+=t)}while(e);return n}function Ai(t,e){return oa(ta(t,e,Ns),t+"")}function Oi(t){return Or(ps(t))}function Ei(t,e){var n=ps(t);return sa(n,Ir(e,0,n.length))}function Mi(t,e,n,r){if(!Su(t))return t;for(var i=-1,a=(e=Hi(e,t)).length,u=a-1,s=t;null!=s&&++i<a;){var l=ca(e[i]),c=n;if(i!=u){var f=s[l];(c=r?r(f,l,s):o)===o&&(c=Su(f)?f:Ho(e[i+1])?[]:{})}kr(s,l,c),s=s[l]}return t}var Si=rr?function(t,e){return rr.set(t,e),t}:Ns,ki=pn?function(t,e){return pn(t,"toString",{configurable:!0,enumerable:!1,value:Ss(e),writable:!0})}:Ns;function Pi(t){return sa(ps(t))}function Ni(t,e,n){var i=-1,o=t.length;e<0&&(e=-e>o?0:o+e),(n=n>o?o:n)<0&&(n+=o),o=e>n?0:n-e>>>0,e>>>=0;for(var a=r(o);++i<o;)a[i]=t[i+e];return a}function Ci(t,e){var n;return Fr(t,(function(t,r,i){return!(n=e(t,r,i))})),!!n}function Ti(t,e,n){var r=0,i=null==t?r:t.length;if("number"==typeof e&&e==e&&i<=F){for(;r<i;){var o=r+i>>>1,a=t[o];null!==a&&!Du(a)&&(n?a<=e:a<e)?r=o+1:i=o}return i}return ji(t,e,Ns,n)}function ji(t,e,n,r){e=n(e);for(var i=0,a=null==t?0:t.length,u=e!=e,s=null===e,l=Du(e),c=e===o;i<a;){var f=Fn((i+a)/2),h=n(t[f]),p=h!==o,d=null===h,y=h==h,v=Du(h);if(u)var g=r||y;else g=c?y&&(r||p):s?y&&p&&(r||!d):l?y&&p&&!d&&(r||!v):!d&&!v&&(r?h<=e:h<e);g?i=f+1:a=f}return Hn(a,B)}function Ii(t,e){for(var n=-1,r=t.length,i=0,o=[];++n<r;){var a=t[n],u=e?e(a):a;if(!n||!pu(u,s)){var s=u;o[i++]=0===a?0:a}}return o}function Di(t){return"number"==typeof t?t:Du(t)?R:+t}function Ri(t){if("string"==typeof t)return t;if(gu(t))return Qe(t,Ri)+"";if(Du(t))return hr?hr.call(t):"";var e=t+"";return"0"==e&&1/t==-j?"-0":e}function Li(t,e,n){var r=-1,i=Ze,o=t.length,u=!0,s=[],l=s;if(n)u=!1,i=Je;else if(o>=a){var c=e?null:Ao(t);if(c)return Pn(c);u=!1,i=_n,l=new br}else l=e?[]:s;t:for(;++r<o;){var f=t[r],h=e?e(f):f;if(f=n||0!==f?f:0,u&&h==h){for(var p=l.length;p--;)if(l[p]===h)continue t;e&&l.push(h),s.push(f)}else i(l,h,n)||(l!==s&&l.push(h),s.push(f))}return s}function Bi(t,e){return null==(t=ea(t,e=Hi(e,t)))||delete t[ca(Aa(e))]}function Fi(t,e,n,r){return Mi(t,e,n($r(t,e)),r)}function zi(t,e,n,r){for(var i=t.length,o=r?i:-1;(r?o--:++o<i)&&e(t[o],o,t););return n?Ni(t,r?0:o,r?o+1:i):Ni(t,r?o+1:0,r?i:o)}function Wi(t,e){var n=t;return n instanceof gr&&(n=n.value()),en(e,(function(t,e){return e.func.apply(e.thisArg,tn([t],e.args))}),n)}function Vi(t,e,n){var i=t.length;if(i<2)return i?Li(t[0]):[];for(var o=-1,a=r(i);++o<i;)for(var u=t[o],s=-1;++s<i;)s!=o&&(a[o]=Br(a[o]||u,t[s],e,n));return Li(qr(a,1),e,n)}function Ui(t,e,n){for(var r=-1,i=t.length,a=e.length,u={};++r<i;){var s=r<a?e[r]:o;n(u,t[r],s)}return u}function qi(t){return xu(t)?t:[]}function Gi(t){return"function"==typeof t?t:Ns}function Hi(t,e){return gu(t)?t:Xo(t,e)?[t]:la(Gu(t))}var Ki=Ai;function Xi(t,e,n){var r=t.length;return n=n===o?r:n,!e&&n>=r?t:Ni(t,e,n)}var Yi=Dn||function(t){return je.clearTimeout(t)};function $i(t,e){if(e)return t.slice();var n=t.length,r=ke?ke(n):new t.constructor(n);return t.copy(r),r}function Zi(t){var e=new t.constructor(t.byteLength);return new we(e).set(new we(t)),e}function Ji(t,e){var n=e?Zi(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.length)}function Qi(t,e){if(t!==e){var n=t!==o,r=null===t,i=t==t,a=Du(t),u=e!==o,s=null===e,l=e==e,c=Du(e);if(!s&&!c&&!a&&t>e||a&&u&&l&&!s&&!c||r&&u&&l||!n&&l||!i)return 1;if(!r&&!a&&!c&&t<e||c&&n&&i&&!r&&!a||s&&n&&i||!u&&i||!l)return-1}return 0}function to(t,e,n,i){for(var o=-1,a=t.length,u=n.length,s=-1,l=e.length,c=Gn(a-u,0),f=r(l+c),h=!i;++s<l;)f[s]=e[s];for(;++o<u;)(h||o<a)&&(f[n[o]]=t[o]);for(;c--;)f[s++]=t[o++];return f}function eo(t,e,n,i){for(var o=-1,a=t.length,u=-1,s=n.length,l=-1,c=e.length,f=Gn(a-s,0),h=r(f+c),p=!i;++o<f;)h[o]=t[o];for(var d=o;++l<c;)h[d+l]=e[l];for(;++u<s;)(p||o<a)&&(h[d+n[u]]=t[o++]);return h}function no(t,e){var n=-1,i=t.length;for(e||(e=r(i));++n<i;)e[n]=t[n];return e}function ro(t,e,n,r){var i=!n;n||(n={});for(var a=-1,u=e.length;++a<u;){var s=e[a],l=r?r(n[s],t[s],s,n,t):o;l===o&&(l=t[s]),i?Tr(n,s,l):kr(n,s,l)}return n}function io(t,e){return function(n,r){var i=gu(n)?He:Nr,o=e?e():{};return i(n,t,Ro(r,2),o)}}function oo(t){return Ai((function(e,n){var r=-1,i=n.length,a=i>1?n[i-1]:o,u=i>2?n[2]:o;for(a=t.length>3&&"function"==typeof a?(i--,a):o,u&&Ko(n[0],n[1],u)&&(a=i<3?o:a,i=1),e=ee(e);++r<i;){var s=n[r];s&&t(e,s,r,a)}return e}))}function ao(t,e){return function(n,r){if(null==n)return n;if(!_u(n))return t(n,r);for(var i=n.length,o=e?i:-1,a=ee(n);(e?o--:++o<i)&&!1!==r(a[o],o,a););return n}}function uo(t){return function(e,n,r){for(var i=-1,o=ee(e),a=r(e),u=a.length;u--;){var s=a[t?u:++i];if(!1===n(o[s],s,o))break}return e}}function so(t){return function(e){var n=En(e=Gu(e))?Tn(e):o,r=n?n[0]:e.charAt(0),i=n?Xi(n,1).join(""):e.slice(1);return r[t]()+i}}function lo(t){return function(e){return en(Os(vs(e).replace(me,"")),t,"")}}function co(t){return function(){var e=arguments;switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3]);case 5:return new t(e[0],e[1],e[2],e[3],e[4]);case 6:return new t(e[0],e[1],e[2],e[3],e[4],e[5]);case 7:return new t(e[0],e[1],e[2],e[3],e[4],e[5],e[6])}var n=dr(t.prototype),r=t.apply(n,e);return Su(r)?r:n}}function fo(t){return function(e,n,r){var i=ee(e);if(!_u(e)){var a=Ro(n,3);e=is(e),n=function(t){return a(i[t],t,i)}}var u=t(e,n,r);return u>-1?i[a?e[u]:u]:o}}function ho(t){return No((function(e){var n=e.length,r=n,i=vr.prototype.thru;for(t&&e.reverse();r--;){var a=e[r];if("function"!=typeof a)throw new ie(s);if(i&&!u&&"wrapper"==Io(a))var u=new vr([],!0)}for(r=u?r:n;++r<n;){var l=Io(a=e[r]),c="wrapper"==l?jo(a):o;u=c&&Yo(c[0])&&c[1]==(O|x|w|E)&&!c[4].length&&1==c[9]?u[Io(c[0])].apply(u,c[3]):1==a.length&&Yo(a)?u[l]():u.thru(a)}return function(){var t=arguments,r=t[0];if(u&&1==t.length&&gu(r))return u.plant(r).value();for(var i=0,o=n?e[i].apply(this,t):r;++i<n;)o=e[i].call(this,o);return o}}))}function po(t,e,n,i,a,u,s,l,c,f){var h=e&O,p=e&g,d=e&m,y=e&(x|b),v=e&M,_=d?o:co(t);return function g(){for(var m=arguments.length,x=r(m),b=m;b--;)x[b]=arguments[b];if(y)var w=Do(g),A=function(t,e){for(var n=t.length,r=0;n--;)t[n]===e&&++r;return r}(x,w);if(i&&(x=to(x,i,a,y)),u&&(x=eo(x,u,s,y)),m-=A,y&&m<f){var O=kn(x,w);return bo(t,e,po,g.placeholder,n,x,O,l,c,f-m)}var E=p?n:this,M=d?E[t]:t;return m=x.length,l?x=function(t,e){var n=t.length,r=Hn(e.length,n),i=no(t);for(;r--;){var a=e[r];t[r]=Ho(a,n)?i[a]:o}return t}(x,l):v&&m>1&&x.reverse(),h&&c<m&&(x.length=c),this&&this!==je&&this instanceof g&&(M=_||co(M)),M.apply(E,x)}}function yo(t,e){return function(n,r){return function(t,e,n,r){return Kr(t,(function(t,i,o){e(r,n(t),i,o)})),r}(n,t,e(r),{})}}function vo(t,e){return function(n,r){var i;if(n===o&&r===o)return e;if(n!==o&&(i=n),r!==o){if(i===o)return r;"string"==typeof n||"string"==typeof r?(n=Ri(n),r=Ri(r)):(n=Di(n),r=Di(r)),i=t(n,r)}return i}}function go(t){return No((function(e){return e=Qe(e,gn(Ro())),Ai((function(n){var r=this;return t(e,(function(t){return Ge(t,r,n)}))}))}))}function mo(t,e){var n=(e=e===o?" ":Ri(e)).length;if(n<2)return n?wi(e,t):e;var r=wi(e,Bn(t/Cn(e)));return En(e)?Xi(Tn(r),0,t).join(""):r.slice(0,t)}function _o(t){return function(e,n,i){return i&&"number"!=typeof i&&Ko(e,n,i)&&(n=i=o),e=zu(e),n===o?(n=e,e=0):n=zu(n),function(t,e,n,i){for(var o=-1,a=Gn(Bn((e-t)/(n||1)),0),u=r(a);a--;)u[i?a:++o]=t,t+=n;return u}(e,n,i=i===o?e<n?1:-1:zu(i),t)}}function xo(t){return function(e,n){return"string"==typeof e&&"string"==typeof n||(e=Uu(e),n=Uu(n)),t(e,n)}}function bo(t,e,n,r,i,a,u,s,l,c){var f=e&x;e|=f?w:A,(e&=~(f?A:w))&_||(e&=~(g|m));var h=[t,e,i,f?a:o,f?u:o,f?o:a,f?o:u,s,l,c],p=n.apply(o,h);return Yo(t)&&ra(p,h),p.placeholder=r,aa(p,t,e)}function wo(t){var e=te[t];return function(t,n){if(t=Uu(t),(n=null==n?0:Hn(Wu(n),292))&&Vn(t)){var r=(Gu(t)+"e").split("e");return+((r=(Gu(e(r[0]+"e"+(+r[1]+n)))+"e").split("e"))[0]+"e"+(+r[1]-n))}return e(t)}}var Ao=tr&&1/Pn(new tr([,-0]))[1]==j?function(t){return new tr(t)}:Ds;function Oo(t){return function(e){var n=Vo(e);return n==$?Mn(e):n==nt?Nn(e):function(t,e){return Qe(e,(function(e){return[e,t[e]]}))}(e,t(e))}}function Eo(t,e,n,i,a,u,l,c){var h=e&m;if(!h&&"function"!=typeof t)throw new ie(s);var p=i?i.length:0;if(p||(e&=~(w|A),i=a=o),l=l===o?l:Gn(Wu(l),0),c=c===o?c:Wu(c),p-=a?a.length:0,e&A){var d=i,y=a;i=a=o}var v=h?o:jo(t),M=[t,e,n,i,a,d,y,u,l,c];if(v&&function(t,e){var n=t[1],r=e[1],i=n|r,o=i<(g|m|O),a=r==O&&n==x||r==O&&n==E&&t[7].length<=e[8]||r==(O|E)&&e[7].length<=e[8]&&n==x;if(!o&&!a)return t;r&g&&(t[2]=e[2],i|=n&g?0:_);var u=e[3];if(u){var s=t[3];t[3]=s?to(s,u,e[4]):u,t[4]=s?kn(t[3],f):e[4]}(u=e[5])&&(s=t[5],t[5]=s?eo(s,u,e[6]):u,t[6]=s?kn(t[5],f):e[6]);(u=e[7])&&(t[7]=u);r&O&&(t[8]=null==t[8]?e[8]:Hn(t[8],e[8]));null==t[9]&&(t[9]=e[9]);t[0]=e[0],t[1]=i}(M,v),t=M[0],e=M[1],n=M[2],i=M[3],a=M[4],!(c=M[9]=M[9]===o?h?0:t.length:Gn(M[9]-p,0))&&e&(x|b)&&(e&=~(x|b)),e&&e!=g)S=e==x||e==b?function(t,e,n){var i=co(t);return function a(){for(var u=arguments.length,s=r(u),l=u,c=Do(a);l--;)s[l]=arguments[l];var f=u<3&&s[0]!==c&&s[u-1]!==c?[]:kn(s,c);return(u-=f.length)<n?bo(t,e,po,a.placeholder,o,s,f,o,o,n-u):Ge(this&&this!==je&&this instanceof a?i:t,this,s)}}(t,e,c):e!=w&&e!=(g|w)||a.length?po.apply(o,M):function(t,e,n,i){var o=e&g,a=co(t);return function e(){for(var u=-1,s=arguments.length,l=-1,c=i.length,f=r(c+s),h=this&&this!==je&&this instanceof e?a:t;++l<c;)f[l]=i[l];for(;s--;)f[l++]=arguments[++u];return Ge(h,o?n:this,f)}}(t,e,n,i);else var S=function(t,e,n){var r=e&g,i=co(t);return function e(){return(this&&this!==je&&this instanceof e?i:t).apply(r?n:this,arguments)}}(t,e,n);return aa((v?Si:ra)(S,M),t,e)}function Mo(t,e,n,r){return t===o||pu(t,ue[n])&&!ce.call(r,n)?e:t}function So(t,e,n,r,i,a){return Su(t)&&Su(e)&&(a.set(e,t),yi(t,e,o,So,a),a.delete(e)),t}function ko(t){return Cu(t)?o:t}function Po(t,e,n,r,i,a){var u=n&y,s=t.length,l=e.length;if(s!=l&&!(u&&l>s))return!1;var c=a.get(t);if(c&&a.get(e))return c==e;var f=-1,h=!0,p=n&v?new br:o;for(a.set(t,e),a.set(e,t);++f<s;){var d=t[f],g=e[f];if(r)var m=u?r(g,d,f,e,t,a):r(d,g,f,t,e,a);if(m!==o){if(m)continue;h=!1;break}if(p){if(!rn(e,(function(t,e){if(!_n(p,e)&&(d===t||i(d,t,n,r,a)))return p.push(e)}))){h=!1;break}}else if(d!==g&&!i(d,g,n,r,a)){h=!1;break}}return a.delete(t),a.delete(e),h}function No(t){return oa(ta(t,o,ma),t+"")}function Co(t){return Zr(t,is,zo)}function To(t){return Zr(t,os,Wo)}var jo=rr?function(t){return rr.get(t)}:Ds;function Io(t){for(var e=t.name+"",n=ir[e],r=ce.call(ir,e)?n.length:0;r--;){var i=n[r],o=i.func;if(null==o||o==t)return i.name}return e}function Do(t){return(ce.call(pr,"placeholder")?pr:t).placeholder}function Ro(){var t=pr.iteratee||Cs;return t=t===Cs?si:t,arguments.length?t(arguments[0],arguments[1]):t}function Lo(t,e){var n,r,i=t.__data__;return("string"==(r=typeof(n=e))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?i["string"==typeof e?"string":"hash"]:i.map}function Bo(t){for(var e=is(t),n=e.length;n--;){var r=e[n],i=t[r];e[n]=[r,i,Jo(i)]}return e}function Fo(t,e){var n=function(t,e){return null==t?o:t[e]}(t,e);return ui(n)?n:o}var zo=zn?function(t){return null==t?[]:(t=ee(t),$e(zn(t),(function(e){return Ie.call(t,e)})))}:Vs,Wo=zn?function(t){for(var e=[];t;)tn(e,zo(t)),t=Ce(t);return e}:Vs,Vo=Jr;function Uo(t,e,n){for(var r=-1,i=(e=Hi(e,t)).length,o=!1;++r<i;){var a=ca(e[r]);if(!(o=null!=t&&n(t,a)))break;t=t[a]}return o||++r!=i?o:!!(i=null==t?0:t.length)&&Mu(i)&&Ho(a,i)&&(gu(t)||vu(t))}function qo(t){return"function"!=typeof t.constructor||Zo(t)?{}:dr(Ce(t))}function Go(t){return gu(t)||vu(t)||!!(Le&&t&&t[Le])}function Ho(t,e){var n=typeof t;return!!(e=null==e?I:e)&&("number"==n||"symbol"!=n&&Xt.test(t))&&t>-1&&t%1==0&&t<e}function Ko(t,e,n){if(!Su(n))return!1;var r=typeof e;return!!("number"==r?_u(n)&&Ho(e,n.length):"string"==r&&e in n)&&pu(n[e],t)}function Xo(t,e){if(gu(t))return!1;var n=typeof t;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=t&&!Du(t))||(Nt.test(t)||!Pt.test(t)||null!=e&&t in ee(e))}function Yo(t){var e=Io(t),n=pr[e];if("function"!=typeof n||!(e in gr.prototype))return!1;if(t===n)return!0;var r=jo(n);return!!r&&t===r[0]}(Zn&&Vo(new Zn(new ArrayBuffer(1)))!=lt||Jn&&Vo(new Jn)!=$||Qn&&"[object Promise]"!=Vo(Qn.resolve())||tr&&Vo(new tr)!=nt||er&&Vo(new er)!=at)&&(Vo=function(t){var e=Jr(t),n=e==Q?t.constructor:o,r=n?fa(n):"";if(r)switch(r){case or:return lt;case ar:return $;case ur:return"[object Promise]";case sr:return nt;case lr:return at}return e});var $o=se?Ou:Us;function Zo(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||ue)}function Jo(t){return t==t&&!Su(t)}function Qo(t,e){return function(n){return null!=n&&(n[t]===e&&(e!==o||t in ee(n)))}}function ta(t,e,n){return e=Gn(e===o?t.length-1:e,0),function(){for(var i=arguments,o=-1,a=Gn(i.length-e,0),u=r(a);++o<a;)u[o]=i[e+o];o=-1;for(var s=r(e+1);++o<e;)s[o]=i[o];return s[e]=n(u),Ge(t,this,s)}}function ea(t,e){return e.length<2?t:$r(t,Ni(e,0,-1))}function na(t,e){if(("constructor"!==e||"function"!=typeof t[e])&&"__proto__"!=e)return t[e]}var ra=ua(Si),ia=Ln||function(t,e){return je.setTimeout(t,e)},oa=ua(ki);function aa(t,e,n){var r=e+"";return oa(t,function(t,e){var n=e.length;if(!n)return t;var r=n-1;return e[r]=(n>1?"& ":"")+e[r],e=e.join(n>2?", ":" "),t.replace(Lt,"{\n/* [wrapped with "+e+"] */\n")}(r,function(t,e){return Ke(z,(function(n){var r="_."+n[0];e&n[1]&&!Ze(t,r)&&t.push(r)})),t.sort()}(function(t){var e=t.match(Bt);return e?e[1].split(Ft):[]}(r),n)))}function ua(t){var e=0,n=0;return function(){var r=Kn(),i=N-(r-n);if(n=r,i>0){if(++e>=P)return arguments[0]}else e=0;return t.apply(o,arguments)}}function sa(t,e){var n=-1,r=t.length,i=r-1;for(e=e===o?r:e;++n<e;){var a=bi(n,i),u=t[a];t[a]=t[n],t[n]=u}return t.length=e,t}var la=function(t){var e=uu(t,(function(t){return n.size===c&&n.clear(),t})),n=e.cache;return e}((function(t){var e=[];return 46===t.charCodeAt(0)&&e.push(""),t.replace(Ct,(function(t,n,r,i){e.push(r?i.replace(Wt,"$1"):n||t)})),e}));function ca(t){if("string"==typeof t||Du(t))return t;var e=t+"";return"0"==e&&1/t==-j?"-0":e}function fa(t){if(null!=t){try{return le.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function ha(t){if(t instanceof gr)return t.clone();var e=new vr(t.__wrapped__,t.__chain__);return e.__actions__=no(t.__actions__),e.__index__=t.__index__,e.__values__=t.__values__,e}var pa=Ai((function(t,e){return xu(t)?Br(t,qr(e,1,xu,!0)):[]})),da=Ai((function(t,e){var n=Aa(e);return xu(n)&&(n=o),xu(t)?Br(t,qr(e,1,xu,!0),Ro(n,2)):[]})),ya=Ai((function(t,e){var n=Aa(e);return xu(n)&&(n=o),xu(t)?Br(t,qr(e,1,xu,!0),o,n):[]}));function va(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=null==n?0:Wu(n);return i<0&&(i=Gn(r+i,0)),un(t,Ro(e,3),i)}function ga(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=r-1;return n!==o&&(i=Wu(n),i=n<0?Gn(r+i,0):Hn(i,r-1)),un(t,Ro(e,3),i,!0)}function ma(t){return(null==t?0:t.length)?qr(t,1):[]}function _a(t){return t&&t.length?t[0]:o}var xa=Ai((function(t){var e=Qe(t,qi);return e.length&&e[0]===t[0]?ni(e):[]})),ba=Ai((function(t){var e=Aa(t),n=Qe(t,qi);return e===Aa(n)?e=o:n.pop(),n.length&&n[0]===t[0]?ni(n,Ro(e,2)):[]})),wa=Ai((function(t){var e=Aa(t),n=Qe(t,qi);return(e="function"==typeof e?e:o)&&n.pop(),n.length&&n[0]===t[0]?ni(n,o,e):[]}));function Aa(t){var e=null==t?0:t.length;return e?t[e-1]:o}var Oa=Ai(Ea);function Ea(t,e){return t&&t.length&&e&&e.length?_i(t,e):t}var Ma=No((function(t,e){var n=null==t?0:t.length,r=jr(t,e);return xi(t,Qe(e,(function(t){return Ho(t,n)?+t:t})).sort(Qi)),r}));function Sa(t){return null==t?t:$n.call(t)}var ka=Ai((function(t){return Li(qr(t,1,xu,!0))})),Pa=Ai((function(t){var e=Aa(t);return xu(e)&&(e=o),Li(qr(t,1,xu,!0),Ro(e,2))})),Na=Ai((function(t){var e=Aa(t);return e="function"==typeof e?e:o,Li(qr(t,1,xu,!0),o,e)}));function Ca(t){if(!t||!t.length)return[];var e=0;return t=$e(t,(function(t){if(xu(t))return e=Gn(t.length,e),!0})),vn(e,(function(e){return Qe(t,hn(e))}))}function Ta(t,e){if(!t||!t.length)return[];var n=Ca(t);return null==e?n:Qe(n,(function(t){return Ge(e,o,t)}))}var ja=Ai((function(t,e){return xu(t)?Br(t,e):[]})),Ia=Ai((function(t){return Vi($e(t,xu))})),Da=Ai((function(t){var e=Aa(t);return xu(e)&&(e=o),Vi($e(t,xu),Ro(e,2))})),Ra=Ai((function(t){var e=Aa(t);return e="function"==typeof e?e:o,Vi($e(t,xu),o,e)})),La=Ai(Ca);var Ba=Ai((function(t){var e=t.length,n=e>1?t[e-1]:o;return n="function"==typeof n?(t.pop(),n):o,Ta(t,n)}));function Fa(t){var e=pr(t);return e.__chain__=!0,e}function za(t,e){return e(t)}var Wa=No((function(t){var e=t.length,n=e?t[0]:0,r=this.__wrapped__,i=function(e){return jr(e,t)};return!(e>1||this.__actions__.length)&&r instanceof gr&&Ho(n)?((r=r.slice(n,+n+(e?1:0))).__actions__.push({func:za,args:[i],thisArg:o}),new vr(r,this.__chain__).thru((function(t){return e&&!t.length&&t.push(o),t}))):this.thru(i)}));var Va=io((function(t,e,n){ce.call(t,n)?++t[n]:Tr(t,n,1)}));var Ua=fo(va),qa=fo(ga);function Ga(t,e){return(gu(t)?Ke:Fr)(t,Ro(e,3))}function Ha(t,e){return(gu(t)?Xe:zr)(t,Ro(e,3))}var Ka=io((function(t,e,n){ce.call(t,n)?t[n].push(e):Tr(t,n,[e])}));var Xa=Ai((function(t,e,n){var i=-1,o="function"==typeof e,a=_u(t)?r(t.length):[];return Fr(t,(function(t){a[++i]=o?Ge(e,t,n):ri(t,e,n)})),a})),Ya=io((function(t,e,n){Tr(t,n,e)}));function $a(t,e){return(gu(t)?Qe:hi)(t,Ro(e,3))}var Za=io((function(t,e,n){t[n?0:1].push(e)}),(function(){return[[],[]]}));var Ja=Ai((function(t,e){if(null==t)return[];var n=e.length;return n>1&&Ko(t,e[0],e[1])?e=[]:n>2&&Ko(e[0],e[1],e[2])&&(e=[e[0]]),gi(t,qr(e,1),[])})),Qa=Rn||function(){return je.Date.now()};function tu(t,e,n){return e=n?o:e,e=t&&null==e?t.length:e,Eo(t,O,o,o,o,o,e)}function eu(t,e){var n;if("function"!=typeof e)throw new ie(s);return t=Wu(t),function(){return--t>0&&(n=e.apply(this,arguments)),t<=1&&(e=o),n}}var nu=Ai((function(t,e,n){var r=g;if(n.length){var i=kn(n,Do(nu));r|=w}return Eo(t,r,e,n,i)})),ru=Ai((function(t,e,n){var r=g|m;if(n.length){var i=kn(n,Do(ru));r|=w}return Eo(e,r,t,n,i)}));function iu(t,e,n){var r,i,a,u,l,c,f=0,h=!1,p=!1,d=!0;if("function"!=typeof t)throw new ie(s);function y(e){var n=r,a=i;return r=i=o,f=e,u=t.apply(a,n)}function v(t){var n=t-c;return c===o||n>=e||n<0||p&&t-f>=a}function g(){var t=Qa();if(v(t))return m(t);l=ia(g,function(t){var n=e-(t-c);return p?Hn(n,a-(t-f)):n}(t))}function m(t){return l=o,d&&r?y(t):(r=i=o,u)}function _(){var t=Qa(),n=v(t);if(r=arguments,i=this,c=t,n){if(l===o)return function(t){return f=t,l=ia(g,e),h?y(t):u}(c);if(p)return Yi(l),l=ia(g,e),y(c)}return l===o&&(l=ia(g,e)),u}return e=Uu(e)||0,Su(n)&&(h=!!n.leading,a=(p="maxWait"in n)?Gn(Uu(n.maxWait)||0,e):a,d="trailing"in n?!!n.trailing:d),_.cancel=function(){l!==o&&Yi(l),f=0,r=c=i=l=o},_.flush=function(){return l===o?u:m(Qa())},_}var ou=Ai((function(t,e){return Lr(t,1,e)})),au=Ai((function(t,e,n){return Lr(t,Uu(e)||0,n)}));function uu(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new ie(s);var n=function(){var r=arguments,i=e?e.apply(this,r):r[0],o=n.cache;if(o.has(i))return o.get(i);var a=t.apply(this,r);return n.cache=o.set(i,a)||o,a};return n.cache=new(uu.Cache||xr),n}function su(t){if("function"!=typeof t)throw new ie(s);return function(){var e=arguments;switch(e.length){case 0:return!t.call(this);case 1:return!t.call(this,e[0]);case 2:return!t.call(this,e[0],e[1]);case 3:return!t.call(this,e[0],e[1],e[2])}return!t.apply(this,e)}}uu.Cache=xr;var lu=Ki((function(t,e){var n=(e=1==e.length&&gu(e[0])?Qe(e[0],gn(Ro())):Qe(qr(e,1),gn(Ro()))).length;return Ai((function(r){for(var i=-1,o=Hn(r.length,n);++i<o;)r[i]=e[i].call(this,r[i]);return Ge(t,this,r)}))})),cu=Ai((function(t,e){var n=kn(e,Do(cu));return Eo(t,w,o,e,n)})),fu=Ai((function(t,e){var n=kn(e,Do(fu));return Eo(t,A,o,e,n)})),hu=No((function(t,e){return Eo(t,E,o,o,o,e)}));function pu(t,e){return t===e||t!=t&&e!=e}var du=xo(Qr),yu=xo((function(t,e){return t>=e})),vu=ii(function(){return arguments}())?ii:function(t){return ku(t)&&ce.call(t,"callee")&&!Ie.call(t,"callee")},gu=r.isArray,mu=Fe?gn(Fe):function(t){return ku(t)&&Jr(t)==st};function _u(t){return null!=t&&Mu(t.length)&&!Ou(t)}function xu(t){return ku(t)&&_u(t)}var bu=Wn||Us,wu=ze?gn(ze):function(t){return ku(t)&&Jr(t)==G};function Au(t){if(!ku(t))return!1;var e=Jr(t);return e==K||e==H||"string"==typeof t.message&&"string"==typeof t.name&&!Cu(t)}function Ou(t){if(!Su(t))return!1;var e=Jr(t);return e==X||e==Y||e==U||e==tt}function Eu(t){return"number"==typeof t&&t==Wu(t)}function Mu(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=I}function Su(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}function ku(t){return null!=t&&"object"==typeof t}var Pu=We?gn(We):function(t){return ku(t)&&Vo(t)==$};function Nu(t){return"number"==typeof t||ku(t)&&Jr(t)==Z}function Cu(t){if(!ku(t)||Jr(t)!=Q)return!1;var e=Ce(t);if(null===e)return!0;var n=ce.call(e,"constructor")&&e.constructor;return"function"==typeof n&&n instanceof n&&le.call(n)==de}var Tu=Ve?gn(Ve):function(t){return ku(t)&&Jr(t)==et};var ju=Ue?gn(Ue):function(t){return ku(t)&&Vo(t)==nt};function Iu(t){return"string"==typeof t||!gu(t)&&ku(t)&&Jr(t)==rt}function Du(t){return"symbol"==typeof t||ku(t)&&Jr(t)==it}var Ru=qe?gn(qe):function(t){return ku(t)&&Mu(t.length)&&!!Me[Jr(t)]};var Lu=xo(fi),Bu=xo((function(t,e){return t<=e}));function Fu(t){if(!t)return[];if(_u(t))return Iu(t)?Tn(t):no(t);if(Be&&t[Be])return function(t){for(var e,n=[];!(e=t.next()).done;)n.push(e.value);return n}(t[Be]());var e=Vo(t);return(e==$?Mn:e==nt?Pn:ps)(t)}function zu(t){return t?(t=Uu(t))===j||t===-j?(t<0?-1:1)*D:t==t?t:0:0===t?t:0}function Wu(t){var e=zu(t),n=e%1;return e==e?n?e-n:e:0}function Vu(t){return t?Ir(Wu(t),0,L):0}function Uu(t){if("number"==typeof t)return t;if(Du(t))return R;if(Su(t)){var e="function"==typeof t.valueOf?t.valueOf():t;t=Su(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=t.replace(It,"");var n=Gt.test(t);return n||Kt.test(t)?Ne(t.slice(2),n?2:8):qt.test(t)?R:+t}function qu(t){return ro(t,os(t))}function Gu(t){return null==t?"":Ri(t)}var Hu=oo((function(t,e){if(Zo(e)||_u(e))ro(e,is(e),t);else for(var n in e)ce.call(e,n)&&kr(t,n,e[n])})),Ku=oo((function(t,e){ro(e,os(e),t)})),Xu=oo((function(t,e,n,r){ro(e,os(e),t,r)})),Yu=oo((function(t,e,n,r){ro(e,is(e),t,r)})),$u=No(jr);var Zu=Ai((function(t,e){t=ee(t);var n=-1,r=e.length,i=r>2?e[2]:o;for(i&&Ko(e[0],e[1],i)&&(r=1);++n<r;)for(var a=e[n],u=os(a),s=-1,l=u.length;++s<l;){var c=u[s],f=t[c];(f===o||pu(f,ue[c])&&!ce.call(t,c))&&(t[c]=a[c])}return t})),Ju=Ai((function(t){return t.push(o,So),Ge(us,o,t)}));function Qu(t,e,n){var r=null==t?o:$r(t,e);return r===o?n:r}function ts(t,e){return null!=t&&Uo(t,e,ei)}var es=yo((function(t,e,n){null!=e&&"function"!=typeof e.toString&&(e=pe.call(e)),t[e]=n}),Ss(Ns)),ns=yo((function(t,e,n){null!=e&&"function"!=typeof e.toString&&(e=pe.call(e)),ce.call(t,e)?t[e].push(n):t[e]=[n]}),Ro),rs=Ai(ri);function is(t){return _u(t)?Ar(t):li(t)}function os(t){return _u(t)?Ar(t,!0):ci(t)}var as=oo((function(t,e,n){yi(t,e,n)})),us=oo((function(t,e,n,r){yi(t,e,n,r)})),ss=No((function(t,e){var n={};if(null==t)return n;var r=!1;e=Qe(e,(function(e){return e=Hi(e,t),r||(r=e.length>1),e})),ro(t,To(t),n),r&&(n=Dr(n,h|p|d,ko));for(var i=e.length;i--;)Bi(n,e[i]);return n}));var ls=No((function(t,e){return null==t?{}:function(t,e){return mi(t,e,(function(e,n){return ts(t,n)}))}(t,e)}));function cs(t,e){if(null==t)return{};var n=Qe(To(t),(function(t){return[t]}));return e=Ro(e),mi(t,n,(function(t,n){return e(t,n[0])}))}var fs=Oo(is),hs=Oo(os);function ps(t){return null==t?[]:mn(t,is(t))}var ds=lo((function(t,e,n){return e=e.toLowerCase(),t+(n?ys(e):e)}));function ys(t){return As(Gu(t).toLowerCase())}function vs(t){return(t=Gu(t))&&t.replace(Yt,wn).replace(_e,"")}var gs=lo((function(t,e,n){return t+(n?"-":"")+e.toLowerCase()})),ms=lo((function(t,e,n){return t+(n?" ":"")+e.toLowerCase()})),_s=so("toLowerCase");var xs=lo((function(t,e,n){return t+(n?"_":"")+e.toLowerCase()}));var bs=lo((function(t,e,n){return t+(n?" ":"")+As(e)}));var ws=lo((function(t,e,n){return t+(n?" ":"")+e.toUpperCase()})),As=so("toUpperCase");function Os(t,e,n){return t=Gu(t),(e=n?o:e)===o?function(t){return Ae.test(t)}(t)?function(t){return t.match(be)||[]}(t):function(t){return t.match(zt)||[]}(t):t.match(e)||[]}var Es=Ai((function(t,e){try{return Ge(t,o,e)}catch(t){return Au(t)?t:new Jt(t)}})),Ms=No((function(t,e){return Ke(e,(function(e){e=ca(e),Tr(t,e,nu(t[e],t))})),t}));function Ss(t){return function(){return t}}var ks=ho(),Ps=ho(!0);function Ns(t){return t}function Cs(t){return si("function"==typeof t?t:Dr(t,h))}var Ts=Ai((function(t,e){return function(n){return ri(n,t,e)}})),js=Ai((function(t,e){return function(n){return ri(t,n,e)}}));function Is(t,e,n){var r=is(e),i=Yr(e,r);null!=n||Su(e)&&(i.length||!r.length)||(n=e,e=t,t=this,i=Yr(e,is(e)));var o=!(Su(n)&&"chain"in n&&!n.chain),a=Ou(t);return Ke(i,(function(n){var r=e[n];t[n]=r,a&&(t.prototype[n]=function(){var e=this.__chain__;if(o||e){var n=t(this.__wrapped__),i=n.__actions__=no(this.__actions__);return i.push({func:r,args:arguments,thisArg:t}),n.__chain__=e,n}return r.apply(t,tn([this.value()],arguments))})})),t}function Ds(){}var Rs=go(Qe),Ls=go(Ye),Bs=go(rn);function Fs(t){return Xo(t)?hn(ca(t)):function(t){return function(e){return $r(e,t)}}(t)}var zs=_o(),Ws=_o(!0);function Vs(){return[]}function Us(){return!1}var qs=vo((function(t,e){return t+e}),0),Gs=wo("ceil"),Hs=vo((function(t,e){return t/e}),1),Ks=wo("floor");var Xs,Ys=vo((function(t,e){return t*e}),1),$s=wo("round"),Zs=vo((function(t,e){return t-e}),0);return pr.after=function(t,e){if("function"!=typeof e)throw new ie(s);return t=Wu(t),function(){if(--t<1)return e.apply(this,arguments)}},pr.ary=tu,pr.assign=Hu,pr.assignIn=Ku,pr.assignInWith=Xu,pr.assignWith=Yu,pr.at=$u,pr.before=eu,pr.bind=nu,pr.bindAll=Ms,pr.bindKey=ru,pr.castArray=function(){if(!arguments.length)return[];var t=arguments[0];return gu(t)?t:[t]},pr.chain=Fa,pr.chunk=function(t,e,n){e=(n?Ko(t,e,n):e===o)?1:Gn(Wu(e),0);var i=null==t?0:t.length;if(!i||e<1)return[];for(var a=0,u=0,s=r(Bn(i/e));a<i;)s[u++]=Ni(t,a,a+=e);return s},pr.compact=function(t){for(var e=-1,n=null==t?0:t.length,r=0,i=[];++e<n;){var o=t[e];o&&(i[r++]=o)}return i},pr.concat=function(){var t=arguments.length;if(!t)return[];for(var e=r(t-1),n=arguments[0],i=t;i--;)e[i-1]=arguments[i];return tn(gu(n)?no(n):[n],qr(e,1))},pr.cond=function(t){var e=null==t?0:t.length,n=Ro();return t=e?Qe(t,(function(t){if("function"!=typeof t[1])throw new ie(s);return[n(t[0]),t[1]]})):[],Ai((function(n){for(var r=-1;++r<e;){var i=t[r];if(Ge(i[0],this,n))return Ge(i[1],this,n)}}))},pr.conforms=function(t){return function(t){var e=is(t);return function(n){return Rr(n,t,e)}}(Dr(t,h))},pr.constant=Ss,pr.countBy=Va,pr.create=function(t,e){var n=dr(t);return null==e?n:Cr(n,e)},pr.curry=function t(e,n,r){var i=Eo(e,x,o,o,o,o,o,n=r?o:n);return i.placeholder=t.placeholder,i},pr.curryRight=function t(e,n,r){var i=Eo(e,b,o,o,o,o,o,n=r?o:n);return i.placeholder=t.placeholder,i},pr.debounce=iu,pr.defaults=Zu,pr.defaultsDeep=Ju,pr.defer=ou,pr.delay=au,pr.difference=pa,pr.differenceBy=da,pr.differenceWith=ya,pr.drop=function(t,e,n){var r=null==t?0:t.length;return r?Ni(t,(e=n||e===o?1:Wu(e))<0?0:e,r):[]},pr.dropRight=function(t,e,n){var r=null==t?0:t.length;return r?Ni(t,0,(e=r-(e=n||e===o?1:Wu(e)))<0?0:e):[]},pr.dropRightWhile=function(t,e){return t&&t.length?zi(t,Ro(e,3),!0,!0):[]},pr.dropWhile=function(t,e){return t&&t.length?zi(t,Ro(e,3),!0):[]},pr.fill=function(t,e,n,r){var i=null==t?0:t.length;return i?(n&&"number"!=typeof n&&Ko(t,e,n)&&(n=0,r=i),function(t,e,n,r){var i=t.length;for((n=Wu(n))<0&&(n=-n>i?0:i+n),(r=r===o||r>i?i:Wu(r))<0&&(r+=i),r=n>r?0:Vu(r);n<r;)t[n++]=e;return t}(t,e,n,r)):[]},pr.filter=function(t,e){return(gu(t)?$e:Ur)(t,Ro(e,3))},pr.flatMap=function(t,e){return qr($a(t,e),1)},pr.flatMapDeep=function(t,e){return qr($a(t,e),j)},pr.flatMapDepth=function(t,e,n){return n=n===o?1:Wu(n),qr($a(t,e),n)},pr.flatten=ma,pr.flattenDeep=function(t){return(null==t?0:t.length)?qr(t,j):[]},pr.flattenDepth=function(t,e){return(null==t?0:t.length)?qr(t,e=e===o?1:Wu(e)):[]},pr.flip=function(t){return Eo(t,M)},pr.flow=ks,pr.flowRight=Ps,pr.fromPairs=function(t){for(var e=-1,n=null==t?0:t.length,r={};++e<n;){var i=t[e];r[i[0]]=i[1]}return r},pr.functions=function(t){return null==t?[]:Yr(t,is(t))},pr.functionsIn=function(t){return null==t?[]:Yr(t,os(t))},pr.groupBy=Ka,pr.initial=function(t){return(null==t?0:t.length)?Ni(t,0,-1):[]},pr.intersection=xa,pr.intersectionBy=ba,pr.intersectionWith=wa,pr.invert=es,pr.invertBy=ns,pr.invokeMap=Xa,pr.iteratee=Cs,pr.keyBy=Ya,pr.keys=is,pr.keysIn=os,pr.map=$a,pr.mapKeys=function(t,e){var n={};return e=Ro(e,3),Kr(t,(function(t,r,i){Tr(n,e(t,r,i),t)})),n},pr.mapValues=function(t,e){var n={};return e=Ro(e,3),Kr(t,(function(t,r,i){Tr(n,r,e(t,r,i))})),n},pr.matches=function(t){return pi(Dr(t,h))},pr.matchesProperty=function(t,e){return di(t,Dr(e,h))},pr.memoize=uu,pr.merge=as,pr.mergeWith=us,pr.method=Ts,pr.methodOf=js,pr.mixin=Is,pr.negate=su,pr.nthArg=function(t){return t=Wu(t),Ai((function(e){return vi(e,t)}))},pr.omit=ss,pr.omitBy=function(t,e){return cs(t,su(Ro(e)))},pr.once=function(t){return eu(2,t)},pr.orderBy=function(t,e,n,r){return null==t?[]:(gu(e)||(e=null==e?[]:[e]),gu(n=r?o:n)||(n=null==n?[]:[n]),gi(t,e,n))},pr.over=Rs,pr.overArgs=lu,pr.overEvery=Ls,pr.overSome=Bs,pr.partial=cu,pr.partialRight=fu,pr.partition=Za,pr.pick=ls,pr.pickBy=cs,pr.property=Fs,pr.propertyOf=function(t){return function(e){return null==t?o:$r(t,e)}},pr.pull=Oa,pr.pullAll=Ea,pr.pullAllBy=function(t,e,n){return t&&t.length&&e&&e.length?_i(t,e,Ro(n,2)):t},pr.pullAllWith=function(t,e,n){return t&&t.length&&e&&e.length?_i(t,e,o,n):t},pr.pullAt=Ma,pr.range=zs,pr.rangeRight=Ws,pr.rearg=hu,pr.reject=function(t,e){return(gu(t)?$e:Ur)(t,su(Ro(e,3)))},pr.remove=function(t,e){var n=[];if(!t||!t.length)return n;var r=-1,i=[],o=t.length;for(e=Ro(e,3);++r<o;){var a=t[r];e(a,r,t)&&(n.push(a),i.push(r))}return xi(t,i),n},pr.rest=function(t,e){if("function"!=typeof t)throw new ie(s);return Ai(t,e=e===o?e:Wu(e))},pr.reverse=Sa,pr.sampleSize=function(t,e,n){return e=(n?Ko(t,e,n):e===o)?1:Wu(e),(gu(t)?Er:Ei)(t,e)},pr.set=function(t,e,n){return null==t?t:Mi(t,e,n)},pr.setWith=function(t,e,n,r){return r="function"==typeof r?r:o,null==t?t:Mi(t,e,n,r)},pr.shuffle=function(t){return(gu(t)?Mr:Pi)(t)},pr.slice=function(t,e,n){var r=null==t?0:t.length;return r?(n&&"number"!=typeof n&&Ko(t,e,n)?(e=0,n=r):(e=null==e?0:Wu(e),n=n===o?r:Wu(n)),Ni(t,e,n)):[]},pr.sortBy=Ja,pr.sortedUniq=function(t){return t&&t.length?Ii(t):[]},pr.sortedUniqBy=function(t,e){return t&&t.length?Ii(t,Ro(e,2)):[]},pr.split=function(t,e,n){return n&&"number"!=typeof n&&Ko(t,e,n)&&(e=n=o),(n=n===o?L:n>>>0)?(t=Gu(t))&&("string"==typeof e||null!=e&&!Tu(e))&&!(e=Ri(e))&&En(t)?Xi(Tn(t),0,n):t.split(e,n):[]},pr.spread=function(t,e){if("function"!=typeof t)throw new ie(s);return e=null==e?0:Gn(Wu(e),0),Ai((function(n){var r=n[e],i=Xi(n,0,e);return r&&tn(i,r),Ge(t,this,i)}))},pr.tail=function(t){var e=null==t?0:t.length;return e?Ni(t,1,e):[]},pr.take=function(t,e,n){return t&&t.length?Ni(t,0,(e=n||e===o?1:Wu(e))<0?0:e):[]},pr.takeRight=function(t,e,n){var r=null==t?0:t.length;return r?Ni(t,(e=r-(e=n||e===o?1:Wu(e)))<0?0:e,r):[]},pr.takeRightWhile=function(t,e){return t&&t.length?zi(t,Ro(e,3),!1,!0):[]},pr.takeWhile=function(t,e){return t&&t.length?zi(t,Ro(e,3)):[]},pr.tap=function(t,e){return e(t),t},pr.throttle=function(t,e,n){var r=!0,i=!0;if("function"!=typeof t)throw new ie(s);return Su(n)&&(r="leading"in n?!!n.leading:r,i="trailing"in n?!!n.trailing:i),iu(t,e,{leading:r,maxWait:e,trailing:i})},pr.thru=za,pr.toArray=Fu,pr.toPairs=fs,pr.toPairsIn=hs,pr.toPath=function(t){return gu(t)?Qe(t,ca):Du(t)?[t]:no(la(Gu(t)))},pr.toPlainObject=qu,pr.transform=function(t,e,n){var r=gu(t),i=r||bu(t)||Ru(t);if(e=Ro(e,4),null==n){var o=t&&t.constructor;n=i?r?new o:[]:Su(t)&&Ou(o)?dr(Ce(t)):{}}return(i?Ke:Kr)(t,(function(t,r,i){return e(n,t,r,i)})),n},pr.unary=function(t){return tu(t,1)},pr.union=ka,pr.unionBy=Pa,pr.unionWith=Na,pr.uniq=function(t){return t&&t.length?Li(t):[]},pr.uniqBy=function(t,e){return t&&t.length?Li(t,Ro(e,2)):[]},pr.uniqWith=function(t,e){return e="function"==typeof e?e:o,t&&t.length?Li(t,o,e):[]},pr.unset=function(t,e){return null==t||Bi(t,e)},pr.unzip=Ca,pr.unzipWith=Ta,pr.update=function(t,e,n){return null==t?t:Fi(t,e,Gi(n))},pr.updateWith=function(t,e,n,r){return r="function"==typeof r?r:o,null==t?t:Fi(t,e,Gi(n),r)},pr.values=ps,pr.valuesIn=function(t){return null==t?[]:mn(t,os(t))},pr.without=ja,pr.words=Os,pr.wrap=function(t,e){return cu(Gi(e),t)},pr.xor=Ia,pr.xorBy=Da,pr.xorWith=Ra,pr.zip=La,pr.zipObject=function(t,e){return Ui(t||[],e||[],kr)},pr.zipObjectDeep=function(t,e){return Ui(t||[],e||[],Mi)},pr.zipWith=Ba,pr.entries=fs,pr.entriesIn=hs,pr.extend=Ku,pr.extendWith=Xu,Is(pr,pr),pr.add=qs,pr.attempt=Es,pr.camelCase=ds,pr.capitalize=ys,pr.ceil=Gs,pr.clamp=function(t,e,n){return n===o&&(n=e,e=o),n!==o&&(n=(n=Uu(n))==n?n:0),e!==o&&(e=(e=Uu(e))==e?e:0),Ir(Uu(t),e,n)},pr.clone=function(t){return Dr(t,d)},pr.cloneDeep=function(t){return Dr(t,h|d)},pr.cloneDeepWith=function(t,e){return Dr(t,h|d,e="function"==typeof e?e:o)},pr.cloneWith=function(t,e){return Dr(t,d,e="function"==typeof e?e:o)},pr.conformsTo=function(t,e){return null==e||Rr(t,e,is(e))},pr.deburr=vs,pr.defaultTo=function(t,e){return null==t||t!=t?e:t},pr.divide=Hs,pr.endsWith=function(t,e,n){t=Gu(t),e=Ri(e);var r=t.length,i=n=n===o?r:Ir(Wu(n),0,r);return(n-=e.length)>=0&&t.slice(n,i)==e},pr.eq=pu,pr.escape=function(t){return(t=Gu(t))&&Et.test(t)?t.replace(At,An):t},pr.escapeRegExp=function(t){return(t=Gu(t))&&jt.test(t)?t.replace(Tt,"\\$&"):t},pr.every=function(t,e,n){var r=gu(t)?Ye:Wr;return n&&Ko(t,e,n)&&(e=o),r(t,Ro(e,3))},pr.find=Ua,pr.findIndex=va,pr.findKey=function(t,e){return an(t,Ro(e,3),Kr)},pr.findLast=qa,pr.findLastIndex=ga,pr.findLastKey=function(t,e){return an(t,Ro(e,3),Xr)},pr.floor=Ks,pr.forEach=Ga,pr.forEachRight=Ha,pr.forIn=function(t,e){return null==t?t:Gr(t,Ro(e,3),os)},pr.forInRight=function(t,e){return null==t?t:Hr(t,Ro(e,3),os)},pr.forOwn=function(t,e){return t&&Kr(t,Ro(e,3))},pr.forOwnRight=function(t,e){return t&&Xr(t,Ro(e,3))},pr.get=Qu,pr.gt=du,pr.gte=yu,pr.has=function(t,e){return null!=t&&Uo(t,e,ti)},pr.hasIn=ts,pr.head=_a,pr.identity=Ns,pr.includes=function(t,e,n,r){t=_u(t)?t:ps(t),n=n&&!r?Wu(n):0;var i=t.length;return n<0&&(n=Gn(i+n,0)),Iu(t)?n<=i&&t.indexOf(e,n)>-1:!!i&&sn(t,e,n)>-1},pr.indexOf=function(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=null==n?0:Wu(n);return i<0&&(i=Gn(r+i,0)),sn(t,e,i)},pr.inRange=function(t,e,n){return e=zu(e),n===o?(n=e,e=0):n=zu(n),function(t,e,n){return t>=Hn(e,n)&&t<Gn(e,n)}(t=Uu(t),e,n)},pr.invoke=rs,pr.isArguments=vu,pr.isArray=gu,pr.isArrayBuffer=mu,pr.isArrayLike=_u,pr.isArrayLikeObject=xu,pr.isBoolean=function(t){return!0===t||!1===t||ku(t)&&Jr(t)==q},pr.isBuffer=bu,pr.isDate=wu,pr.isElement=function(t){return ku(t)&&1===t.nodeType&&!Cu(t)},pr.isEmpty=function(t){if(null==t)return!0;if(_u(t)&&(gu(t)||"string"==typeof t||"function"==typeof t.splice||bu(t)||Ru(t)||vu(t)))return!t.length;var e=Vo(t);if(e==$||e==nt)return!t.size;if(Zo(t))return!li(t).length;for(var n in t)if(ce.call(t,n))return!1;return!0},pr.isEqual=function(t,e){return oi(t,e)},pr.isEqualWith=function(t,e,n){var r=(n="function"==typeof n?n:o)?n(t,e):o;return r===o?oi(t,e,o,n):!!r},pr.isError=Au,pr.isFinite=function(t){return"number"==typeof t&&Vn(t)},pr.isFunction=Ou,pr.isInteger=Eu,pr.isLength=Mu,pr.isMap=Pu,pr.isMatch=function(t,e){return t===e||ai(t,e,Bo(e))},pr.isMatchWith=function(t,e,n){return n="function"==typeof n?n:o,ai(t,e,Bo(e),n)},pr.isNaN=function(t){return Nu(t)&&t!=+t},pr.isNative=function(t){if($o(t))throw new Jt(u);return ui(t)},pr.isNil=function(t){return null==t},pr.isNull=function(t){return null===t},pr.isNumber=Nu,pr.isObject=Su,pr.isObjectLike=ku,pr.isPlainObject=Cu,pr.isRegExp=Tu,pr.isSafeInteger=function(t){return Eu(t)&&t>=-I&&t<=I},pr.isSet=ju,pr.isString=Iu,pr.isSymbol=Du,pr.isTypedArray=Ru,pr.isUndefined=function(t){return t===o},pr.isWeakMap=function(t){return ku(t)&&Vo(t)==at},pr.isWeakSet=function(t){return ku(t)&&Jr(t)==ut},pr.join=function(t,e){return null==t?"":Un.call(t,e)},pr.kebabCase=gs,pr.last=Aa,pr.lastIndexOf=function(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=r;return n!==o&&(i=(i=Wu(n))<0?Gn(r+i,0):Hn(i,r-1)),e==e?function(t,e,n){for(var r=n+1;r--;)if(t[r]===e)return r;return r}(t,e,i):un(t,cn,i,!0)},pr.lowerCase=ms,pr.lowerFirst=_s,pr.lt=Lu,pr.lte=Bu,pr.max=function(t){return t&&t.length?Vr(t,Ns,Qr):o},pr.maxBy=function(t,e){return t&&t.length?Vr(t,Ro(e,2),Qr):o},pr.mean=function(t){return fn(t,Ns)},pr.meanBy=function(t,e){return fn(t,Ro(e,2))},pr.min=function(t){return t&&t.length?Vr(t,Ns,fi):o},pr.minBy=function(t,e){return t&&t.length?Vr(t,Ro(e,2),fi):o},pr.stubArray=Vs,pr.stubFalse=Us,pr.stubObject=function(){return{}},pr.stubString=function(){return""},pr.stubTrue=function(){return!0},pr.multiply=Ys,pr.nth=function(t,e){return t&&t.length?vi(t,Wu(e)):o},pr.noConflict=function(){return je._===this&&(je._=ye),this},pr.noop=Ds,pr.now=Qa,pr.pad=function(t,e,n){t=Gu(t);var r=(e=Wu(e))?Cn(t):0;if(!e||r>=e)return t;var i=(e-r)/2;return mo(Fn(i),n)+t+mo(Bn(i),n)},pr.padEnd=function(t,e,n){t=Gu(t);var r=(e=Wu(e))?Cn(t):0;return e&&r<e?t+mo(e-r,n):t},pr.padStart=function(t,e,n){t=Gu(t);var r=(e=Wu(e))?Cn(t):0;return e&&r<e?mo(e-r,n)+t:t},pr.parseInt=function(t,e,n){return n||null==e?e=0:e&&(e=+e),Xn(Gu(t).replace(Dt,""),e||0)},pr.random=function(t,e,n){if(n&&"boolean"!=typeof n&&Ko(t,e,n)&&(e=n=o),n===o&&("boolean"==typeof e?(n=e,e=o):"boolean"==typeof t&&(n=t,t=o)),t===o&&e===o?(t=0,e=1):(t=zu(t),e===o?(e=t,t=0):e=zu(e)),t>e){var r=t;t=e,e=r}if(n||t%1||e%1){var i=Yn();return Hn(t+i*(e-t+Pe("1e-"+((i+"").length-1))),e)}return bi(t,e)},pr.reduce=function(t,e,n){var r=gu(t)?en:dn,i=arguments.length<3;return r(t,Ro(e,4),n,i,Fr)},pr.reduceRight=function(t,e,n){var r=gu(t)?nn:dn,i=arguments.length<3;return r(t,Ro(e,4),n,i,zr)},pr.repeat=function(t,e,n){return e=(n?Ko(t,e,n):e===o)?1:Wu(e),wi(Gu(t),e)},pr.replace=function(){var t=arguments,e=Gu(t[0]);return t.length<3?e:e.replace(t[1],t[2])},pr.result=function(t,e,n){var r=-1,i=(e=Hi(e,t)).length;for(i||(i=1,t=o);++r<i;){var a=null==t?o:t[ca(e[r])];a===o&&(r=i,a=n),t=Ou(a)?a.call(t):a}return t},pr.round=$s,pr.runInContext=t,pr.sample=function(t){return(gu(t)?Or:Oi)(t)},pr.size=function(t){if(null==t)return 0;if(_u(t))return Iu(t)?Cn(t):t.length;var e=Vo(t);return e==$||e==nt?t.size:li(t).length},pr.snakeCase=xs,pr.some=function(t,e,n){var r=gu(t)?rn:Ci;return n&&Ko(t,e,n)&&(e=o),r(t,Ro(e,3))},pr.sortedIndex=function(t,e){return Ti(t,e)},pr.sortedIndexBy=function(t,e,n){return ji(t,e,Ro(n,2))},pr.sortedIndexOf=function(t,e){var n=null==t?0:t.length;if(n){var r=Ti(t,e);if(r<n&&pu(t[r],e))return r}return-1},pr.sortedLastIndex=function(t,e){return Ti(t,e,!0)},pr.sortedLastIndexBy=function(t,e,n){return ji(t,e,Ro(n,2),!0)},pr.sortedLastIndexOf=function(t,e){if(null==t?0:t.length){var n=Ti(t,e,!0)-1;if(pu(t[n],e))return n}return-1},pr.startCase=bs,pr.startsWith=function(t,e,n){return t=Gu(t),n=null==n?0:Ir(Wu(n),0,t.length),e=Ri(e),t.slice(n,n+e.length)==e},pr.subtract=Zs,pr.sum=function(t){return t&&t.length?yn(t,Ns):0},pr.sumBy=function(t,e){return t&&t.length?yn(t,Ro(e,2)):0},pr.template=function(t,e,n){var r=pr.templateSettings;n&&Ko(t,e,n)&&(e=o),t=Gu(t),e=Xu({},e,r,Mo);var i,a,u=Xu({},e.imports,r.imports,Mo),s=is(u),l=mn(u,s),c=0,f=e.interpolate||$t,h="__p += '",p=ne((e.escape||$t).source+"|"+f.source+"|"+(f===kt?Vt:$t).source+"|"+(e.evaluate||$t).source+"|$","g"),d="//# sourceURL="+(ce.call(e,"sourceURL")?(e.sourceURL+"").replace(/[\r\n]/g," "):"lodash.templateSources["+ ++Ee+"]")+"\n";t.replace(p,(function(e,n,r,o,u,s){return r||(r=o),h+=t.slice(c,s).replace(Zt,On),n&&(i=!0,h+="' +\n__e("+n+") +\n'"),u&&(a=!0,h+="';\n"+u+";\n__p += '"),r&&(h+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),c=s+e.length,e})),h+="';\n";var y=ce.call(e,"variable")&&e.variable;y||(h="with (obj) {\n"+h+"\n}\n"),h=(a?h.replace(_t,""):h).replace(xt,"$1").replace(bt,"$1;"),h="function("+(y||"obj")+") {\n"+(y?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(i?", __e = _.escape":"")+(a?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+h+"return __p\n}";var v=Es((function(){return Qt(s,d+"return "+h).apply(o,l)}));if(v.source=h,Au(v))throw v;return v},pr.times=function(t,e){if((t=Wu(t))<1||t>I)return[];var n=L,r=Hn(t,L);e=Ro(e),t-=L;for(var i=vn(r,e);++n<t;)e(n);return i},pr.toFinite=zu,pr.toInteger=Wu,pr.toLength=Vu,pr.toLower=function(t){return Gu(t).toLowerCase()},pr.toNumber=Uu,pr.toSafeInteger=function(t){return t?Ir(Wu(t),-I,I):0===t?t:0},pr.toString=Gu,pr.toUpper=function(t){return Gu(t).toUpperCase()},pr.trim=function(t,e,n){if((t=Gu(t))&&(n||e===o))return t.replace(It,"");if(!t||!(e=Ri(e)))return t;var r=Tn(t),i=Tn(e);return Xi(r,xn(r,i),bn(r,i)+1).join("")},pr.trimEnd=function(t,e,n){if((t=Gu(t))&&(n||e===o))return t.replace(Rt,"");if(!t||!(e=Ri(e)))return t;var r=Tn(t);return Xi(r,0,bn(r,Tn(e))+1).join("")},pr.trimStart=function(t,e,n){if((t=Gu(t))&&(n||e===o))return t.replace(Dt,"");if(!t||!(e=Ri(e)))return t;var r=Tn(t);return Xi(r,xn(r,Tn(e))).join("")},pr.truncate=function(t,e){var n=S,r=k;if(Su(e)){var i="separator"in e?e.separator:i;n="length"in e?Wu(e.length):n,r="omission"in e?Ri(e.omission):r}var a=(t=Gu(t)).length;if(En(t)){var u=Tn(t);a=u.length}if(n>=a)return t;var s=n-Cn(r);if(s<1)return r;var l=u?Xi(u,0,s).join(""):t.slice(0,s);if(i===o)return l+r;if(u&&(s+=l.length-s),Tu(i)){if(t.slice(s).search(i)){var c,f=l;for(i.global||(i=ne(i.source,Gu(Ut.exec(i))+"g")),i.lastIndex=0;c=i.exec(f);)var h=c.index;l=l.slice(0,h===o?s:h)}}else if(t.indexOf(Ri(i),s)!=s){var p=l.lastIndexOf(i);p>-1&&(l=l.slice(0,p))}return l+r},pr.unescape=function(t){return(t=Gu(t))&&Ot.test(t)?t.replace(wt,jn):t},pr.uniqueId=function(t){var e=++fe;return Gu(t)+e},pr.upperCase=ws,pr.upperFirst=As,pr.each=Ga,pr.eachRight=Ha,pr.first=_a,Is(pr,(Xs={},Kr(pr,(function(t,e){ce.call(pr.prototype,e)||(Xs[e]=t)})),Xs),{chain:!1}),pr.VERSION="4.17.15",Ke(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(t){pr[t].placeholder=pr})),Ke(["drop","take"],(function(t,e){gr.prototype[t]=function(n){n=n===o?1:Gn(Wu(n),0);var r=this.__filtered__&&!e?new gr(this):this.clone();return r.__filtered__?r.__takeCount__=Hn(n,r.__takeCount__):r.__views__.push({size:Hn(n,L),type:t+(r.__dir__<0?"Right":"")}),r},gr.prototype[t+"Right"]=function(e){return this.reverse()[t](e).reverse()}})),Ke(["filter","map","takeWhile"],(function(t,e){var n=e+1,r=n==C||3==n;gr.prototype[t]=function(t){var e=this.clone();return e.__iteratees__.push({iteratee:Ro(t,3),type:n}),e.__filtered__=e.__filtered__||r,e}})),Ke(["head","last"],(function(t,e){var n="take"+(e?"Right":"");gr.prototype[t]=function(){return this[n](1).value()[0]}})),Ke(["initial","tail"],(function(t,e){var n="drop"+(e?"":"Right");gr.prototype[t]=function(){return this.__filtered__?new gr(this):this[n](1)}})),gr.prototype.compact=function(){return this.filter(Ns)},gr.prototype.find=function(t){return this.filter(t).head()},gr.prototype.findLast=function(t){return this.reverse().find(t)},gr.prototype.invokeMap=Ai((function(t,e){return"function"==typeof t?new gr(this):this.map((function(n){return ri(n,t,e)}))})),gr.prototype.reject=function(t){return this.filter(su(Ro(t)))},gr.prototype.slice=function(t,e){t=Wu(t);var n=this;return n.__filtered__&&(t>0||e<0)?new gr(n):(t<0?n=n.takeRight(-t):t&&(n=n.drop(t)),e!==o&&(n=(e=Wu(e))<0?n.dropRight(-e):n.take(e-t)),n)},gr.prototype.takeRightWhile=function(t){return this.reverse().takeWhile(t).reverse()},gr.prototype.toArray=function(){return this.take(L)},Kr(gr.prototype,(function(t,e){var n=/^(?:filter|find|map|reject)|While$/.test(e),r=/^(?:head|last)$/.test(e),i=pr[r?"take"+("last"==e?"Right":""):e],a=r||/^find/.test(e);i&&(pr.prototype[e]=function(){var e=this.__wrapped__,u=r?[1]:arguments,s=e instanceof gr,l=u[0],c=s||gu(e),f=function(t){var e=i.apply(pr,tn([t],u));return r&&h?e[0]:e};c&&n&&"function"==typeof l&&1!=l.length&&(s=c=!1);var h=this.__chain__,p=!!this.__actions__.length,d=a&&!h,y=s&&!p;if(!a&&c){e=y?e:new gr(this);var v=t.apply(e,u);return v.__actions__.push({func:za,args:[f],thisArg:o}),new vr(v,h)}return d&&y?t.apply(this,u):(v=this.thru(f),d?r?v.value()[0]:v.value():v)})})),Ke(["pop","push","shift","sort","splice","unshift"],(function(t){var e=oe[t],n=/^(?:push|sort|unshift)$/.test(t)?"tap":"thru",r=/^(?:pop|shift)$/.test(t);pr.prototype[t]=function(){var t=arguments;if(r&&!this.__chain__){var i=this.value();return e.apply(gu(i)?i:[],t)}return this[n]((function(n){return e.apply(gu(n)?n:[],t)}))}})),Kr(gr.prototype,(function(t,e){var n=pr[e];if(n){var r=n.name+"";ce.call(ir,r)||(ir[r]=[]),ir[r].push({name:e,func:n})}})),ir[po(o,m).name]=[{name:"wrapper",func:o}],gr.prototype.clone=function(){var t=new gr(this.__wrapped__);return t.__actions__=no(this.__actions__),t.__dir__=this.__dir__,t.__filtered__=this.__filtered__,t.__iteratees__=no(this.__iteratees__),t.__takeCount__=this.__takeCount__,t.__views__=no(this.__views__),t},gr.prototype.reverse=function(){if(this.__filtered__){var t=new gr(this);t.__dir__=-1,t.__filtered__=!0}else(t=this.clone()).__dir__*=-1;return t},gr.prototype.value=function(){var t=this.__wrapped__.value(),e=this.__dir__,n=gu(t),r=e<0,i=n?t.length:0,o=function(t,e,n){var r=-1,i=n.length;for(;++r<i;){var o=n[r],a=o.size;switch(o.type){case"drop":t+=a;break;case"dropRight":e-=a;break;case"take":e=Hn(e,t+a);break;case"takeRight":t=Gn(t,e-a)}}return{start:t,end:e}}(0,i,this.__views__),a=o.start,u=o.end,s=u-a,l=r?u:a-1,c=this.__iteratees__,f=c.length,h=0,p=Hn(s,this.__takeCount__);if(!n||!r&&i==s&&p==s)return Wi(t,this.__actions__);var d=[];t:for(;s--&&h<p;){for(var y=-1,v=t[l+=e];++y<f;){var g=c[y],m=g.iteratee,_=g.type,x=m(v);if(_==T)v=x;else if(!x){if(_==C)continue t;break t}}d[h++]=v}return d},pr.prototype.at=Wa,pr.prototype.chain=function(){return Fa(this)},pr.prototype.commit=function(){return new vr(this.value(),this.__chain__)},pr.prototype.next=function(){this.__values__===o&&(this.__values__=Fu(this.value()));var t=this.__index__>=this.__values__.length;return{done:t,value:t?o:this.__values__[this.__index__++]}},pr.prototype.plant=function(t){for(var e,n=this;n instanceof yr;){var r=ha(n);r.__index__=0,r.__values__=o,e?i.__wrapped__=r:e=r;var i=r;n=n.__wrapped__}return i.__wrapped__=t,e},pr.prototype.reverse=function(){var t=this.__wrapped__;if(t instanceof gr){var e=t;return this.__actions__.length&&(e=new gr(this)),(e=e.reverse()).__actions__.push({func:za,args:[Sa],thisArg:o}),new vr(e,this.__chain__)}return this.thru(Sa)},pr.prototype.toJSON=pr.prototype.valueOf=pr.prototype.value=function(){return Wi(this.__wrapped__,this.__actions__)},pr.prototype.first=pr.prototype.head,Be&&(pr.prototype[Be]=function(){return this}),pr}();je._=In,(i=function(){return In}.call(e,n,e,r))===o||(r.exports=i)}).call(this)}).call(this,n(28),n(74)(t))},function(t,e,n){var r;
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/!function(){"use strict";var n={}.hasOwnProperty;function i(){for(var t=[],e=0;e<arguments.length;e++){var r=arguments[e];if(r){var o=typeof r;if("string"===o||"number"===o)t.push(r);else if(Array.isArray(r)&&r.length){var a=i.apply(null,r);a&&t.push(a)}else if("object"===o)for(var u in r)n.call(r,u)&&r[u]&&t.push(u)}}return t.join(" ")}t.exports?(i.default=i,t.exports=i):void 0===(r=function(){return i}.apply(e,[]))||(t.exports=r)}()},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var i=r(n(3));e.mathSign=function(t){return 0===t?0:t>0?1:-1},e.isPercent=function(t){return i.default.isString(t)&&t.indexOf("%")===t.length-1},e.isNumber=function(t){return i.default.isNumber(t)&&!i.default.isNaN(t)},e.isNumOrStr=function(t){return e.isNumber(t)||i.default.isString(t)};var o=0;e.uniqueId=function(t){return""+(t||"")+ ++o},e.getPercentValue=function(t,n,r,o){if(void 0===r&&(r=0),void 0===o&&(o=!1),!e.isNumber(t)&&!i.default.isString(t))return r;var a;if(e.isPercent(t)){var u=t.indexOf("%");a=n*parseFloat(t.slice(0,u))/100}else a=+t;return i.default.isNaN(a)&&(a=r),o&&a>n&&(a=n),a},e.getAnyElementOfObject=function(t){if(!t)return null;var e=Object.keys(t);return e&&e.length?t[e[0]]:null},e.hasDuplicate=function(t){if(!i.default.isArray(t))return!1;for(var e=t.length,n={},r=0;r<e;r++){if(n[t[r]])return!0;n[t[r]]=!0}return!1},e.interpolateNumber=function(t,n){return e.isNumber(t)&&e.isNumber(n)?function(e){return t+e*(n-t)}:function(){return n}},e.findEntryInArray=function(t,e,n){return t&&t.length?t.find((function(t){return t&&("function"==typeof e?e(t):i.default.get(t,e))===n})):null},e.getLinearRegression=function(t){if(!t||!t.length)return null;for(var e=t.length,n=0,r=0,i=0,o=0,a=1/0,u=-1/0,s=0;s<e;s++)n+=t[s].cx,r+=t[s].cy,i+=t[s].cx*t[s].cy,o+=t[s].cx*t[s].cx,a=Math.min(a,t[s].cx),u=Math.max(u,t[s].cx);var l=e*o!=n*n?(e*i-n*r)/(e*o-n*n):0;return{xmin:a,xmax:u,a:l,b:(r-l*n)/e}}},function(t,e,n){var r=n(10),i=n(62).f,o=n(40),a=n(98),u=n(67),s=n(162),l=n(105);t.exports=function(t,e){var n,c,f,h,p,d=t.target,y=t.global,v=t.stat;if(n=y?r:v?r[d]||u(d,{}):(r[d]||{}).prototype)for(c in e){if(h=e[c],f=t.noTargetGet?(p=i(n,c))&&p.value:n[c],!l(y?c:d+(v?".":"#")+c,t.forced)&&void 0!==f){if(typeof h==typeof f)continue;s(h,f)}(t.sham||f&&f.sham)&&o(h,"sham",!0),a(n,c,h,t)}}},function(t,e,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},i=this&&this.__rest||function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n},o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var a=o(n(0)),u=o(n(4)),s=n(2);e.default=function(t){var e=t.children,n=t.className,o=i(t,["children","className"]),l=u.default("recharts-layer",n);return a.default.createElement("g",r({className:l},s.filterProps(o,!0)),e)}},function(t,e,n){"use strict";var r=this&&this.__rest||function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n},i=this&&this.__spreadArrays||function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),i=0;for(e=0;e<n;e++)for(var o=arguments[e],a=0,u=o.length;a<u;a++,i++)r[i]=o[a];return r},o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e},a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var u=o(n(0)),s=a(n(3)),l=n(5),c=n(51),f={click:"onClick",mousedown:"onMouseDown",mouseup:"onMouseUp",mouseover:"onMouseOver",mousemove:"onMouseMove",mouseout:"onMouseOut",mouseenter:"onMouseEnter",mouseleave:"onMouseLeave",touchcancel:"onTouchCancel",touchend:"onTouchEnd",touchmove:"onTouchMove",touchstart:"onTouchStart"};e.SCALE_TYPES=["auto","linear","pow","sqrt","log","identity","time","band","point","ordinal","quantile","quantize","utc","sequential","threshold"],e.LEGEND_TYPES=["plainline","line","square","rect","circle","cross","diamond","star","triangle","wye","none"],e.TOOLTIP_TYPES=["none"],e.getDisplayName=function(t){return"string"==typeof t?t:t?t.displayName||t.name||"Component":""},e.findAllByType=function(t,n){var r=[],i=[];return i=s.default.isArray(n)?n.map((function(t){return e.getDisplayName(t)})):[e.getDisplayName(n)],u.default.Children.forEach(t,(function(t){var e=s.default.get(t,"type.displayName")||s.default.get(t,"type.name");-1!==i.indexOf(e)&&r.push(t)})),r},e.findChildByType=function(t,n){var r=e.findAllByType(t,n);return r&&r[0]},e.withoutType=function(t,n){var r,i=[];return r=s.default.isArray(n)?n.map((function(t){return e.getDisplayName(t)})):[e.getDisplayName(n)],u.default.Children.forEach(t,(function(t){var e=s.default.get(t,"type.displayName");e&&-1!==r.indexOf(e)||i.push(t)})),i},e.validateWidthHeight=function(t){if(!t||!t.props)return!1;var e=t.props,n=e.width,r=e.height;return!(!l.isNumber(n)||n<=0||!l.isNumber(r)||r<=0)},e.isSsr=function(){return!("undefined"!=typeof window&&window.document&&window.document.createElement&&window.setTimeout)};var h=["a","altGlyph","altGlyphDef","altGlyphItem","animate","animateColor","animateMotion","animateTransform","circle","clipPath","color-profile","cursor","defs","desc","ellipse","feBlend","feColormatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence","filter","font","font-face","font-face-format","font-face-name","font-face-url","foreignObject","g","glyph","glyphRef","hkern","image","line","lineGradient","marker","mask","metadata","missing-glyph","mpath","path","pattern","polygon","polyline","radialGradient","rect","script","set","stop","style","svg","switch","symbol","text","textPath","title","tref","tspan","use","view","vkern"];e.filterSvgElements=function(t){var e=[];return u.default.Children.forEach(t,(function(t){t&&t.type&&s.default.isString(t.type)&&h.indexOf(t.type)>=0&&e.push(t)})),e},e.isChildrenEqual=function(t,n){if(t===n)return!0;if(u.Children.count(t)!==u.Children.count(n))return!1;var r=u.Children.count(t);if(0===r)return!0;if(1===r)return e.isSingleChildEqual(s.default.isArray(t)?t[0]:t,s.default.isArray(n)?n[0]:n);for(var i=0;i<r;i++){var o=t[i],a=n[i];if(s.default.isArray(o)||s.default.isArray(a)){if(!e.isChildrenEqual(o,a))return!1}else if(!e.isSingleChildEqual(o,a))return!1}return!0},e.isSingleChildEqual=function(t,n){if(s.default.isNil(t)&&s.default.isNil(n))return!0;if(!s.default.isNil(t)&&!s.default.isNil(n)){var i=t.props||{},o=i.children,a=r(i,["children"]),u=n.props||{},l=u.children,f=r(u,["children"]);return o&&l?c.shallowEqual(a,f)&&e.isChildrenEqual(o,l):!o&&!l&&c.shallowEqual(a,f)}return!1},e.renderByOrder=function(t,n){var r=[],o={};return u.Children.forEach(t,(function(t,a){if(t&&function(t){return t&&t.type&&s.default.isString(t.type)&&h.indexOf(t.type)>=0}(t))r.push(t);else if(t&&n[e.getDisplayName(t.type)]){var u=e.getDisplayName(t.type),l=n[u],c=l.handler,f=l.once;if(f&&!o[u]||!f){var p=c(t,u,a);s.default.isArray(p)?r=i([r],p):r.push(p),o[u]=!0}}})),r},e.getReactEventByType=function(t){var e=t&&t.type;return e&&f[e]?f[e]:null},e.parseChildIndex=function(t,e){var n=-1;return u.Children.forEach(e,(function(e,r){e===t&&(n=r)})),n}},function(t,e,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},i=this&&this.__spreadArrays||function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),i=0;for(e=0;e<n;e++)for(var o=arguments[e],a=0,u=o.length;a<u;a++,i++)r[i]=o[a];return r},o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}},a=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e};Object.defineProperty(e,"__esModule",{value:!0});var u=o(n(3)),s=n(332),l=a(n(146)),c=n(92),f=n(5),h=o(n(75)),p=n(8);function d(t,e,n){return u.default.isNil(t)||u.default.isNil(e)?n:f.isNumOrStr(e)?u.default.get(t,e,n):u.default.isFunction(e)?e(t):n}function y(t,e,n,r){var i=u.default.flatMap(t,(function(t){return d(t,e)}));if("number"===n){var o=i.filter((function(t){return f.isNumber(t)||parseFloat(t)}));return o.length?[u.default.min(o),u.default.max(o)]:[1/0,-1/0]}return(r?i.filter((function(t){return!u.default.isNil(t)})):i).map((function(t){return f.isNumOrStr(t)?t:""}))}e.getValueByDataKey=d,e.getDomainOfDataByKey=y,e.calculateActiveTickIndex=function(t,e,n,r){var i=-1,o=e.length;if(o>1){if(r&&"angleAxis"===r.axisType&&Math.abs(Math.abs(r.range[1]-r.range[0])-360)<=1e-6)for(var a=r.range,u=0;u<o;u++){var s=u>0?n[u-1].coordinate:n[o-1].coordinate,l=n[u].coordinate,c=u>=o-1?n[0].coordinate:n[u+1].coordinate,h=void 0;if(f.mathSign(l-s)!==f.mathSign(c-l)){var p=[];if(f.mathSign(c-l)===f.mathSign(a[1]-a[0])){h=c;var d=l+a[1]-a[0];p[0]=Math.min(d,(d+s)/2),p[1]=Math.max(d,(d+s)/2)}else{h=s;var y=c+a[1]-a[0];p[0]=Math.min(l,(y+l)/2),p[1]=Math.max(l,(y+l)/2)}var v=[Math.min(l,(h+l)/2),Math.max(l,(h+l)/2)];if(t>v[0]&&t<=v[1]||t>=p[0]&&t<=p[1]){i=n[u].index;break}}else{var g=Math.min(s,c),m=Math.max(s,c);if(t>(g+l)/2&&t<=(m+l)/2){i=n[u].index;break}}}else for(u=0;u<o;u++)if(0===u&&t<=(e[u].coordinate+e[u+1].coordinate)/2||u>0&&u<o-1&&t>(e[u].coordinate+e[u-1].coordinate)/2&&t<=(e[u].coordinate+e[u+1].coordinate)/2||u===o-1&&t>(e[u].coordinate+e[u-1].coordinate)/2){i=e[u].index;break}}else i=0;return i},e.getMainColorOfGraphicItem=function(t){var e,n=t.type.displayName,r=t.props,i=r.stroke,o=r.fill;switch(n){case"Line":e=i;break;case"Area":case"Radar":e=i&&"none"!==i?i:o;break;default:e=o}return e},e.getLegendProps=function(t){var n,i=t.children,o=t.formatedGraphicalItems,a=t.legendWidth,u=t.legendContent,s=p.findChildByType(i,h.default.displayName);return s?(n=s.props&&s.props.payload?s.props&&s.props.payload:"children"===u?(o||[]).reduce((function(t,e){var n=e.item,r=e.props,i=r.sectors||r.data||[];return t.concat(i.map((function(t){return{type:s.props.iconType||n.props.legendType,value:t.name,color:t.fill,payload:t}})))}),[]):(o||[]).map((function(t){var n=t.item,r=n.props,i=r.dataKey,o=r.name,a=r.legendType;return{inactive:r.hide,dataKey:i,type:s.props.iconType||a||"square",color:e.getMainColorOfGraphicItem(n),value:o||i,payload:n.props}})),r(r(r({},s.props),h.default.getWithHeight(s,a)),{payload:n,item:s})):null},e.getBarSizeList=function(t){var e=t.barSize,n=t.stackGroups,r=void 0===n?{}:n;if(!r)return{};for(var i={},o=Object.keys(r),a=0,s=o.length;a<s;a++)for(var l=r[o[a]].stackGroups,c=Object.keys(l),f=0,h=c.length;f<h;f++){var d=l[c[f]],y=d.items,v=d.cateAxisId,g=y.filter((function(t){return p.getDisplayName(t.type).indexOf("Bar")>=0}));if(g&&g.length){var m=g[0].props.barSize,_=g[0].props[v];i[_]||(i[_]=[]),i[_].push({item:g[0],stackList:g.slice(1),barSize:u.default.isNil(m)?e:m})}}return i},e.getBarPosition=function(t){var e=t.barGap,n=t.barCategoryGap,r=t.bandSize,o=t.sizeList,a=void 0===o?[]:o,u=t.maxBarSize,s=a.length;if(s<1)return null;var l,c=f.getPercentValue(e,r,0,!0);if(a[0].barSize===+a[0].barSize){var h=!1,p=r/s,d=a.reduce((function(t,e){return t+e.barSize||0}),0);(d+=(s-1)*c)>=r&&(d-=(s-1)*c,c=0),d>=r&&p>0&&(h=!0,d=s*(p*=.9));var y={offset:((r-d)/2>>0)-c,size:0};l=a.reduce((function(t,e){var n=i(t,[{item:e.item,position:{offset:y.offset+y.size+c,size:h?p:e.barSize}}]);return y=n[n.length-1].position,e.stackList&&e.stackList.length&&e.stackList.forEach((function(t){n.push({item:t,position:y})})),n}),[])}else{var v=f.getPercentValue(n,r,0,!0);r-2*v-(s-1)*c<=0&&(c=0);var g=(r-2*v-(s-1)*c)/s;g>1&&(g>>=0);var m=u===+u?Math.min(g,u):g;l=a.reduce((function(t,e,n){var r=i(t,[{item:e.item,position:{offset:v+(g+c)*n+(g-m)/2,size:m}}]);return e.stackList&&e.stackList.length&&e.stackList.forEach((function(t){r.push({item:t,position:r[r.length-1].position})})),r}),[])}return l},e.appendOffsetOfLegend=function(t,n,i,o){var a,u,s=i.children,l=i.width,c=i.margin,h=l-(c.left||0)-(c.right||0),p=e.getLegendProps({children:s,legendWidth:h}),d=t;if(p){var y=o||{},v=p.align,g=p.verticalAlign,m=p.layout;("vertical"===m||"horizontal"===m&&"center"===g)&&f.isNumber(t[v])&&(d=r(r({},t),((a={})[v]=d[v]+(y.width||0),a))),("horizontal"===m||"vertical"===m&&"center"===v)&&f.isNumber(t[g])&&(d=r(r({},t),((u={})[g]=d[g]+(y.height||0),u)))}return d},e.getDomainOfErrorBars=function(t,e,n,r){var i=e.props.children,o=p.findAllByType(i,"ErrorBar").filter((function(t){var e=t.props.direction;return!(!u.default.isNil(e)&&!u.default.isNil(r))||r.indexOf(e)>=0}));if(o&&o.length){var a=o.map((function(t){return t.props.dataKey}));return t.reduce((function(t,e){var r=d(e,n,0),i=u.default.isArray(r)?[u.default.min(r),u.default.max(r)]:[r,r],o=a.reduce((function(t,n){var r=d(e,n,0),o=i[0]-Math.abs(u.default.isArray(r)?r[0]:r),a=i[1]+Math.abs(u.default.isArray(r)?r[1]:r);return[Math.min(o,t[0]),Math.max(a,t[1])]}),[1/0,-1/0]);return[Math.min(o[0],t[0]),Math.max(o[1],t[1])]}),[1/0,-1/0])}return null},e.parseErrorBarsOfAxis=function(t,n,r,i){var o=n.map((function(n){return e.getDomainOfErrorBars(t,n,r,i)})).filter((function(t){return!u.default.isNil(t)}));return o&&o.length?o.reduce((function(t,e){return[Math.min(t[0],e[0]),Math.max(t[1],e[1])]}),[1/0,-1/0]):null},e.getDomainOfItemsWithSameAxis=function(t,n,r,i){var o=n.map((function(n){var o=n.props.dataKey;return"number"===r&&o&&e.getDomainOfErrorBars(t,n,o)||y(t,o,r,i)}));if("number"===r)return o.reduce((function(t,e){return[Math.min(t[0],e[0]),Math.max(t[1],e[1])]}),[1/0,-1/0]);var a={};return o.reduce((function(t,e){for(var n=0,r=e.length;n<r;n++)a[e[n]]||(a[e[n]]=!0,t.push(e[n]));return t}),[])},e.isCategorialAxis=function(t,e){return"horizontal"===t&&"xAxis"===e||"vertical"===t&&"yAxis"===e||"centric"===t&&"angleAxis"===e||"radial"===t&&"radiusAxis"===e},e.getCoordinatesOfGrid=function(t,e,n){var r,i,o=t.map((function(t){return t.coordinate===e&&(r=!0),t.coordinate===n&&(i=!0),t.coordinate}));return r||o.push(e),i||o.push(n),o},e.getTicksOfAxis=function(t,e,n){if(!t)return null;var r=t.scale,i=t.duplicateDomain,o=t.type,a=t.range,u=(e||n)&&"category"===o&&r.bandwidth?r.bandwidth()/2:0;return u="angleAxis"===t.axisType?2*f.mathSign(a[0]-a[1])*u:u,e&&(t.ticks||t.niceTicks)?(t.ticks||t.niceTicks).map((function(t){var e=i?i.indexOf(t):t;return{coordinate:r(e)+u,value:t,offset:u}})):t.isCategorial&&t.categoricalDomain?t.categoricalDomain.map((function(t,e){return{coordinate:r(t)+u,value:t,index:e,offset:u}})):r.ticks&&!n?r.ticks(t.tickCount).map((function(t){return{coordinate:r(t)+u,value:t,offset:u}})):r.domain().map((function(t,e){return{coordinate:r(t)+u,value:i?i[t]:t,index:e,offset:u}}))},e.combineEventHandlers=function(t,e,n){var r;return u.default.isFunction(n)?r=n:u.default.isFunction(e)&&(r=e),u.default.isFunction(t)||r?function(e,n,i,o){u.default.isFunction(t)&&t(e,n,i,o),u.default.isFunction(r)&&r(e,n,i,o)}:null},e.parseScale=function(t,e){var n=t.scale,r=t.type,i=t.layout,o=t.axisType;if("auto"===n)return"radial"===i&&"radiusAxis"===o?{scale:l.scaleBand(),realScaleType:"band"}:"radial"===i&&"angleAxis"===o?{scale:l.scaleLinear(),realScaleType:"linear"}:"category"===r&&e&&(e.indexOf("LineChart")>=0||e.indexOf("AreaChart")>=0||e.indexOf("ComposedChart")>=0)?{scale:l.scalePoint(),realScaleType:"point"}:"category"===r?{scale:l.scaleBand(),realScaleType:"band"}:{scale:l.scaleLinear(),realScaleType:"linear"};if(u.default.isString(n)){var a="scale"+n.slice(0,1).toUpperCase()+n.slice(1);return{scale:(l[a]||l.scalePoint)(),realScaleType:l[a]?a:"point"}}return u.default.isFunction(n)?{scale:n}:{scale:l.scalePoint(),realScaleType:"point"}};e.checkDomainOfScale=function(t){var e=t.domain();if(e&&!(e.length<=2)){var n=e.length,r=t.range(),i=Math.min(r[0],r[1])-1e-4,o=Math.max(r[0],r[1])+1e-4,a=t(e[0]),u=t(e[n-1]);(a<i||a>o||u<i||u>o)&&t.domain([e[0],e[n-1]])}},e.findPositionOfBar=function(t,e){if(!t)return null;for(var n=0,r=t.length;n<r;n++)if(t[n].item===e)return t[n].position;return null},e.truncateByDomain=function(t,e){if(!e||2!==e.length||!f.isNumber(e[0])||!f.isNumber(e[1]))return t;var n=Math.min(e[0],e[1]),r=Math.max(e[0],e[1]),i=[t[0],t[1]];return(!f.isNumber(t[0])||t[0]<n)&&(i[0]=n),(!f.isNumber(t[1])||t[1]>r)&&(i[1]=r),i[0]>r&&(i[0]=r),i[1]<n&&(i[1]=n),i},e.offsetSign=function(t){var e=t.length;if(!(e<=0))for(var n=0,r=t[0].length;n<r;++n)for(var i=0,o=0,a=0;a<e;++a){var s=u.default.isNaN(t[a][n][1])?t[a][n][0]:t[a][n][1];s>=0?(t[a][n][0]=i,t[a][n][1]=i+s,i=t[a][n][1]):(t[a][n][0]=o,t[a][n][1]=o+s,o=t[a][n][1])}};var v={sign:e.offsetSign,expand:c.stackOffsetExpand,none:c.stackOffsetNone,silhouette:c.stackOffsetSilhouette,wiggle:c.stackOffsetWiggle};e.getStackedData=function(t,e,n){var r=e.map((function(t){return t.props.dataKey}));return c.stack().keys(r).value((function(t,e){return Math.max(+d(t,e,0),0)})).order(c.stackOrderNone).offset(v[n])(t)},e.getStackGroupsByAxisId=function(t,n,i,o,a,u){if(!t)return null;var s=(u?n.reverse():n).reduce((function(t,e){var n,a=e.props,u=a.stackId;if(a.hide)return t;var s=e.props[i],l=t[s]||{hasStack:!1,stackGroups:{}};if(f.isNumOrStr(u)){var c=l.stackGroups[u]||{numericAxisId:i,cateAxisId:o,items:[]};c.items.push(e),l.hasStack=!0,l.stackGroups[u]=c}else l.stackGroups[f.uniqueId("_stackId_")]={numericAxisId:i,cateAxisId:o,items:[e]};return r(r({},t),((n={})[s]=l,n))}),{});return Object.keys(s).reduce((function(n,u){var l,c=s[u];return c.hasStack&&(c.stackGroups=Object.keys(c.stackGroups).reduce((function(n,u){var s,l=c.stackGroups[u];return r(r({},n),((s={})[u]={numericAxisId:i,cateAxisId:o,items:l.items,stackedData:e.getStackedData(t,l.items,a)},s))}),{})),r(r({},n),((l={})[u]=c,l))}),{})},e.calculateDomainOfTicks=function(t,e){return"number"===e?[u.default.min(t),u.default.max(t)]:t},e.getTicksOfScale=function(t,n){var r=n.realScaleType,i=n.type,o=n.tickCount,a=n.originalDomain,u=n.allowDecimals,l=r||n.scale;if("auto"!==l&&"linear"!==l)return null;if(o&&"number"===i&&a&&("auto"===a[0]||"auto"===a[1])){if(!(f=t.domain()).length)return null;var c=s.getNiceTickValues(f,o,u);return t.domain(e.calculateDomainOfTicks(c,i)),{niceTicks:c}}if(o&&"number"===i){var f=t.domain();return{niceTicks:c=s.getTickValuesFixedDomain(f,o,u)}}return null},e.getCateCoordinateOfLine=function(t){var e=t.axis,n=t.ticks,r=t.bandSize,i=t.entry,o=t.index,a=t.dataKey;if("category"===e.type){if(!e.allowDuplicatedCategory&&e.dataKey&&!u.default.isNil(i[e.dataKey])){var s=f.findEntryInArray(n,"value",i[e.dataKey]);if(s)return s.coordinate+r/2}return n[o]?n[o].coordinate+r/2:null}var l=d(i,u.default.isNil(a)?e.dataKey:a);return u.default.isNil(l)?null:e.scale(l)},e.getCateCoordinateOfBar=function(t){var e=t.axis,n=t.ticks,r=t.offset,i=t.bandSize,o=t.entry,a=t.index;if("category"===e.type)return n[a]?n[a].coordinate+r:null;var s=d(o,e.dataKey,e.domain[a]);return u.default.isNil(s)?null:e.scale(s)-i/2+r},e.getBaseValueOfBar=function(t){var e=t.numericAxis,n=e.scale.domain();if("number"===e.type){var r=Math.min(n[0],n[1]),i=Math.max(n[0],n[1]);return r<=0&&i>=0?0:i<0?i:r}return n[0]},e.getStackedDataOfItem=function(t,e){var n=t.props.stackId;if(f.isNumOrStr(n)){var r=e[n];if(r&&r.items.length){for(var i=-1,o=0,a=r.items.length;o<a;o++)if(r.items[o]===t){i=o;break}return i>=0?r.stackedData[i]:null}}return null};e.getDomainOfStackGroups=function(t,e,n){return Object.keys(t).reduce((function(r,i){var o=t[i].stackedData.reduce((function(t,r){var i=r.slice(e,n+1).reduce((function(t,e){return[u.default.min(e.concat([t[0]]).filter(f.isNumber)),u.default.max(e.concat([t[1]]).filter(f.isNumber))]}),[1/0,-1/0]);return[Math.min(t[0],i[0]),Math.max(t[1],i[1])]}),[1/0,-1/0]);return[Math.min(o[0],r[0]),Math.max(o[1],r[1])]}),[1/0,-1/0]).map((function(t){return t===1/0||t===-1/0?0:t}))},e.MIN_VALUE_REG=/^dataMin[\s]*-[\s]*([0-9]+([.]{1}[0-9]+){0,1})$/,e.MAX_VALUE_REG=/^dataMax[\s]*\+[\s]*([0-9]+([.]{1}[0-9]+){0,1})$/,e.parseSpecifiedDomain=function(t,n,r){if(!u.default.isArray(t))return n;var i=[];if(f.isNumber(t[0]))i[0]=r?t[0]:Math.min(t[0],n[0]);else if(e.MIN_VALUE_REG.test(t[0])){var o=+e.MIN_VALUE_REG.exec(t[0])[1];i[0]=n[0]-o}else u.default.isFunction(t[0])?i[0]=t[0](n[0]):i[0]=n[0];if(f.isNumber(t[1]))i[1]=r?t[1]:Math.max(t[1],n[1]);else if(e.MAX_VALUE_REG.test(t[1])){o=+e.MAX_VALUE_REG.exec(t[1])[1];i[1]=n[1]+o}else u.default.isFunction(t[1])?i[1]=t[1](n[1]):i[1]=n[1];return i},e.getBandSizeOfAxis=function(t,e,n){if(t&&t.scale&&t.scale.bandwidth){var r=t.scale.bandwidth();if(!n||r>0)return r}if(t&&e&&e.length>=2){for(var i=u.default.sortBy(e,(function(t){return t.coordinate})),o=1/0,a=1,s=i.length;a<s;a++){var l=i[a],c=i[a-1];o=Math.min((l.coordinate||0)-(c.coordinate||0),o)}return o===1/0?0:o}return 0},e.parseDomainOfCategoryAxis=function(t,e,n){return t&&t.length?u.default.isEqual(t,u.default.get(n,"type.defaultProps.domain"))?e:t:e}},function(t,e,n){(function(e){var n=function(t){return t&&t.Math==Math&&t};t.exports=n("object"==typeof globalThis&&globalThis)||n("object"==typeof window&&window)||n("object"==typeof self&&self)||n("object"==typeof e&&e)||Function("return this")()}).call(this,n(28))},function(t,e,n){"use strict";n.r(e);var r=n(147),i=n.n(r),o=n(0),a=n.n(o),u=n(1),s=n.n(u),l=n(22),c=n.n(l);function f(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=-1;c()((function r(i){n<0&&(n=i),i-n>e?(t(i),n=-1):c()(r)}))}function h(t){return(h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function p(t){return function(t){if(Array.isArray(t))return t}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function d(){var t=function(){return null},e=!1;return{stop:function(){e=!0},start:function(n){e=!1,function n(r){if(!e){if(Array.isArray(r)){if(!r.length)return;var i=p(r),o=i[0],a=i.slice(1);return"number"==typeof o?void f(n.bind(null,a),o):(n(o),void f(n.bind(null,a)))}"object"===h(r)&&t(r),"function"==typeof r&&r()}}(n)},subscribe:function(e){return t=e,function(){t=function(){return null}}}}}var y=n(148),v=n.n(y);function g(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable})))),r.forEach((function(e){m(t,e,n[e])}))}return t}function m(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var _=["Webkit","Moz","O","ms"],x=["-webkit-","-moz-","-o-","-ms-"],b=["transform","transformOrigin","transition"],w=function(t){return t},A=function(t,e){return Object.keys(e).reduce((function(n,r){return g({},n,m({},r,t(r,e[r])))}),{})},O=function(t){return Object.keys(t).reduce((function(t,e){return g({},t,function(t,e){if(-1===b.indexOf(t))return m({},t,e);var n="transition"===t,r=t.replace(/(\w)/,(function(t){return t.toUpperCase()})),i=e;return _.reduce((function(t,o,a){return n&&(i=e.replace(/(transform|transform-origin)/gim,"".concat(x[a],"$1"))),g({},t,m({},o+r,i))}),{})}(e,t[e]))}),t)},E=function(t,e,n){return t.map((function(t){return"".concat((r=t,r.replace(/([A-Z])/g,(function(t){return"-".concat(t.toLowerCase())})))," ").concat(e,"ms ").concat(n);var r})).join(",")};function M(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=[],r=!0,i=!1,o=void 0;try{for(var a,u=t[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){i=!0,o=t}finally{try{r||null==u.return||u.return()}finally{if(i)throw o}}return n}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function S(t){return function(t){if(Array.isArray(t)){for(var e=0,n=new Array(t.length);e<t.length;e++)n[e]=t[e];return n}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var k=function(t,e){return[0,3*t,3*e-6*t,3*t-3*e+1]},P=function(t,e){return t.map((function(t,n){return t*Math.pow(e,n)})).reduce((function(t,e){return t+e}))},N=function(t,e){return function(n){var r=k(t,e);return P(r,n)}},C=function(t,e){return function(n){var r=S(k(t,e).map((function(t,e){return t*e})).slice(1)).concat([0]);return P(r,n)}},T=function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];var r=e[0],i=e[1],o=e[2],a=e[3];if(1===e.length)switch(e[0]){case"linear":r=0,i=0,o=1,a=1;break;case"ease":r=.25,i=.1,o=.25,a=1;break;case"ease-in":r=.42,i=0,o=1,a=1;break;case"ease-out":r=.42,i=0,o=.58,a=1;break;case"ease-in-out":r=0,i=0,o=.58,a=1;break;default:var u=e[0].split("(");if("cubic-bezier"===u[0]&&4===u[1].split(")")[0].split(",").length){var s=u[1].split(")")[0].split(",").map((function(t){return parseFloat(t)})),l=M(s,4);r=l[0],i=l[1],o=l[2],a=l[3]}}[r,o,i,a].every((function(t){return"number"==typeof t&&t>=0&&t<=1}));var c=N(r,o),f=N(i,a),h=C(r,o),p=function(t){return t>1?1:t<0?0:t},d=function(t){for(var e=t>1?1:t,n=e,r=0;r<8;++r){var i=c(n)-e,o=h(n);if(Math.abs(i-e)<1e-4||o<1e-4)return f(n);n=p(n-i/o)}return f(n)};return d.isStepper=!1,d},j=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.stiff,n=void 0===e?100:e,r=t.damping,i=void 0===r?8:r,o=t.dt,a=void 0===o?17:o,u=function(t,e,r){var o=r+(-(t-e)*n-r*i)*a/1e3,u=r*a/1e3+t;return Math.abs(u-e)<1e-4&&Math.abs(o)<1e-4?[e,0]:[u,o]};return u.isStepper=!0,u.dt=a,u},I=n(149),D=n.n(I);function R(t){return function(t){if(Array.isArray(t)){for(var e=0,n=new Array(t.length);e<t.length;e++)n[e]=t[e];return n}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function L(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable})))),r.forEach((function(e){B(t,e,n[e])}))}return t}function B(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function F(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=[],r=!0,i=!1,o=void 0;try{for(var a,u=t[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){i=!0,o=t}finally{try{r||null==u.return||u.return()}finally{if(i)throw o}}return n}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var z=function(t,e,n){return t+(e-t)*n},W=function(t){return t.from!==t.to},V=function(t,e,n,r,i){var o,a,u,s,f=(o=t,a=e,v()(Object.keys(o),Object.keys(a))),h=f.reduce((function(n,r){return L({},n,B({},r,[t[r],e[r]]))}),{}),p=f.reduce((function(n,r){return L({},n,B({},r,{from:t[r],velocity:0,to:e[r]}))}),{}),d=-1,y=function(){return null};return y=n.isStepper?function(r){u||(u=r);var o=(r-u)/n.dt;p=function t(e,n,r){var i=A((function(t,n){if(W(n)){var r=F(e(n.from,n.to,n.velocity),2);return L({},n,{from:r[0],velocity:r[1]})}return n}),n);return r<1?A((function(t,e){return W(e)?L({},e,{velocity:z(e.velocity,i[t].velocity,r),from:z(e.from,i[t].from,r)}):e}),n):t(e,i,r-1)}(n,p,o),i(L({},t,e,A((function(t,e){return e.from}),p))),u=r,D()(p,W).length&&(d=c()(y))}:function(o){s||(s=o);var a=(o-s)/r,u=A((function(t,e){return z.apply(void 0,R(e).concat([n(a)]))}),h);if(i(L({},t,e,u)),a<1)d=c()(y);else{var l=A((function(t,e){return z.apply(void 0,R(e).concat([n(1)]))}),h);i(L({},t,e,l))}},function(){return c()(y),function(){Object(l.cancel)(d)}}};function U(t){return(U="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function q(t,e){if(null==t)return{};var n,r,i=function(t,e){if(null==t)return{};var n,r,i={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}function G(t){return function(t){if(Array.isArray(t)){for(var e=0,n=new Array(t.length);e<t.length;e++)n[e]=t[e];return n}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function H(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable})))),r.forEach((function(e){K(t,e,n[e])}))}return t}function K(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function X(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Y(t,e){return!e||"object"!==U(e)&&"function"!=typeof e?J(t):e}function $(t){return($=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Z(t,e){return(Z=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function J(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}var Q=function(t){function e(t,n){var r;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var i=(r=Y(this,$(e).call(this,t,n))).props,o=i.isActive,a=i.attributeName,u=i.from,s=i.to,l=i.steps,c=i.children;if(r.handleStyleChange=r.handleStyleChange.bind(J(J(r))),r.changeStyle=r.changeStyle.bind(J(J(r))),!o)return r.state={style:{}},"function"==typeof c&&(r.state={style:s}),Y(r);if(l&&l.length)r.state={style:l[0].style};else if(u){if("function"==typeof c)return r.state={style:u},Y(r);r.state={style:a?K({},a,u):u}}else r.state={style:{}};return r}var n,r,u;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Z(t,e)}(e,t),n=e,(r=[{key:"componentDidMount",value:function(){var t=this.props,e=t.isActive,n=t.canBegin;this.mounted=!0,e&&n&&this.runAnimation(this.props)}},{key:"componentDidUpdate",value:function(t){var e=this.props,n=e.isActive,r=e.canBegin,o=e.attributeName,a=e.shouldReAnimate;if(r)if(n){if(!(i()(t.to,this.props.to)&&t.canBegin&&t.isActive)){var u=!t.canBegin||!t.isActive;this.manager&&this.manager.stop(),this.stopJSAnimation&&this.stopJSAnimation();var s=u||a?this.props.from:t.to;this.setState({style:o?K({},o,s):s}),this.runAnimation(H({},this.props,{from:s,begin:0}))}}else this.setState({style:o?K({},o,this.props.to):this.props.to})}},{key:"componentWillUnmount",value:function(){this.mounted=!1,this.unSubscribe&&this.unSubscribe(),this.manager&&(this.manager.stop(),this.manager=null),this.stopJSAnimation&&this.stopJSAnimation()}},{key:"runJSAnimation",value:function(t){var e=this,n=t.from,r=t.to,i=t.duration,o=t.easing,a=t.begin,u=t.onAnimationEnd,s=t.onAnimationStart,l=V(n,r,function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];var r=e[0];if("string"==typeof r)switch(r){case"ease":case"ease-in-out":case"ease-out":case"ease-in":case"linear":return T(r);case"spring":return j();default:if("cubic-bezier"===r.split("(")[0])return T(r)}return"function"==typeof r?r:null}(o),i,this.changeStyle);this.manager.start([s,a,function(){e.stopJSAnimation=l()},i,u])}},{key:"runStepAnimation",value:function(t){var e=this,n=t.steps,r=t.begin,i=t.onAnimationStart,o=n[0],a=o.style,u=o.duration,s=void 0===u?0:u;return this.manager.start([i].concat(G(n.reduce((function(t,r,i){if(0===i)return t;var o=r.duration,a=r.easing,u=void 0===a?"ease":a,s=r.style,l=r.properties,c=r.onAnimationEnd,f=i>0?n[i-1]:r,h=l||Object.keys(s);if("function"==typeof u||"spring"===u)return G(t).concat([e.runJSAnimation.bind(e,{from:f.style,to:s,duration:o,easing:u}),o]);var p=E(h,o,u),d=H({},f.style,s,{transition:p});return G(t).concat([d,o,c]).filter(w)}),[a,Math.max(s,r)])),[t.onAnimationEnd]))}},{key:"runAnimation",value:function(t){this.manager||(this.manager=d());var e=t.begin,n=t.duration,r=t.attributeName,i=t.to,o=t.easing,a=t.onAnimationStart,u=t.onAnimationEnd,s=t.steps,l=t.children,c=this.manager;if(this.unSubscribe=c.subscribe(this.handleStyleChange),"function"!=typeof o&&"function"!=typeof l&&"spring"!==o)if(s.length>1)this.runStepAnimation(t);else{var f=r?K({},r,i):i,h=E(Object.keys(f),n,o);c.start([a,e,H({},f,{transition:h}),n,u])}else this.runJSAnimation(t)}},{key:"handleStyleChange",value:function(t){this.changeStyle(t)}},{key:"changeStyle",value:function(t){this.mounted&&this.setState({style:t})}},{key:"render",value:function(){var t=this.props,e=t.children,n=(t.begin,t.duration,t.attributeName,t.easing,t.isActive),r=(t.steps,t.from,t.to,t.canBegin,t.onAnimationEnd,t.shouldReAnimate,t.onAnimationReStart,q(t,["children","begin","duration","attributeName","easing","isActive","steps","from","to","canBegin","onAnimationEnd","shouldReAnimate","onAnimationReStart"])),i=o.Children.count(e),u=O(this.state.style);if("function"==typeof e)return e(u);if(!n||0===i)return e;var s=function(t){var e=t.props,n=e.style,i=void 0===n?{}:n,a=e.className;return Object(o.cloneElement)(t,H({},r,{style:H({},i,u),className:a}))};return 1===i?s(o.Children.only(e)):a.a.createElement("div",null,o.Children.map(e,(function(t){return s(t)})))}}])&&X(n.prototype,r),u&&X(n,u),e}(o.PureComponent);Q.displayName="Animate",Q.propTypes={from:s.a.oneOfType([s.a.object,s.a.string]),to:s.a.oneOfType([s.a.object,s.a.string]),attributeName:s.a.string,duration:s.a.number,begin:s.a.number,easing:s.a.oneOfType([s.a.string,s.a.func]),steps:s.a.arrayOf(s.a.shape({duration:s.a.number.isRequired,style:s.a.object.isRequired,easing:s.a.oneOfType([s.a.oneOf(["ease","ease-in","ease-out","ease-in-out","linear"]),s.a.func]),properties:s.a.arrayOf("string"),onAnimationEnd:s.a.func})),children:s.a.oneOfType([s.a.node,s.a.func]),isActive:s.a.bool,canBegin:s.a.bool,onAnimationEnd:s.a.func,shouldReAnimate:s.a.bool,onAnimationStart:s.a.func,onAnimationReStart:s.a.func},Q.defaultProps={begin:0,duration:1e3,from:"",to:"",attributeName:"",easing:"ease",isActive:!0,canBegin:!0,steps:[],onAnimationEnd:function(){},onAnimationStart:function(){}};var tt=Q,et=n(61),nt=n(93),rt=n.n(nt);function it(t){return(it="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function ot(){return(ot=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t}).apply(this,arguments)}function at(t,e){if(null==t)return{};var n,r,i=function(t,e){if(null==t)return{};var n,r,i={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}function ut(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function st(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function lt(t,e){return!e||"object"!==it(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function ct(t){return(ct=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function ft(t,e){return(ft=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var ht=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.steps,n=t.duration;return e&&e.length?e.reduce((function(t,e){return t+(rt()(e.duration)&&e.duration>0?e.duration:0)}),0):rt()(n)?n:0},pt=function(t){function e(){var t,n;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);for(var r=arguments.length,i=new Array(r),o=0;o<r;o++)i[o]=arguments[o];return(n=lt(this,(t=ct(e)).call.apply(t,[this].concat(i)))).state={isActive:!1},n.handleEnter=function(t,e){var r=n.props,i=r.appearOptions,o=r.enterOptions;n.handleStyleActive(e?i:o)},n.handleExit=function(){n.handleStyleActive(n.props.leaveOptions)},n}var n,r,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&ft(t,e)}(e,t),n=e,(r=[{key:"handleStyleActive",value:function(t){if(t){var e=t.onAnimationEnd?function(){t.onAnimationEnd()}:null;this.setState(function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable})))),r.forEach((function(e){ut(t,e,n[e])}))}return t}({},t,{onAnimationEnd:e,isActive:!0}))}}},{key:"parseTimeout",value:function(){var t=this.props,e=t.appearOptions,n=t.enterOptions,r=t.leaveOptions;return ht(e)+ht(n)+ht(r)}},{key:"render",value:function(){var t=this,e=this.props,n=e.children,r=(e.appearOptions,e.enterOptions,e.leaveOptions,at(e,["children","appearOptions","enterOptions","leaveOptions"]));return a.a.createElement(et.Transition,ot({},r,{onEnter:this.handleEnter,onExit:this.handleExit,timeout:this.parseTimeout()}),(function(){return a.a.createElement(tt,t.state,o.Children.only(n))}))}}])&&st(n.prototype,r),i&&st(n,i),e}(o.Component);pt.propTypes={appearOptions:s.a.object,enterOptions:s.a.object,leaveOptions:s.a.object,children:s.a.element};var dt=pt;function yt(t){var e=t.component,n=t.children,r=t.appear,i=t.enter,u=t.leave;return a.a.createElement(et.TransitionGroup,{component:e},o.Children.map(n,(function(t,e){return a.a.createElement(dt,{appearOptions:r,enterOptions:i,leaveOptions:u,key:"child-".concat(e)},t)})))}yt.propTypes={appear:s.a.object,enter:s.a.object,leave:s.a.object,children:s.a.oneOfType([s.a.array,s.a.element]),component:s.a.any},yt.defaultProps={component:"span"};var vt=yt;n.d(e,"configSpring",(function(){return j})),n.d(e,"configBezier",(function(){return T})),n.d(e,"AnimateGroup",(function(){return vt})),n.d(e,"translateStyle",(function(){return O}));e.default=tt},function(t,e,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var o=i(n(3)),a=n(5),u=n(9);e.RADIAN=Math.PI/180,e.degreeToRadian=function(t){return t*Math.PI/180},e.radianToDegree=function(t){return 180*t/Math.PI},e.polarToCartesian=function(t,n,r,i){return{x:t+Math.cos(-e.RADIAN*i)*r,y:n+Math.sin(-e.RADIAN*i)*r}},e.getMaxRadius=function(t,e,n){return void 0===n&&(n={top:0,right:0,bottom:0,left:0}),Math.min(Math.abs(t-(n.left||0)-(n.right||0)),Math.abs(e-(n.top||0)-(n.bottom||0)))/2},e.formatAxisMap=function(t,n,i,s,l){var c=t.width,f=t.height,h=t.startAngle,p=t.endAngle,d=a.getPercentValue(t.cx,c,c/2),y=a.getPercentValue(t.cy,f,f/2),v=e.getMaxRadius(c,f,i),g=a.getPercentValue(t.innerRadius,v,0),m=a.getPercentValue(t.outerRadius,v,.8*v);return Object.keys(n).reduce((function(t,e){var i,a,c=n[e],f=c.domain,v=c.reversed;o.default.isNil(c.range)?("angleAxis"===s?a=[h,p]:"radiusAxis"===s&&(a=[g,m]),v&&(a=[a[1],a[0]])):(a=c.range,h=a[0],p=a[1]);var _=u.parseScale(c,l),x=_.realScaleType,b=_.scale;b.domain(f).range(a),u.checkDomainOfScale(b);var w=u.getTicksOfScale(b,r(r({},c),{realScaleType:x})),A=r(r(r({},c),w),{range:a,radius:m,realScaleType:x,scale:b,cx:d,cy:y,innerRadius:g,outerRadius:m,startAngle:h,endAngle:p});return r(r({},t),((i={})[e]=A,i))}),{})},e.distanceBetweenPoints=function(t,e){var n=t.x,r=t.y,i=e.x,o=e.y;return Math.sqrt(Math.pow(n-i,2)+Math.pow(r-o,2))},e.getAngleOfPoint=function(t,n){var r=t.x,i=t.y,o=n.cx,a=n.cy,u=e.distanceBetweenPoints({x:r,y:i},{x:o,y:a});if(u<=0)return{radius:u};var s=(r-o)/u,l=Math.acos(s);return i>a&&(l=2*Math.PI-l),{radius:u,angle:e.radianToDegree(l),angleInRadian:l}},e.formatAngleOfSector=function(t){var e=t.startAngle,n=t.endAngle,r=Math.floor(e/360),i=Math.floor(n/360),o=Math.min(r,i);return{startAngle:e-360*o,endAngle:n-360*o}};var s=function(t,e){var n=e.startAngle,r=e.endAngle,i=Math.floor(n/360),o=Math.floor(r/360);return t+360*Math.min(i,o)};e.inRangeOfSector=function(t,n){var i=t.x,o=t.y,a=e.getAngleOfPoint({x:i,y:o},n),u=a.radius,l=a.angle,c=n.innerRadius,f=n.outerRadius;if(u<c||u>f)return!1;if(0===u)return!0;var h,p=e.formatAngleOfSector(n),d=p.startAngle,y=p.endAngle,v=l;if(d<=y){for(;v>y;)v-=360;for(;v<d;)v+=360;h=v>=d&&v<=y}else{for(;v>d;)v-=360;for(;v<y;)v+=360;h=v>=y&&v<=d}return h?r(r({},n),{radius:u,angle:s(v,n)}):null}},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},,function(t,e,n){var r=n(113),i="object"==typeof self&&self&&self.Object===Object&&self,o=r||i||Function("return this")();t.exports=o},function(t,e){var n=Array.isArray;t.exports=n},function(t,e,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},i=this&&this.__rest||function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n},o=this&&this.__spreadArrays||function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),i=0;for(e=0;e<n;e++)for(var o=arguments[e],a=0,u=o.length;a<u;a++,i++)r[i]=o[a];return r},a=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e},u=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var s=a(n(0)),l=u(n(1)),c=u(n(3)),f=u(n(20)),h=u(n(7)),p=n(8),d=n(9),y=n(2),v={id:l.default.string,data:l.default.arrayOf(l.default.object),valueAccessor:l.default.func,clockWise:l.default.bool,dataKey:l.default.oneOfType([l.default.string,l.default.number,l.default.func])},g={valueAccessor:function(t){return c.default.isArray(t.value)?c.default.last(t.value):t.value}};function m(t){var e=t.data,n=t.valueAccessor,o=t.dataKey,a=t.clockWise,u=t.id,l=i(t,["data","valueAccessor","dataKey","clockWise","id"]);return e&&e.length?s.default.createElement(h.default,{className:"recharts-label-list"},e.map((function(t,e){var i=c.default.isNil(o)?n(t,e):d.getValueByDataKey(t&&t.payload,o),h=c.default.isNil(u)?{}:{id:u+"-"+e};return s.default.createElement(f.default,r({},y.filterProps(t,!0),l,h,{index:e,value:i,viewBox:f.default.parseViewBox(c.default.isNil(a)?t:r(r({},t),{clockWise:a})),key:"label-"+e}))}))):null}m.propTypes=v,m.displayName="LabelList",m.renderCallByParent=function(t,e,n){if(void 0===n&&(n=!0),!t||!t.children&&n&&!t.label)return null;var i=t.children,a=p.findAllByType(i,m.displayName).map((function(t,n){return s.cloneElement(t,{data:e,key:"labelList-"+n})}));if(!n)return a;var u=function(t,e){return t?!0===t?s.default.createElement(m,{key:"labelList-implicit",data:e}):s.default.isValidElement(t)||c.default.isFunction(t)?s.default.createElement(m,{key:"labelList-implicit",data:e,content:t}):c.default.isObject(t)?s.default.createElement(m,r({data:e},t,{key:"labelList-implicit"})):null:null}(t.label,e);return o([u],a)},m.defaultProps=g,e.default=m},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__rest||function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n},u=this&&this.__spreadArrays||function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),i=0;for(e=0;e<n;e++)for(var o=arguments[e],a=0,u=o.length;a<u;a++,i++)r[i]=o[a];return r},s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e},l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var c=s(n(0)),f=l(n(4)),h=l(n(3)),p=l(n(39)),d=l(n(7)),y=l(n(44)),v=l(n(75)),g=l(n(33)),m=l(n(135)),_=l(n(53)),x=l(n(27)),b=l(n(34)),w=n(8),A=l(n(143)),O=l(n(139)),E=n(52),M=n(5),S=n(9),k=n(340),P=n(12),N=n(51),C=n(341),T=n(2),j={xAxis:["bottom","top"],yAxis:["left","right"]},I={x:0,y:0};e.default=function(t){var e=t.chartName,n=t.GraphicalChild,r=t.eventType,s=void 0===r?"axis":r,l=t.axisComponents,D=t.legendContent,R=t.formatAxisMap,L=t.defaultProps;return function(t){function r(n){var i=t.call(this,n)||this;i.getAxisMapByAxes=function(t,e){var n=e.axes,i=e.graphicalItems,a=e.axisType,s=e.axisIdKey,l=e.stackGroups,c=e.dataStartIndex,f=e.dataEndIndex,p=t.layout,d=t.children,y=t.stackOffset,v=S.isCategorialAxis(p,a);return n.reduce((function(e,n){var g,m=n.props,_=m.type,x=m.dataKey,b=m.allowDataOverflow,w=m.allowDuplicatedCategory,A=m.scale,O=m.ticks,E=n.props[s],P=r.getDisplayedData(t,{graphicalItems:i.filter((function(t){return t.props[s]===E})),dataStartIndex:c,dataEndIndex:f}),N=P.length;if(!e[E]){var C=void 0,T=void 0,j=void 0;if(x){if(C=S.getDomainOfDataByKey(P,x,_),"category"===_&&v){var I=M.hasDuplicate(C);w&&I?(T=C,C=h.default.range(0,N)):w||(C=S.parseDomainOfCategoryAxis(n.props.domain,C,n).reduce((function(t,e){return t.indexOf(e)>=0?t:u(t,[e])}),[]))}else if("category"===_)C=w?C.filter((function(t){return""!==t&&!h.default.isNil(t)})):S.parseDomainOfCategoryAxis(n.props.domain,C,n).reduce((function(t,e){return t.indexOf(e)>=0||""===e||h.default.isNil(e)?t:u(t,[e])}),[]);else if("number"===_){var D=S.parseErrorBarsOfAxis(P,i.filter((function(t){return t.props[s]===E&&!t.props.hide})),x,a);D&&(C=D)}!v||"number"!==_&&"auto"===A||(j=S.getDomainOfDataByKey(P,x,"category"))}else C=v?h.default.range(0,N):l&&l[E]&&l[E].hasStack&&"number"===_?"expand"===y?[0,1]:S.getDomainOfStackGroups(l[E].stackGroups,c,f):S.getDomainOfItemsWithSameAxis(P,i.filter((function(t){return t.props[s]===E&&!t.props.hide})),_,!0);return"number"===_&&(C=k.detectReferenceElementsDomain(d,C,E,a,O),n.props.domain&&(C=S.parseSpecifiedDomain(n.props.domain,C,b))),o(o({},e),((g={})[E]=o(o({},n.props),{axisType:a,domain:C,categoricalDomain:j,duplicateDomain:T,originalDomain:n.props.domain,isCategorial:v,layout:p}),g))}return e}),{})},i.getAxisMapByItems=function(t,e){var n=e.graphicalItems,i=e.Axis,a=e.axisType,u=e.axisIdKey,s=e.stackGroups,l=e.dataStartIndex,c=e.dataEndIndex,f=t.layout,p=t.children,d=r.getDisplayedData(t,{graphicalItems:n,dataStartIndex:l,dataEndIndex:c}),y=d.length,v=S.isCategorialAxis(f,a),g=-1;return n.reduce((function(t,e){var r,m=e.props[u];if(!t[m]){g++;var _=void 0;return v?_=h.default.range(0,y):s&&s[m]&&s[m].hasStack?(_=S.getDomainOfStackGroups(s[m].stackGroups,l,c),_=k.detectReferenceElementsDomain(p,_,m,a)):(_=S.parseSpecifiedDomain(i.defaultProps.domain,S.getDomainOfItemsWithSameAxis(d,n.filter((function(t){return t.props[u]===m&&!t.props.hide})),"number"),i.defaultProps.allowDataOverflow),_=k.detectReferenceElementsDomain(p,_,m,a)),o(o({},t),((r={})[m]=o(o({axisType:a},i.defaultProps),{hide:!0,orientation:h.default.get(j,a+"."+g%2,null),domain:_,originalDomain:i.defaultProps.domain,isCategorial:v,layout:f}),r))}return t}),{})},i.handleLegendBBoxUpdate=function(t){if(t&&i.legendInstance){var e=i.state,n=e.dataStartIndex,r=e.dataEndIndex,o=e.updateId;i.setState(i.updateStateOfAxisMapsOffsetAndStackGroups({props:i.props,dataStartIndex:n,dataEndIndex:r,updateId:o}))}},i.handleReceiveSyncEvent=function(t,e,n){var r=i.props,a=r.syncId,u=r.layout,s=i.state.updateId;if(a===t&&e!==i.uniqueChartId){var l=n.dataStartIndex,c=n.dataEndIndex;if(h.default.isNil(n.dataStartIndex)&&h.default.isNil(n.dataEndIndex))if(h.default.isNil(n.activeTooltipIndex))i.setState(n);else{var f=n.chartX,p=n.chartY,d=n.activeTooltipIndex,y=i.state,v=y.offset,g=y.tooltipTicks;if(!v)return;var m=o(o({},v),{x:v.left,y:v.top}),_=Math.min(f,m.x+m.width),x=Math.min(p,m.y+m.height),b=g[d]&&g[d].value,w=i.getTooltipContent(d),A=g[d]?{x:"horizontal"===u?g[d].coordinate:_,y:"horizontal"===u?x:g[d].coordinate}:I;i.setState(o(o({},n),{activeLabel:b,activeCoordinate:A,activePayload:w}))}else i.setState(o({dataStartIndex:l,dataEndIndex:c},i.updateStateOfAxisMapsOffsetAndStackGroups({props:i.props,dataStartIndex:l,dataEndIndex:c,updateId:s})))}},i.handleBrushChange=function(t){var e=t.startIndex,n=t.endIndex;if(e!==i.state.dataStartIndex||n!==i.state.dataEndIndex){var r=i.state.updateId;i.setState((function(){return o({dataStartIndex:e,dataEndIndex:n},i.updateStateOfAxisMapsOffsetAndStackGroups({props:i.props,dataStartIndex:e,dataEndIndex:n,updateId:r}))})),i.triggerSyncEvent({dataStartIndex:e,dataEndIndex:n})}},i.handleMouseEnter=function(t){var e=i.props.onMouseEnter,n=i.getMouseInfo(t);if(n){var r=o(o({},n),{isTooltipActive:!0});i.setState(r),i.triggerSyncEvent(r),h.default.isFunction(e)&&e(r,t)}},i.triggeredAfterMouseMove=function(t){var e=i.props.onMouseMove,n=i.getMouseInfo(t),r=n?o(o({},n),{isTooltipActive:!0}):{isTooltipActive:!1};i.setState(r),i.triggerSyncEvent(r),h.default.isFunction(e)&&e(r,t)},i.handleItemMouseEnter=function(t){i.setState((function(){return{isTooltipActive:!0,activeItem:t,activePayload:t.tooltipPayload,activeCoordinate:t.tooltipPosition||{x:t.cx,y:t.cy}}}))},i.handleItemMouseLeave=function(){i.setState((function(){return{isTooltipActive:!1}}))},i.handleMouseMove=function(t){t&&h.default.isFunction(t.persist)&&t.persist(),i.triggeredAfterMouseMove(t)},i.handleMouseLeave=function(t){var e=i.props.onMouseLeave,n={isTooltipActive:!1};i.setState(n),i.triggerSyncEvent(n),h.default.isFunction(e)&&e(n,t),i.cancelThrottledTriggerAfterMouseMove()},i.handleOuterEvent=function(t){var e=w.getReactEventByType(t),n=h.default.get(i.props,""+e);e&&h.default.isFunction(n)&&n(i.getMouseInfo(t),t)},i.handleClick=function(t){var e=i.props.onClick;h.default.isFunction(e)&&e(i.getMouseInfo(t),t)},i.handleMouseDown=function(t){var e=i.props.onMouseDown;h.default.isFunction(e)&&e(i.getMouseInfo(t),t)},i.handleMouseUp=function(t){var e=i.props.onMouseUp;h.default.isFunction(e)&&e(i.getMouseInfo(t),t)},i.handleTouchMove=function(t){null!=t.changedTouches&&t.changedTouches.length>0&&i.handleMouseMove(t.changedTouches[0])},i.handleTouchStart=function(t){null!=t.changedTouches&&t.changedTouches.length>0&&i.handleMouseDown(t.changedTouches[0])},i.handleTouchEnd=function(t){null!=t.changedTouches&&t.changedTouches.length>0&&i.handleMouseUp(t.changedTouches[0])},i.verticalCoordinatesGenerator=function(t){var e=t.xAxis,n=t.width,r=t.height,i=t.offset;return S.getCoordinatesOfGrid(A.default.getTicks(o(o(o({},A.default.defaultProps),e),{ticks:S.getTicksOfAxis(e,!0),viewBox:{x:0,y:0,width:n,height:r}})),i.left,i.left+i.width)},i.horizontalCoordinatesGenerator=function(t){var e=t.yAxis,n=t.width,r=t.height,i=t.offset;return S.getCoordinatesOfGrid(A.default.getTicks(o(o(o({},A.default.defaultProps),e),{ticks:S.getTicksOfAxis(e,!0),viewBox:{x:0,y:0,width:n,height:r}})),i.top,i.top+i.height)},i.axesTicksGenerator=function(t){return S.getTicksOfAxis(t,!0)},i.tooltipTicksGenerator=function(t){var e=M.getAnyElementOfObject(t),n=S.getTicksOfAxis(e,!1,!0);return{tooltipTicks:n,orderedTooltipTicks:h.default.sortBy(n,(function(t){return t.coordinate})),tooltipAxis:e,tooltipAxisBandSize:S.getBandSizeOfAxis(e)}},i.renderCursor=function(t){var n=i.state,r=n.isTooltipActive,a=n.activeCoordinate,u=n.activePayload,s=n.offset;if(!(t&&t.props.cursor&&r&&a))return null;var l,f=i.props.layout,h=g.default;if("ScatterChart"===e)l=a,h=m.default;else if("BarChart"===e)l=i.getCursorRectangle(),h=b.default;else if("radial"===f){var p=i.getCursorPoints(),d=p.cx,y=p.cy,v=p.radius;l={cx:d,cy:y,startAngle:p.startAngle,endAngle:p.endAngle,innerRadius:v,outerRadius:v},h=_.default}else l={points:i.getCursorPoints()},h=g.default;var x=t.key||"_recharts-cursor",w=o(o(o(o({stroke:"#ccc",pointerEvents:"none"},s),l),T.filterProps(t.props.cursor)),{payload:u,key:x,className:"recharts-tooltip-cursor"});return c.isValidElement(t.props.cursor)?c.cloneElement(t.props.cursor,w):c.createElement(h,w)},i.renderPolarAxis=function(t,e,n){var r=h.default.get(t,"type.axisType"),a=h.default.get(i.state,r+"Map")[t.props[r+"Id"]];return c.cloneElement(t,o(o({},a),{className:r,key:t.key||e+"-"+n,ticks:S.getTicksOfAxis(a,!0)}))},i.renderXAxis=function(t,e,n){var r=i.state.xAxisMap[t.props.xAxisId];return i.renderAxis(r,t,e,n)},i.renderYAxis=function(t,e,n){var r=i.state.yAxisMap[t.props.yAxisId];return i.renderAxis(r,t,e,n)},i.renderGrid=function(t){var e=i.state,n=e.xAxisMap,r=e.yAxisMap,o=e.offset,a=i.props,u=a.width,s=a.height,l=M.getAnyElementOfObject(n),f=h.default.find(r,(function(t){return h.default.every(t.domain,Number.isFinite)}))||M.getAnyElementOfObject(r),p=t.props||{};return c.cloneElement(t,{key:t.key||"grid",x:M.isNumber(p.x)?p.x:o.left,y:M.isNumber(p.y)?p.y:o.top,width:M.isNumber(p.width)?p.width:o.width,height:M.isNumber(p.height)?p.height:o.height,xAxis:l,yAxis:f,offset:o,chartWidth:u,chartHeight:s,verticalCoordinatesGenerator:p.verticalCoordinatesGenerator||i.verticalCoordinatesGenerator,horizontalCoordinatesGenerator:p.horizontalCoordinatesGenerator||i.horizontalCoordinatesGenerator})},i.renderPolarGrid=function(t){var e=i.state,n=e.radiusAxisMap,r=e.angleAxisMap,o=M.getAnyElementOfObject(n),a=M.getAnyElementOfObject(r),u=a.cx,s=a.cy,l=a.innerRadius,f=a.outerRadius;return c.cloneElement(t,{polarAngles:S.getTicksOfAxis(a,!0).map((function(t){return t.coordinate})),polarRadius:S.getTicksOfAxis(o,!0).map((function(t){return t.coordinate})),cx:u,cy:s,innerRadius:l,outerRadius:f,key:t.key||"polar-grid"})},i.renderLegend=function(){var t=i.state.formatedGraphicalItems,e=i.props,n=e.children,r=e.width,u=e.height,s=i.props.margin||{},l=r-(s.left||0)-(s.right||0),f=S.getLegendProps({children:n,formatedGraphicalItems:t,legendWidth:l,legendContent:D});if(!f)return null;var h=f.item,p=a(f,["item"]);return c.cloneElement(h,o(o({},p),{chartWidth:r,chartHeight:u,margin:s,ref:function(t){i.legendInstance=t},onBBoxUpdate:i.handleLegendBBoxUpdate}))},i.renderTooltip=function(){var t=i.props.children,e=w.findChildByType(t,y.default.displayName);if(!e)return null;var n=i.state,r=n.isTooltipActive,a=n.activeCoordinate,u=n.activePayload,s=n.activeLabel,l=n.offset;return c.cloneElement(e,{viewBox:o(o({},l),{x:l.left,y:l.top}),active:r,label:s,payload:r?u:[],coordinate:a})},i.renderBrush=function(t){var e=i.props,n=e.margin,r=e.data,o=i.state,a=o.offset,u=o.dataStartIndex,s=o.dataEndIndex,l=o.updateId;return c.cloneElement(t,{key:t.key||"_recharts-brush",onChange:S.combineEventHandlers(i.handleBrushChange,null,t.props.onChange),data:r,x:M.isNumber(t.props.x)?t.props.x:a.left,y:M.isNumber(t.props.y)?t.props.y:a.top+a.height+a.brushBottom-(n.bottom||0),width:M.isNumber(t.props.width)?t.props.width:a.width,startIndex:u,endIndex:s,updateId:"brush-"+l})},i.renderReferenceElement=function(t,e,n){if(!t)return null;var r=i.clipPathId,o=i.state,a=o.xAxisMap,u=o.yAxisMap,s=o.offset,l=t.props,f=l.xAxisId,h=l.yAxisId;return c.cloneElement(t,{key:t.key||e+"-"+n,xAxis:a[f],yAxis:u[h],viewBox:{x:s.left,y:s.top,width:s.width,height:s.height},clipPathId:r})},i.renderActivePoints=function(t){var e=t.item,n=t.activePoint,i=t.basePoint,a=t.childIndex,u=t.isRange,s=[],l=e.props.key,c=e.item.props,f=c.activeDot,h=c.dataKey,p=o(o({index:a,dataKey:h,cx:n.x,cy:n.y,r:4,fill:S.getMainColorOfGraphicItem(e.item),strokeWidth:2,stroke:"#fff",payload:n.payload,value:n.value,key:l+"-activePoint-"+a},T.filterProps(f)),T.adaptEventHandlers(f));return s.push(r.renderActiveDot(f,p)),i?s.push(r.renderActiveDot(f,o(o({},p),{cx:i.x,cy:i.y,key:l+"-basePoint-"+a}))):u&&s.push(null),s},i.renderGraphicChild=function(t,e,n){var r=i.filterFormatItem(t,e,n);if(!r)return null;var o=c.cloneElement(t,r.props),a=i.state,s=a.isTooltipActive,l=a.tooltipAxis,f=a.activeTooltipIndex,p=a.activeLabel,d=i.props.children,v=w.findChildByType(d,y.default.displayName),g=r.props,m=g.points,_=g.isRange,x=g.baseLine,b=r.item.props,A=b.activeDot;if(!b.hide&&s&&v&&A&&f>=0){var O=void 0,E=void 0;if(l.dataKey&&!l.allowDuplicatedCategory){var S="function"==typeof l.dataKey?function(t){return"function"==typeof l.dataKey?l.dataKey(t.payload):null}:"payload.".concat(l.dataKey.toString());O=M.findEntryInArray(m,S,p),E=_&&x&&M.findEntryInArray(x,S,p)}else O=m[f],E=_&&x&&x[f];if(!h.default.isNil(O))return u([o],i.renderActivePoints({item:r,activePoint:O,basePoint:E,childIndex:f,isRange:_}))}return _?[o,null,null]:[o,null]},i.renderCustomized=function(t){return c.cloneElement(t,o(o({},i.props),i.state))};var s=r.createDefaultState(n);return i.state=o(o(o({},s),{updateId:0}),i.updateStateOfAxisMapsOffsetAndStackGroups(o(o({props:n},s),{updateId:0}))),i.uniqueChartId=h.default.isNil(n.id)?M.uniqueId("recharts"):n.id,i.clipPathId=i.uniqueChartId+"-clip",n.throttleDelay&&(i.triggeredAfterMouseMove=h.default.throttle(i.triggeredAfterMouseMove,n.throttleDelay)),i}return i(r,t),r.prototype.componentDidMount=function(){h.default.isNil(this.props.syncId)||this.addListener()},r.prototype.UNSAFE_componentWillReceiveProps=function(t){var e=this,n=this.props,i=n.data,a=n.children,u=n.width,s=n.height,l=n.layout,c=n.stackOffset,f=n.margin,p=this.state.updateId;if(t.data===i&&t.width===u&&t.height===s&&t.layout===l&&t.stackOffset===c&&N.shallowEqual(t.margin,f)){if(!w.isChildrenEqual(t.children,a)){var d=!h.default.isNil(t.data)?p:p+1;this.setState((function(n){return o({updateId:d},e.updateStateOfAxisMapsOffsetAndStackGroups(o(o({props:t},n),{updateId:d})))}))}}else{var y=r.createDefaultState(t);this.setState(o(o(o({},y),{updateId:p+1}),this.updateStateOfAxisMapsOffsetAndStackGroups(o(o({props:t},y),{updateId:p+1}))))}h.default.isNil(this.props.syncId)&&!h.default.isNil(t.syncId)&&this.addListener(),!h.default.isNil(this.props.syncId)&&h.default.isNil(t.syncId)&&this.removeListener()},r.prototype.componentWillUnmount=function(){h.default.isNil(this.props.syncId)||this.removeListener(),this.cancelThrottledTriggerAfterMouseMove()},r.prototype.cancelThrottledTriggerAfterMouseMove=function(){"function"==typeof this.triggeredAfterMouseMove.cancel&&this.triggeredAfterMouseMove.cancel()},r.prototype.getAxisMap=function(t,e){var n=e.axisType,r=void 0===n?"xAxis":n,i=e.AxisComp,o=e.graphicalItems,a=e.stackGroups,u=e.dataStartIndex,s=e.dataEndIndex,l=t.children,c=r+"Id",f=w.findAllByType(l,i),h={};return f&&f.length?h=this.getAxisMapByAxes(t,{axes:f,graphicalItems:o,axisType:r,axisIdKey:c,stackGroups:a,dataStartIndex:u,dataEndIndex:s}):o&&o.length&&(h=this.getAxisMapByItems(t,{Axis:i,graphicalItems:o,axisType:r,axisIdKey:c,stackGroups:a,dataStartIndex:u,dataEndIndex:s})),h},r.prototype.getActiveCoordinate=function(t,e,n){var r=this.props.layout,i=t.find((function(t){return t&&t.index===e}));if(i){if("horizontal"===r)return{x:i.coordinate,y:n.y};if("vertical"===r)return{x:n.x,y:i.coordinate};if("centric"===r){var a=i.coordinate,u=n.radius;return o(o(o({},n),P.polarToCartesian(n.cx,n.cy,u,a)),{angle:a,radius:u})}var s=i.coordinate,l=n.angle;return o(o(o({},n),P.polarToCartesian(n.cx,n.cy,s,l)),{angle:l,radius:s})}return I},r.prototype.getMouseInfo=function(t){if(!this.container)return null;var e=E.getOffset(this.container),n=E.calculateChartCoordinate(t,e),r=this.inRange(n.chartX,n.chartY);if(!r)return null;var i=this.state,a=i.xAxisMap,u=i.yAxisMap;if("axis"!==s&&a&&u){var l=M.getAnyElementOfObject(a).scale,c=M.getAnyElementOfObject(u).scale,f=l&&l.invert?l.invert(n.chartX):null,h=c&&c.invert?c.invert(n.chartY):null;return o(o({},n),{xValue:f,yValue:h})}var p=this.state,d=p.orderedTooltipTicks,y=p.tooltipAxis,v=p.tooltipTicks,g=this.calculateTooltipPos(r),m=S.calculateActiveTickIndex(g,d,v,y);if(m>=0&&v){var _=v[m]&&v[m].value,x=this.getTooltipContent(m,_),b=this.getActiveCoordinate(d,m,r);return o(o({},n),{activeTooltipIndex:m,activeLabel:_,activePayload:x,activeCoordinate:b})}return null},r.prototype.getTooltipContent=function(t,e){var n=this.state,i=n.graphicalItems,a=n.tooltipAxis,s=r.getDisplayedData(this.props,this.state);return t<0||!i||!i.length||t>=s.length?null:i.reduce((function(n,r){if(r.props.hide)return n;var i,l=r.props,c=l.dataKey,f=l.name,h=l.unit,p=l.formatter,d=l.data,y=l.tooltipType;return(i=a.dataKey&&!a.allowDuplicatedCategory?M.findEntryInArray(d||s,a.dataKey,e):d&&d[t]||s[t])?u(n,[o(o({},T.filterProps(r)),{dataKey:c,unit:h,formatter:p,name:f||c,color:S.getMainColorOfGraphicItem(r),value:S.getValueByDataKey(i,c),type:y,payload:i})]):n}),[])},r.prototype.getFormatItems=function(t,e){var n=this,i=e.graphicalItems,a=e.stackGroups,u=e.offset,s=e.updateId,c=e.dataStartIndex,f=e.dataEndIndex,p=t.barSize,d=t.layout,y=t.barGap,v=t.barCategoryGap,g=t.maxBarSize,m=r.getAxisNameByLayout(d),_=m.numericAxisName,x=m.cateAxisName,b=r.hasBar(i)&&S.getBarSizeList({barSize:p,stackGroups:a}),A=[];return i.forEach((function(i,p){var m,O=r.getDisplayedData(t,{dataStartIndex:c,dataEndIndex:f},i),E=i.props,M=E.dataKey,k=E.maxBarSize,P=i.props[_+"Id"],N=i.props[x+"Id"],C=l.reduce((function(t,n){var r,a=e[n.axisType+"Map"],u=i.props[n.axisType+"Id"],s=a&&a[u];return o(o({},t),((r={})[n.axisType]=s,r[n.axisType+"Ticks"]=S.getTicksOfAxis(s),r))}),{}),T=C[x],j=C[x+"Ticks"],I=a&&a[P]&&a[P].hasStack&&S.getStackedDataOfItem(i,a[P].stackGroups),D=w.getDisplayName(i.type).indexOf("Bar")>=0,R=S.getBandSizeOfAxis(T,j),L=[];if(D){var B=S.getBandSizeOfAxis(T,j,!0),F=h.default.isNil(k)?g:k;L=S.getBarPosition({barGap:y,barCategoryGap:v,bandSize:B!==R?B:R,sizeList:b[N],maxBarSize:F}),B!==R&&(L=L.map((function(t){return o(o({},t),{position:o(o({},t.position),{offset:t.position.offset-B/2})})})))}var z=i&&i.type&&i.type.getComposedData;z&&A.push({props:o(o({},z(o(o({},C),{displayedData:O,props:t,dataKey:M,item:i,bandSize:R,barPosition:L,offset:u,stackedData:I,layout:d,dataStartIndex:c,dataEndIndex:f,onItemMouseLeave:S.combineEventHandlers(n.handleItemMouseLeave,null,i.props.onMouseLeave),onItemMouseEnter:S.combineEventHandlers(n.handleItemMouseEnter,null,i.props.onMouseEnter)}))),(m={key:i.key||"item-"+p},m[_]=C[_],m[x]=C[x],m.animationId=s,m)),childIndex:w.parseChildIndex(i,t.children),item:i})})),A},r.prototype.getCursorRectangle=function(){var t=this.props.layout,e=this.state,n=e.activeCoordinate,r=e.offset,i=e.tooltipAxisBandSize,o=i/2;return{stroke:"none",fill:"#ccc",x:"horizontal"===t?n.x-o:r.left+.5,y:"horizontal"===t?r.top+.5:n.y-o,width:"horizontal"===t?i:r.width-1,height:"horizontal"===t?r.height-1:i}},r.prototype.getCursorPoints=function(){var t,e,n,r,i=this.props.layout,o=this.state,a=o.activeCoordinate,u=o.offset;if("horizontal"===i)n=t=a.x,e=u.top,r=u.top+u.height;else if("vertical"===i)r=e=a.y,t=u.left,n=u.left+u.width;else if(!h.default.isNil(a.cx)||!h.default.isNil(a.cy)){if("centric"!==i){f=a.cx,p=a.cy;var s=a.radius,l=a.startAngle,c=a.endAngle;return{points:[P.polarToCartesian(f,p,s,l),P.polarToCartesian(f,p,s,c)],cx:f,cy:p,radius:s,startAngle:l,endAngle:c}}var f=a.cx,p=a.cy,d=a.innerRadius,y=a.outerRadius,v=a.angle,g=P.polarToCartesian(f,p,d,v),m=P.polarToCartesian(f,p,y,v);t=g.x,e=g.y,n=m.x,r=m.y}return[{x:t,y:e},{x:n,y:r}]},r.getAxisNameByLayout=function(t){return"horizontal"===t?{numericAxisName:"yAxis",cateAxisName:"xAxis"}:"vertical"===t?{numericAxisName:"xAxis",cateAxisName:"yAxis"}:"centric"===t?{numericAxisName:"radiusAxis",cateAxisName:"angleAxis"}:{numericAxisName:"angleAxis",cateAxisName:"radiusAxis"}},r.prototype.calculateTooltipPos=function(t){var e=this.props.layout;return"horizontal"===e?t.x:"vertical"===e?t.y:"centric"===e?t.angle:t.radius},r.prototype.inRange=function(t,e){var n=this.props.layout;if("horizontal"===n||"vertical"===n){var r=this.state.offset;return t>=r.left&&t<=r.left+r.width&&e>=r.top&&e<=r.top+r.height?{x:t,y:e}:null}var i=this.state,o=i.angleAxisMap,a=i.radiusAxisMap;if(o&&a){var u=M.getAnyElementOfObject(o);return P.inRangeOfSector({x:t,y:e},u)}return null},r.prototype.parseEventsOfWrapper=function(){var t=this.props.children,e=w.findChildByType(t,y.default.displayName)&&"axis"===s?{onMouseEnter:this.handleMouseEnter,onMouseMove:this.handleMouseMove,onMouseLeave:this.handleMouseLeave,onTouchMove:this.handleTouchMove,onTouchStart:this.handleTouchStart,onTouchEnd:this.handleTouchEnd}:{},n=T.adaptEventHandlers(this.props,this.handleOuterEvent);return o(o({},n),e)},r.prototype.updateStateOfAxisMapsOffsetAndStackGroups=function(t){var i=this,a=t.props,u=t.dataStartIndex,s=t.dataEndIndex,c=t.updateId;if(!w.validateWidthHeight({props:a}))return null;var f=a.children,h=a.layout,p=a.stackOffset,d=a.data,y=a.reverseStackOrder,v=r.getAxisNameByLayout(h),g=v.numericAxisName,m=v.cateAxisName,_=w.findAllByType(f,n),x=S.getStackGroupsByAxisId(d,_,g+"Id",m+"Id",p,y),b=l.reduce((function(t,e){var n,r=e.axisType+"Map";return o(o({},t),((n={})[r]=i.getAxisMap(a,o(o({},e),{graphicalItems:_,stackGroups:e.axisType===g&&x,dataStartIndex:u,dataEndIndex:s})),n))}),{}),A=this.calculateOffset(o(o({},b),{props:a,graphicalItems:_}));Object.keys(b).forEach((function(t){b[t]=R(a,b[t],A,t.replace("Map",""),e)}));var O=b[m+"Map"],E=this.tooltipTicksGenerator(O),M=this.getFormatItems(a,o(o({},b),{dataStartIndex:u,dataEndIndex:s,updateId:c,graphicalItems:_,stackGroups:x,offset:A}));return o(o({formatedGraphicalItems:M,graphicalItems:_,offset:A,stackGroups:x},E),b)},r.prototype.addListener=function(){C.eventCenter.on(C.SYNC_EVENT,this.handleReceiveSyncEvent),C.eventCenter.setMaxListeners&&C.eventCenter._maxListeners&&C.eventCenter.setMaxListeners(C.eventCenter._maxListeners+1)},r.prototype.removeListener=function(){C.eventCenter.removeListener(C.SYNC_EVENT,this.handleReceiveSyncEvent),C.eventCenter.setMaxListeners&&C.eventCenter._maxListeners&&C.eventCenter.setMaxListeners(C.eventCenter._maxListeners-1)},r.prototype.calculateOffset=function(t){var e=t.props,n=t.graphicalItems,r=t.xAxisMap,i=void 0===r?{}:r,a=t.yAxisMap,u=void 0===a?{}:a,s=e.width,l=e.height,c=e.children,f=e.margin||{},p=w.findChildByType(c,O.default.displayName),d=w.findChildByType(c,v.default.displayName),y=Object.keys(u).reduce((function(t,e){var n,r=u[e],i=r.orientation;return r.mirror||r.hide?t:o(o({},t),((n={})[i]=t[i]+r.width,n))}),{left:f.left||0,right:f.right||0}),g=Object.keys(i).reduce((function(t,e){var n,r=i[e],a=r.orientation;return r.mirror||r.hide?t:o(o({},t),((n={})[a]=h.default.get(t,""+a)+r.height,n))}),{top:f.top||0,bottom:f.bottom||0}),m=o(o({},g),y),_=m.bottom;if(p&&(m.bottom+=p.props.height||O.default.defaultProps.height),d&&this.legendInstance){var x=this.legendInstance.getBBox();m=S.appendOffsetOfLegend(m,n,e,x)}return o(o({brushBottom:_},m),{width:s-m.left-m.right,height:l-m.top-m.bottom})},r.prototype.triggerSyncEvent=function(t){var e=this.props.syncId;h.default.isNil(e)||C.eventCenter.emit(C.SYNC_EVENT,e,this.uniqueChartId,t)},r.prototype.filterFormatItem=function(t,e,n){for(var r=this.state.formatedGraphicalItems,i=0,o=r.length;i<o;i++){var a=r[i];if(a.item===t||a.props.key===t.key||e===w.getDisplayName(a.item.type)&&n===a.childIndex)return a}return null},r.prototype.renderAxis=function(t,e,n,r){var i=this.props,a=i.width,u=i.height;return c.default.createElement(A.default,o({},t,{className:"recharts-"+t.axisType+" "+t.axisType,key:e.key||n+"-"+r,viewBox:{x:0,y:0,width:a,height:u},ticksGenerator:this.axesTicksGenerator}))},r.renderActiveDot=function(t,e){var n;return n=c.isValidElement(t)?c.cloneElement(t,e):h.default.isFunction(t)?t(e):c.default.createElement(x.default,o({},e)),c.default.createElement(d.default,{className:"recharts-active-dot",key:e.key},n)},r.prototype.renderClipPath=function(){var t=this.clipPathId,e=this.state.offset,n=e.left,r=e.top,i=e.height,o=e.width;return c.default.createElement("defs",null,c.default.createElement("clipPath",{id:t},c.default.createElement("rect",{x:n,y:r,height:i,width:o})))},r.prototype.render=function(){var t=this;if(!w.validateWidthHeight(this))return null;var e=this.props,n=e.children,r=e.className,i=e.width,u=e.height,s=e.style,l=e.compact,h=a(e,["children","className","width","height","style","compact"]),d=T.filterProps(h),y={CartesianGrid:{handler:this.renderGrid,once:!0},ReferenceArea:{handler:this.renderReferenceElement},ReferenceLine:{handler:this.renderReferenceElement},ReferenceDot:{handler:this.renderReferenceElement},XAxis:{handler:this.renderXAxis},YAxis:{handler:this.renderYAxis},Brush:{handler:this.renderBrush,once:!0},Bar:{handler:this.renderGraphicChild},Line:{handler:this.renderGraphicChild},Area:{handler:this.renderGraphicChild},Radar:{handler:this.renderGraphicChild},RadialBar:{handler:this.renderGraphicChild},Scatter:{handler:this.renderGraphicChild},Pie:{handler:this.renderGraphicChild},Funnel:{handler:this.renderGraphicChild},Tooltip:{handler:this.renderCursor,once:!0},PolarGrid:{handler:this.renderPolarGrid,once:!0},PolarAngleAxis:{handler:this.renderPolarAxis},PolarRadiusAxis:{handler:this.renderPolarAxis},Customized:{handler:this.renderCustomized}};if(l)return c.default.createElement(p.default,o({},d,{width:i,height:u}),this.renderClipPath(),w.renderByOrder(n,y));var v=this.parseEventsOfWrapper();return c.default.createElement("div",o({className:f.default("recharts-wrapper",r),style:o({position:"relative",cursor:"default",width:i,height:u},s)},v,{ref:function(e){t.container=e}}),c.default.createElement(p.default,o({},d,{width:i,height:u}),this.renderClipPath(),w.renderByOrder(n,y)),this.renderLegend(),this.renderTooltip())},r.displayName=e,r.defaultProps=o({layout:"horizontal",stackOffset:"none",barCategoryGap:"10%",barGap:4,margin:{top:5,right:5,bottom:5,left:5},reverseStackOrder:!1},L),r.createDefaultState=function(t){var e=t.children,n=t.defaultShowTooltip,r=w.findChildByType(e,O.default.displayName);return{chartX:0,chartY:0,dataStartIndex:r&&r.props&&r.props.startIndex||0,dataEndIndex:r&&r.props&&r.props.endIndex||t.data&&t.data.length-1||0,activeTooltipIndex:-1,isTooltipActive:!h.default.isNil(n)&&n}},r.hasBar=function(t){return!(!t||!t.length)&&t.some((function(t){var e=w.getDisplayName(t&&t.type);return e&&e.indexOf("Bar")>=0}))},r.getDisplayedData=function(t,e,n){var r=e.graphicalItems,i=e.dataStartIndex,o=e.dataEndIndex,a=(r||[]).reduce((function(t,e){var n=e.props.data;return n&&n.length?u(t,n):t}),[]);if(a&&a.length>0)return a;if(n&&n.props&&n.props.data&&n.props.data.length>0)return n.props.data;var s=t.data;return s&&s.length&&M.isNumber(i)&&M.isNumber(o)?s.slice(i,o+1):[]},r}(c.Component)}},function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},function(t,e,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},i=this&&this.__spreadArrays||function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),i=0;for(e=0;e<n;e++)for(var o=arguments[e],a=0,u=o.length;a<u;a++,i++)r[i]=o[a];return r},o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e},a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var u=o(n(0)),s=a(n(3)),l=a(n(4)),c=a(n(26)),f=n(8),h=n(5),p=n(12),d=n(2),y=function(t){var e=t.value,n=t.formatter,r=s.default.isNil(t.children)?e:t.children;return s.default.isFunction(n)?n(r):r},v=function(t,e,n){var i,o,a=t.position,c=t.viewBox,f=t.offset,d=t.className,y=c,v=y.cx,g=y.cy,m=y.innerRadius,_=y.outerRadius,x=y.startAngle,b=y.endAngle,w=y.clockWise,A=(m+_)/2,O=function(t,e){return h.mathSign(e-t)*Math.min(Math.abs(e-t),360)}(x,b),E=O>=0?1:-1;"insideStart"===a?(i=x+E*f,o=w):"insideEnd"===a?(i=b-E*f,o=!w):"end"===a&&(i=b+E*f,o=w),o=O<=0?o:!o;var M=p.polarToCartesian(v,g,A,i),S=p.polarToCartesian(v,g,A,i+359*(o?1:-1)),k="M"+M.x+","+M.y+"\n    A"+A+","+A+",0,1,"+(o?0:1)+",\n    "+S.x+","+S.y,P=s.default.isNil(t.id)?h.uniqueId("recharts-radial-line-"):t.id;return u.default.createElement("text",r({},n,{dominantBaseline:"central",className:l.default("recharts-radial-bar-label",d)}),u.default.createElement("defs",null,u.default.createElement("path",{id:P,d:k})),u.default.createElement("textPath",{xlinkHref:"#"+P},e))},g=function(t){var e=t.viewBox,n=t.offset,r=t.position,i=e,o=i.cx,a=i.cy,u=i.innerRadius,s=i.outerRadius,l=(i.startAngle+i.endAngle)/2;if("outside"===r){var c=p.polarToCartesian(o,a,s+n,l),f=c.x;return{x:f,y:c.y,textAnchor:f>=o?"start":"end",verticalAnchor:"middle"}}if("center"===r)return{x:o,y:a,textAnchor:"middle",verticalAnchor:"middle"};if("centerTop"===r)return{x:o,y:a,textAnchor:"middle",verticalAnchor:"start"};if("centerBottom"===r)return{x:o,y:a,textAnchor:"middle",verticalAnchor:"end"};var h=(u+s)/2,d=p.polarToCartesian(o,a,h,l);return{x:d.x,y:d.y,textAnchor:"middle",verticalAnchor:"middle"}},m=function(t){var e=t.viewBox,n=t.offset,r=t.position,i=e,o=i.x,a=i.y,u=i.width,l=i.height,c=l>=0?1:-1,f=c*n,p=c>0?"end":"start",d=c>0?"start":"end",y=u>=0?1:-1,v=y*n,g=y>0?"end":"start",m=y>0?"start":"end";return"top"===r?{x:o+u/2,y:a-c*n,textAnchor:"middle",verticalAnchor:p}:"bottom"===r?{x:o+u/2,y:a+l+f,textAnchor:"middle",verticalAnchor:d}:"left"===r?{x:o-v,y:a+l/2,textAnchor:g,verticalAnchor:"middle"}:"right"===r?{x:o+u+v,y:a+l/2,textAnchor:m,verticalAnchor:"middle"}:"insideLeft"===r?{x:o+v,y:a+l/2,textAnchor:m,verticalAnchor:"middle"}:"insideRight"===r?{x:o+u-v,y:a+l/2,textAnchor:g,verticalAnchor:"middle"}:"insideTop"===r?{x:o+u/2,y:a+f,textAnchor:"middle",verticalAnchor:d}:"insideBottom"===r?{x:o+u/2,y:a+l-f,textAnchor:"middle",verticalAnchor:p}:"insideTopLeft"===r?{x:o+v,y:a+f,textAnchor:m,verticalAnchor:d}:"insideTopRight"===r?{x:o+u-v,y:a+f,textAnchor:g,verticalAnchor:d}:"insideBottomLeft"===r?{x:o+v,y:a+l-f,textAnchor:m,verticalAnchor:p}:"insideBottomRight"===r?{x:o+u-v,y:a+l-f,textAnchor:g,verticalAnchor:p}:s.default.isObject(r)&&(h.isNumber(r.x)||h.isPercent(r.x))&&(h.isNumber(r.y)||h.isPercent(r.y))?{x:o+h.getPercentValue(r.x,u),y:a+h.getPercentValue(r.y,l),textAnchor:"end",verticalAnchor:"end"}:{x:o+u/2,y:a+l/2,textAnchor:"middle",verticalAnchor:"middle"}},_=function(t){return h.isNumber(t.cx)};function x(t){var e,n=t.viewBox,i=t.position,o=t.value,a=t.children,f=t.content,h=t.className,p=void 0===h?"":h;if(!n||s.default.isNil(o)&&s.default.isNil(a)&&!u.isValidElement(f)&&!s.default.isFunction(f))return null;if(u.isValidElement(f))return u.cloneElement(f,t);if(s.default.isFunction(f)){if(e=u.createElement(f,t),u.isValidElement(e))return e}else e=y(t);var x=_(n),b=d.filterProps(t,!0);if(x&&("insideStart"===i||"insideEnd"===i||"end"===i))return v(t,e,b);var w=x?g(t):m(t);return u.default.createElement(c.default,r({className:l.default("recharts-label",p)},w,b),e)}x.displayName="Label",x.defaultProps={offset:5};var b=function(t){var e=t.cx,n=t.cy,r=t.angle,i=t.startAngle,o=t.endAngle,a=t.r,u=t.radius,s=t.innerRadius,l=t.outerRadius,c=t.x,f=t.y,p=t.top,d=t.left,y=t.width,v=t.height,g=t.clockWise;if(h.isNumber(y)&&h.isNumber(v)){if(h.isNumber(c)&&h.isNumber(f))return{x:c,y:f,width:y,height:v};if(h.isNumber(p)&&h.isNumber(d))return{x:p,y:d,width:y,height:v}}return h.isNumber(c)&&h.isNumber(f)?{x:c,y:f,width:0,height:0}:h.isNumber(e)&&h.isNumber(n)?{cx:e,cy:n,startAngle:i||r||0,endAngle:o||r||0,innerRadius:s||0,outerRadius:l||u||a||0,clockWise:g}:t.viewBox?t.viewBox:{}};x.parseViewBox=b,x.renderCallByParent=function(t,e,n){if(void 0===n&&(n=!0),!t||!t.children&&n&&!t.label)return null;var o=t.children,a=b(t),l=f.findAllByType(o,x.displayName).map((function(t,n){return u.cloneElement(t,{viewBox:e||a,key:"label-"+n})}));if(!n)return l;var c=function(t,e){return t?!0===t?u.default.createElement(x,{key:"label-implicit",viewBox:e}):h.isNumOrStr(t)?u.default.createElement(x,{key:"label-implicit",viewBox:e,value:t}):u.isValidElement(t)?t.type===x?u.cloneElement(t,{key:"label-implicit",viewBox:e}):u.default.createElement(x,{key:"label-implicit",content:t,viewBox:e}):s.default.isFunction(t)?u.default.createElement(x,{key:"label-implicit",content:t,viewBox:e}):s.default.isObject(t)?u.default.createElement(x,r({viewBox:e},t,{key:"label-implicit"})):null:null}(t.label,e||a);return i([c],l)},e.default=x},function(t,e,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var o=i(n(3)),a=n(9);e.formatAxisMap=function(t,e,n,i,o){var u=t.width,s=t.height,l=t.layout,c=Object.keys(e),f={left:n.left,leftMirror:n.left,right:u-n.right,rightMirror:u-n.right,top:n.top,topMirror:n.top,bottom:s-n.bottom,bottomMirror:s-n.bottom};return c.reduce((function(t,u){var s,c,h,p,d,y=e[u],v=y.orientation,g=y.domain,m=y.padding,_=void 0===m?{}:m,x=y.mirror,b=y.reversed,w=v+(x?"Mirror":"");c="xAxis"===i?[n.left+(_.left||0),n.left+n.width-(_.right||0)]:"yAxis"===i?"horizontal"===l?[n.top+n.height-(_.bottom||0),n.top+(_.top||0)]:[n.top+(_.top||0),n.top+n.height-(_.bottom||0)]:y.range,b&&(c=[c[1],c[0]]);var A=a.parseScale(y,o),O=A.scale,E=A.realScaleType;O.domain(g).range(c),a.checkDomainOfScale(O);var M=a.getTicksOfScale(O,r(r({},y),{realScaleType:E}));"xAxis"===i?(d="top"===v&&!x||"bottom"===v&&x,h=n.left,p=f[w]-d*y.height):"yAxis"===i&&(d="left"===v&&!x||"right"===v&&x,h=f[w]-d*y.width,p=n.top);var S=r(r(r({},y),M),{realScaleType:E,x:h,y:p,scale:O,width:"xAxis"===i?n.width:y.width,height:"yAxis"===i?n.height:y.height});return S.bandSize=a.getBandSizeOfAxis(S,M),y.hide||"xAxis"!==i?y.hide||(f[w]+=(d?-1:1)*S.width):f[w]+=(d?-1:1)*S.height,r(r({},t),((s={})[u]=S,s))}),{})},e.rectWithPoints=function(t,e){var n=t.x,r=t.y,i=e.x,o=e.y;return{x:Math.min(n,i),y:Math.min(r,o),width:Math.abs(i-n),height:Math.abs(o-r)}},e.rectWithCoords=function(t){var n=t.x1,r=t.y1,i=t.x2,o=t.y2;return e.rectWithPoints({x:n,y:r},{x:i,y:o})};var u=function(){function t(t){this.scale=t}return t.create=function(e){return new t(e)},Object.defineProperty(t.prototype,"domain",{get:function(){return this.scale.domain},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"range",{get:function(){return this.scale.range},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"rangeMin",{get:function(){return this.range()[0]},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"rangeMax",{get:function(){return this.range()[1]},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"bandwidth",{get:function(){return this.scale.bandwidth},enumerable:!0,configurable:!0}),t.prototype.apply=function(t,e){var n=void 0===e?{}:e,r=n.bandAware,i=n.position;if(void 0!==t){if(i)switch(i){case"start":return this.scale(t);case"middle":var o=this.bandwidth?this.bandwidth()/2:0;return this.scale(t)+o;case"end":o=this.bandwidth?this.bandwidth():0;return this.scale(t)+o;default:return this.scale(t)}if(r){o=this.bandwidth?this.bandwidth()/2:0;return this.scale(t)+o}return this.scale(t)}},t.prototype.isInRange=function(t){var e=this.range(),n=e[0],r=e[e.length-1];return n<=r?t>=n&&t<=r:t>=r&&t<=n},t.EPS=1e-4,t}();e.ScaleHelper=u,e.createLabeldScales=function(t){var e=Object.keys(t).reduce((function(e,n){var i;return r(r({},e),((i={})[n]=u.create(t[n]),i))}),{});return r(r({},e),{apply:function(t,n){var r=(void 0===n?{}:n).bandAware;return o.default.mapValues(t,(function(t,n){return e[n].apply(t,{bandAware:r})}))},isInRange:function(t){return o.default.every(t,(function(t,n){return e[n].isInRange(t)}))}})}},function(t,e,n){(function(e){for(var r=n(271),i="undefined"==typeof window?e:window,o=["moz","webkit"],a="AnimationFrame",u=i["request"+a],s=i["cancel"+a]||i["cancelRequest"+a],l=0;!u&&l<o.length;l++)u=i[o[l]+"Request"+a],s=i[o[l]+"Cancel"+a]||i[o[l]+"CancelRequest"+a];if(!u||!s){var c=0,f=0,h=[];u=function(t){if(0===h.length){var e=r(),n=Math.max(0,1e3/60-(e-c));c=n+e,setTimeout((function(){var t=h.slice(0);h.length=0;for(var e=0;e<t.length;e++)if(!t[e].cancelled)try{t[e].callback(c)}catch(t){setTimeout((function(){throw t}),0)}}),Math.round(n))}return h.push({handle:++f,callback:t,cancelled:!1}),f},s=function(t){for(var e=0;e<h.length;e++)h[e].handle===t&&(h[e].cancelled=!0)}}t.exports=function(t){return u.call(i,t)},t.exports.cancel=function(){s.apply(i,arguments)},t.exports.polyfill=function(t){t||(t=i),t.requestAnimationFrame=u,t.cancelAnimationFrame=s}}).call(this,n(28))},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e,n){var r=n(225),i=n(230);t.exports=function(t,e){var n=i(t,e);return r(n)?n:void 0}},function(t,e){t.exports=function(t){return null!=t&&"object"==typeof t}},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__rest||function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n},u=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e},s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var l=u(n(0)),c=s(n(322)),f=s(n(4)),h=s(n(3)),p=n(5),d=n(8),y=n(2),v=n(52),g=/[ \f\n\r\t\v\u2028\u2029]+/,m=function(t){function e(e){var n=t.call(this,e)||this;return n.getWordsWithoutCalculate=function(t){return[{words:h.default.isNil(t.children)?[]:t.children.toString().split(g)}]},n.state={wordsByLines:n.getWordsByLines(e,!0)},n}return i(e,t),e.prototype.componentDidMount=function(){this.updateWordsByLines(this.props,!0)},e.prototype.componentDidUpdate=function(t){if(t.width!==this.props.width||t.scaleToFit!==this.props.scaleToFit||t.children!==this.props.children||t.style!==this.props.style){var e=this.props.children!==t.children||this.props.style!==t.style;this.updateWordsByLines(this.props,e)}},e.prototype.updateWordsByLines=function(t,e){this.setState({wordsByLines:this.getWordsByLines(t,e)})},e.prototype.getWordsByLines=function(t,e){if((t.width||t.scaleToFit)&&!d.isSsr()){var n=void 0,r=void 0;if(e){var i=function(t){try{return{wordsWithComputedWidth:(h.default.isNil(t.children)?[]:t.children.toString().split(g)).map((function(e){return{word:e,width:v.getStringSize(e,t.style).width}})),spaceWidth:v.getStringSize(" ",t.style).width}}catch(t){return null}}(t);return i?(n=i.wordsWithComputedWidth,r=i.spaceWidth,this.calculateWordsByLines(n,r,t.width)):this.getWordsWithoutCalculate(t)}}return this.getWordsWithoutCalculate(t)},e.prototype.calculateWordsByLines=function(t,e,n){var r=this.props.scaleToFit;return(t||[]).reduce((function(t,i){var o=i.word,a=i.width,u=t[t.length-1];if(u&&(null==n||r||u.width+a+e<n))u.words.push(o),u.width+=a+e;else{var s={words:[o],width:a};t.push(s)}return t}),[])},e.prototype.render=function(){var t=this.props,e=t.dx,n=t.dy,r=t.textAnchor,i=t.verticalAnchor,u=t.scaleToFit,s=t.angle,h=t.lineHeight,d=t.capHeight,v=t.className,g=a(t,["dx","dy","textAnchor","verticalAnchor","scaleToFit","angle","lineHeight","capHeight","className"]),m=this.state.wordsByLines;if(!p.isNumOrStr(g.x)||!p.isNumOrStr(g.y))return null;var _,x=g.x+(p.isNumber(e)?e:0),b=g.y+(p.isNumber(n)?n:0);switch(i){case"start":_=c.default("calc("+d+")");break;case"middle":_=c.default("calc("+(m.length-1)/2+" * -"+h+" + ("+d+" / 2))");break;default:_=c.default("calc("+(m.length-1)+" * -"+h+")")}var w=[];if(u){var A=m[0].width,O=this.props.width;w.push("scale("+(p.isNumber(O)?O/A:1)/A+")")}return s&&w.push("rotate("+s+", "+x+", "+b+")"),w.length&&(g.transform=w.join(" ")),l.default.createElement("text",o({},y.filterProps(g,!0),{x:x,y:b,className:f.default("recharts-text",v),textAnchor:r}),m.map((function(t,e){return l.default.createElement("tspan",{x:x,dy:0===e?_:h,key:e},t.words.join(" "))})))},e.defaultProps={x:0,y:0,lineHeight:"1em",capHeight:"0.71em",scaleToFit:!1,textAnchor:"start",verticalAnchor:"end"},e}(l.Component);e.default=m},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e},u=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var s=a(n(0)),l=u(n(4)),c=n(2),f=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.render=function(){var t=this.props,e=t.cx,n=t.cy,r=t.r,i=t.className,a=l.default("recharts-dot",i);return e===+e&&n===+n&&r===+r?s.default.createElement("circle",o({},c.filterProps(this.props),c.adaptEventHandlers(this.props),{className:a,cx:e,cy:n,r:r})):null},e}(s.PureComponent);e.default=f},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){var r=n(13);t.exports=!r((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},function(t,e,n){var r=n(47),i=n(226),o=n(227),a="[object Null]",u="[object Undefined]",s=r?r.toStringTag:void 0;t.exports=function(t){return null==t?void 0===t?u:a:s&&s in Object(t)?i(t):o(t)}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.warn=function(t,e){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r]}},function(t,e,n){"use strict";function r(t){return null}Object.defineProperty(e,"__esModule",{value:!0}),r.displayName="Cell",e.default=r},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e},u=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var s=a(n(0)),l=n(92),c=u(n(4)),f=u(n(3)),h=n(2),p=n(5),d={curveBasisClosed:l.curveBasisClosed,curveBasisOpen:l.curveBasisOpen,curveBasis:l.curveBasis,curveLinearClosed:l.curveLinearClosed,curveLinear:l.curveLinear,curveMonotoneX:l.curveMonotoneX,curveMonotoneY:l.curveMonotoneY,curveNatural:l.curveNatural,curveStep:l.curveStep,curveStepAfter:l.curveStepAfter,curveStepBefore:l.curveStepBefore},y=function(t){return t.x===+t.x&&t.y===+t.y},v=function(t){return t.x},g=function(t){return t.y},m=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.getPath=function(){var t,e=this.props,n=e.type,r=e.points,i=e.baseLine,a=e.layout,u=e.connectNulls,s=function(t,e){if(f.default.isFunction(t))return t;var n="curve"+t.slice(0,1).toUpperCase()+t.slice(1);return"curveMonotone"===n&&e?d[n+("vertical"===e?"Y":"X")]:d[n]||l.curveLinear}(n,a),c=u?r.filter((function(t){return y(t)})):r;if(f.default.isArray(i)){var h=u?i.filter((function(t){return y(t)})):i,m=c.map((function(t,e){return o(o({},t),{base:h[e]})}));return(t="vertical"===a?l.area().y(g).x1(v).x0((function(t){return t.base.x})):l.area().x(v).y1(g).y0((function(t){return t.base.y}))).defined(y).curve(s),t(m)}return(t="vertical"===a&&p.isNumber(i)?l.area().y(g).x1(v).x0(i):p.isNumber(i)?l.area().x(v).y1(g).y0(i):l.line().x(v).y(g)).defined(y).curve(s),t(c)},e.prototype.render=function(){var t=this.props,e=t.className,n=t.points,r=t.path,i=t.pathRef;if(!(n&&n.length||r))return null;var a=n&&n.length?this.getPath():r;return s.default.createElement("path",o({},h.filterProps(this.props),h.adaptEventHandlers(this.props),{className:c.default("recharts-curve",e),d:a,ref:i}))},e.defaultProps={type:"linear",points:[],connectNulls:!1},e}(s.PureComponent);e.default=m},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e},u=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var s=a(n(0)),l=u(n(4)),c=u(n(11)),f=n(2),h=function(t,e,n,r,i){var o,a=Math.min(Math.abs(n)/2,Math.abs(r)/2),u=r>=0?1:-1,s=n>=0?1:-1,l=r>=0&&n>=0||r<0&&n<0?1:0;if(a>0&&i instanceof Array){for(var c=[0,0,0,0],f=0;f<4;f++)c[f]=i[f]>a?a:i[f];o="M"+t+","+(e+u*c[0]),c[0]>0&&(o+="A "+c[0]+","+c[0]+",0,0,"+l+","+(t+s*c[0])+","+e),o+="L "+(t+n-s*c[1])+","+e,c[1]>0&&(o+="A "+c[1]+","+c[1]+",0,0,"+l+",\n        "+(t+n)+","+(e+u*c[1])),o+="L "+(t+n)+","+(e+r-u*c[2]),c[2]>0&&(o+="A "+c[2]+","+c[2]+",0,0,"+l+",\n        "+(t+n-s*c[2])+","+(e+r)),o+="L "+(t+s*c[3])+","+(e+r),c[3]>0&&(o+="A "+c[3]+","+c[3]+",0,0,"+l+",\n        "+t+","+(e+r-u*c[3])),o+="Z"}else if(a>0&&i===+i&&i>0){o="M "+t+","+(e+u*(c=Math.min(a,i)))+"\n            A "+c+","+c+",0,0,"+l+","+(t+s*c)+","+e+"\n            L "+(t+n-s*c)+","+e+"\n            A "+c+","+c+",0,0,"+l+","+(t+n)+","+(e+u*c)+"\n            L "+(t+n)+","+(e+r-u*c)+"\n            A "+c+","+c+",0,0,"+l+","+(t+n-s*c)+","+(e+r)+"\n            L "+(t+s*c)+","+(e+r)+"\n            A "+c+","+c+",0,0,"+l+","+t+","+(e+r-u*c)+" Z"}else o="M "+t+","+e+" h "+n+" v "+r+" h "+-n+" Z";return o},p=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.state={totalLength:-1},e}return i(e,t),e.prototype.componentDidMount=function(){if(this.node&&this.node.getTotalLength)try{var t=this.node.getTotalLength();t&&this.setState({totalLength:t})}catch(t){}},e.prototype.render=function(){var t=this,e=this.props,n=e.x,r=e.y,i=e.width,a=e.height,u=e.radius,p=e.className,d=this.state.totalLength,y=this.props,v=y.animationEasing,g=y.animationDuration,m=y.animationBegin,_=y.isAnimationActive,x=y.isUpdateAnimationActive;if(n!==+n||r!==+r||i!==+i||a!==+a||0===i||0===a)return null;var b=l.default("recharts-rectangle",p);return x?s.default.createElement(c.default,{canBegin:d>0,from:{width:i,height:a,x:n,y:r},to:{width:i,height:a,x:n,y:r},duration:g,animationEasing:v,isActive:x},(function(e){var n=e.width,r=e.height,i=e.x,a=e.y;return s.default.createElement(c.default,{canBegin:d>0,from:"0px "+(-1===d?1:d)+"px",to:d+"px 0px",attributeName:"strokeDasharray",begin:m,duration:g,isActive:_,easing:v},s.default.createElement("path",o({},f.filterProps(t.props,!0),{className:b,d:h(i,a,n,r,u),ref:function(e){t.node=e}})))})):s.default.createElement("path",o({},f.filterProps(this.props,!0),{className:b,d:h(n,r,i,a,u)}))},e.defaultProps={x:0,y:0,width:0,height:0,radius:0,isAnimationActive:!1,isUpdateAnimationActive:!1,animationBegin:0,animationDuration:1500,animationEasing:"ease"},e}(s.PureComponent);e.default=p},function(t,e,n){"use strict";function r(t){return null}Object.defineProperty(e,"__esModule",{value:!0}),r.displayName="XAxis",r.defaultProps={allowDecimals:!0,hide:!1,orientation:"bottom",width:0,height:30,mirror:!1,xAxisId:0,tickCount:5,type:"category",domain:[0,"auto"],padding:{left:0,right:0},allowDataOverflow:!1,scale:"auto",reversed:!1,allowDuplicatedCategory:!0},e.default=r},function(t,e,n){"use strict";function r(t){return null}Object.defineProperty(e,"__esModule",{value:!0}),r.displayName="YAxis",r.defaultProps={allowDuplicatedCategory:!0,allowDecimals:!0,hide:!1,orientation:"left",width:60,height:0,mirror:!1,yAxisId:0,tickCount:5,type:"number",domain:[0,"auto"],padding:{top:0,bottom:0},allowDataOverflow:!1,scale:"auto",reversed:!1},e.default=r},function(t,e,n){var r=n(29),i=n(96),o=n(38),a=n(66),u=Object.defineProperty;e.f=r?u:function(t,e,n){if(o(t),e=a(e,!0),o(n),i)try{return u(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported");return"value"in n&&(t[e]=n.value),t}},function(t,e,n){var r=n(23);t.exports=function(t){if(!r(t))throw TypeError(String(t)+" is not an object");return t}},function(t,e,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},i=this&&this.__rest||function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n},o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var a=o(n(0)),u=o(n(4)),s=n(2);e.default=function(t){var e=t.children,n=t.width,o=t.height,l=t.viewBox,c=t.className,f=t.style,h=i(t,["children","width","height","viewBox","className","style"]),p=l||{width:n,height:o,x:0,y:0},d=u.default("recharts-surface",c);return a.default.createElement("svg",r({},s.filterProps(h,!0,!0),{className:d,width:n,height:o,style:f,viewBox:p.x+" "+p.y+" "+p.width+" "+p.height,version:"1.1"}),e)}},function(t,e,n){var r=n(29),i=n(37),o=n(95);t.exports=r?function(t,e,n){return i.f(t,e,o(1,n))}:function(t,e,n){return t[e]=n,t}},function(t,e,n){var r=n(158),i=n(159);(t.exports=function(t,e){return i[t]||(i[t]=void 0!==e?e:{})})("versions",[]).push({version:"3.4.2",mode:r?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},function(t,e){var n=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:n)(t)}},function(t,e){var n=Math.expm1,r=Math.exp;t.exports=!n||n(10)>22025.465794806718||n(10)<22025.465794806718||-2e-17!=n(-2e-17)?function(t){return 0==(t=+t)?t:t>-1e-6&&t<1e-6?t+t*t/2:r(t)-1}:n},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e},u=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var s=a(n(0)),l=n(11),c=u(n(3)),f=u(n(4)),h=u(n(320)),p=n(8),d=n(5),y="recharts-tooltip-wrapper";function v(t){return t.dataKey}var g=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.state={boxWidth:-1,boxHeight:-1},e.getTranslate=function(t){var n=t.key,r=t.tooltipDimension,i=t.viewBoxDimension,o=e.props,a=o.allowEscapeViewBox,u=o.coordinate,s=o.offset,l=o.position,c=o.viewBox;if(l&&d.isNumber(l[n]))return l[n];var f=u[n]-r-s,h=u[n]+s;return a[n]?h:u[n]+r+s>c[n]+i?Math.max(f,c[n]):Math.max(h,c[n])},e}return i(e,t),e.prototype.componentDidMount=function(){this.updateBBox()},e.prototype.componentDidUpdate=function(){this.updateBBox()},e.prototype.updateBBox=function(){var t=this.state,e=t.boxWidth,n=t.boxHeight;if(this.wrapperNode&&this.wrapperNode.getBoundingClientRect){var r=this.wrapperNode.getBoundingClientRect();(Math.abs(r.width-e)>1||Math.abs(r.height-n)>1)&&this.setState({boxWidth:r.width,boxHeight:r.height})}else-1===e&&-1===n||this.setState({boxWidth:-1,boxHeight:-1})},e.prototype.render=function(){var t,e,n,r=this,i=this.props,a=i.payload,u=i.isAnimationActive,p=i.animationDuration,g=i.animationEasing,m=i.filterNull,_=function(t,e){return!0===t?c.default.uniqBy(e,v):c.default.isFunction(t)?c.default.uniqBy(e,t):e}(i.payloadUniqBy,m&&a&&a.length?a.filter((function(t){return!c.default.isNil(t.value)})):a),x=_&&_.length,b=this.props,w=b.content,A=b.viewBox,O=b.coordinate,E=b.position,M=b.active,S=b.wrapperStyle,k=o({pointerEvents:"none",visibility:M&&x?"visible":"hidden",position:"absolute",top:0},S);if(E&&d.isNumber(E.x)&&d.isNumber(E.y))e=E.x,n=E.y;else{var P=this.state,N=P.boxWidth,C=P.boxHeight;N>0&&C>0&&O?(e=this.getTranslate({key:"x",tooltipDimension:N,viewBoxDimension:A.width}),n=this.getTranslate({key:"y",tooltipDimension:C,viewBoxDimension:A.height})):k.visibility="hidden"}k=o(o({},l.translateStyle({transform:this.props.useTranslate3d?"translate3d("+e+"px, "+n+"px, 0)":"translate("+e+"px, "+n+"px)"})),k),u&&M&&(k=o(o({},l.translateStyle({transition:"transform "+p+"ms "+g})),k));var T=f.default(y,((t={})[y+"-right"]=d.isNumber(e)&&O&&d.isNumber(O.x)&&e>=O.x,t[y+"-left"]=d.isNumber(e)&&O&&d.isNumber(O.x)&&e<O.x,t[y+"-bottom"]=d.isNumber(n)&&O&&d.isNumber(O.y)&&n>=O.y,t[y+"-top"]=d.isNumber(n)&&O&&d.isNumber(O.y)&&n<O.y,t));return s.default.createElement("div",{className:T,style:k,ref:function(t){r.wrapperNode=t}},function(t,e){return s.default.isValidElement(t)?s.default.cloneElement(t,e):c.default.isFunction(t)?s.default.createElement(t,e):s.default.createElement(h.default,o({},e))}(w,o(o({},this.props),{payload:_})))},e.displayName="Tooltip",e.defaultProps={active:!1,allowEscapeViewBox:{x:!1,y:!1},offset:10,viewBox:{x1:0,x2:0,y1:0,y2:0},coordinate:{x:0,y:0},cursorStyle:{},separator:" : ",wrapperStyle:{},contentStyle:{},itemStyle:{},labelStyle:{},cursor:!0,isAnimationActive:!p.isSsr(),animationEasing:"ease",animationDuration:400,filterNull:!0,useTranslate3d:!1},e}(s.PureComponent);e.default=g},function(t,e,n){var r=n(215),i=n(216),o=n(217),a=n(218),u=n(219);function s(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}s.prototype.clear=r,s.prototype.delete=i,s.prototype.get=o,s.prototype.has=a,s.prototype.set=u,t.exports=s},function(t,e,n){var r=n(111);t.exports=function(t,e){for(var n=t.length;n--;)if(r(t[n][0],e))return n;return-1}},function(t,e,n){var r=n(15).Symbol;t.exports=r},function(t,e,n){var r=n(24)(Object,"create");t.exports=r},function(t,e,n){var r=n(239);t.exports=function(t,e){var n=t.__data__;return r(e)?n["string"==typeof e?"string":"hash"]:n.map}},function(t,e,n){var r=n(87),i=1/0;t.exports=function(t){if("string"==typeof t||r(t))return t;var e=t+"";return"0"==e&&1/t==-i?"-0":e}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.shallowEqual=function(t,e){for(var n in t)if({}.hasOwnProperty.call(t,n)&&(!{}.hasOwnProperty.call(e,n)||t[n]!==e[n]))return!1;for(var n in e)if({}.hasOwnProperty.call(e,n)&&!{}.hasOwnProperty.call(t,n))return!1;return!0}},function(t,e,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},i=this&&this.__spreadArrays||function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),i=0;for(e=0;e<n;e++)for(var o=arguments[e],a=0,u=o.length;a<u;a++,i++)r[i]=o[a];return r};Object.defineProperty(e,"__esModule",{value:!0});var o=n(8),a={widthCache:{},cacheCount:0},u={position:"absolute",top:"-20000px",left:0,padding:0,margin:0,border:"none",whiteSpace:"pre"},s=["minWidth","maxWidth","width","minHeight","maxHeight","height","top","left","fontSize","lineHeight","padding","margin","paddingLeft","paddingRight","paddingTop","paddingBottom","marginLeft","marginRight","marginTop","marginBottom"];e.getStyleString=function(t){return Object.keys(t).reduce((function(e,n){return""+e+n.split("").reduce((function(t,e){return e===e.toUpperCase()?i(t,["-",e.toLowerCase()]):i(t,[e])}),[]).join("")+":"+(r=n,o=t[n],s.indexOf(r)>=0&&o===+o?o+"px":o)+";";var r,o}),"")},e.getStringSize=function(t,n){if(void 0===n&&(n={}),null==t||o.isSsr())return{width:0,height:0};var i=""+t,s=i+"-"+e.getStyleString(n);if(a.widthCache[s])return a.widthCache[s];try{var l=document.getElementById("recharts_measurement_span");l||((l=document.createElement("span")).setAttribute("id","recharts_measurement_span"),document.body.appendChild(l));var c=r(r({},u),n);Object.keys(c).map((function(t){return l.style[t]=c[t],t})),l.textContent=i;var f=l.getBoundingClientRect(),h={width:f.width,height:f.height};return a.widthCache[s]=h,++a.cacheCount>2e3&&(a.cacheCount=0,a.widthCache={}),h}catch(t){return{width:0,height:0}}},e.getOffset=function(t){var e=t.ownerDocument.documentElement,n={top:0,left:0};return void 0!==t.getBoundingClientRect&&(n=t.getBoundingClientRect()),{top:n.top+window.pageYOffset-e.clientTop,left:n.left+window.pageXOffset-e.clientLeft}},e.calculateChartCoordinate=function(t,e){return{chartX:Math.round(t.pageX-e.left),chartY:Math.round(t.pageY-e.top)}}},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e},u=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var s=a(n(0)),l=u(n(4)),c=n(2),f=n(12),h=n(5),p=function(t){var e=t.cx,n=t.cy,r=t.radius,i=t.angle,o=t.sign,a=t.isExternal,u=t.cornerRadius,s=t.cornerIsExternal,l=u*(a?1:-1)+r,c=Math.asin(u/l)/f.RADIAN,h=s?i:i+o*c,p=s?i-o*c:i;return{center:f.polarToCartesian(e,n,l,h),circleTangency:f.polarToCartesian(e,n,r,h),lineTangency:f.polarToCartesian(e,n,l*Math.cos(c*f.RADIAN),p),theta:c}},d=function(t){var e=t.cx,n=t.cy,r=t.innerRadius,i=t.outerRadius,o=t.startAngle,a=function(t,e){return h.mathSign(e-t)*Math.min(Math.abs(e-t),359.999)}(o,t.endAngle),u=o+a,s=f.polarToCartesian(e,n,i,o),l=f.polarToCartesian(e,n,i,u),c="M "+s.x+","+s.y+"\n    A "+i+","+i+",0,\n    "+ +(Math.abs(a)>180)+","+ +(o>u)+",\n    "+l.x+","+l.y+"\n  ";if(r>0){var p=f.polarToCartesian(e,n,r,o),d=f.polarToCartesian(e,n,r,u);c+="L "+d.x+","+d.y+"\n            A "+r+","+r+",0,\n            "+ +(Math.abs(a)>180)+","+ +(o<=u)+",\n            "+p.x+","+p.y+" Z"}else c+="L "+e+","+n+" Z";return c},y=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.render=function(){var t=this.props,e=t.cx,n=t.cy,r=t.innerRadius,i=t.outerRadius,a=t.cornerRadius,u=t.forceCornerRadius,f=t.cornerIsExternal,y=t.startAngle,v=t.endAngle,g=t.className;if(i<r||y===v)return null;var m,_=l.default("recharts-sector",g),x=i-r,b=h.getPercentValue(a,x,0,!0);return m=b>0&&Math.abs(y-v)<360?function(t){var e=t.cx,n=t.cy,r=t.innerRadius,i=t.outerRadius,o=t.cornerRadius,a=t.forceCornerRadius,u=t.cornerIsExternal,s=t.startAngle,l=t.endAngle,c=h.mathSign(l-s),f=p({cx:e,cy:n,radius:i,angle:s,sign:c,cornerRadius:o,cornerIsExternal:u}),y=f.circleTangency,v=f.lineTangency,g=f.theta,m=p({cx:e,cy:n,radius:i,angle:l,sign:-c,cornerRadius:o,cornerIsExternal:u}),_=m.circleTangency,x=m.lineTangency,b=m.theta,w=u?Math.abs(s-l)+g+b:Math.abs(s-l)-g-b;if(w<0)return a?"M "+v.x+","+v.y+"\n        a"+o+","+o+",0,0,1,"+2*o+",0\n        a"+o+","+o+",0,0,1,"+2*-o+",0\n      ":d({cx:e,cy:n,innerRadius:r,outerRadius:i,startAngle:s,endAngle:l});var A="M "+v.x+","+v.y+"\n    A"+o+","+o+",0,0,"+ +(c<0)+","+y.x+","+y.y+"\n    A"+i+","+i+",0,"+ +(w>180)+","+ +(c<0)+","+_.x+","+_.y+"\n    A"+o+","+o+",0,0,"+ +(c<0)+","+x.x+","+x.y+"\n  ";if(r>0){var O=p({cx:e,cy:n,radius:r,angle:s,sign:c,isExternal:!0,cornerRadius:o,cornerIsExternal:u}),E=O.circleTangency,M=O.lineTangency,S=O.theta,k=p({cx:e,cy:n,radius:r,angle:l,sign:-c,isExternal:!0,cornerRadius:o,cornerIsExternal:u}),P=k.circleTangency,N=k.lineTangency,C=k.theta,T=u?Math.abs(s-l)+S+C:Math.abs(s-l)-S-C;if(T<0)return A+"L"+e+","+n+"Z";A+="L"+N.x+","+N.y+"\n      A"+o+","+o+",0,0,"+ +(c<0)+","+P.x+","+P.y+"\n      A"+r+","+r+",0,"+ +(T>180)+","+ +(c>0)+","+E.x+","+E.y+"\n      A"+o+","+o+",0,0,"+ +(c<0)+","+M.x+","+M.y+"Z"}else A+="L"+e+","+n+"Z";return A}({cx:e,cy:n,innerRadius:r,outerRadius:i,cornerRadius:Math.min(b,x/2),forceCornerRadius:u,cornerIsExternal:f,startAngle:y,endAngle:v}):d({cx:e,cy:n,innerRadius:r,outerRadius:i,startAngle:y,endAngle:v}),s.default.createElement("path",o({},c.filterProps(this.props,!0),{className:_,d:m}))},e.defaultProps={cx:0,cy:0,innerRadius:0,outerRadius:0,startAngle:0,endAngle:0,cornerRadius:0,forceCornerRadius:!1,cornerIsExternal:!1},e}(s.PureComponent);e.default=y},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e},u=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var s=a(n(0)),l=u(n(4)),c=n(2),f=function(t){return t.reduce((function(t,e){return e.x===+e.x&&e.y===+e.y&&t.push([e.x,e.y]),t}),[]).join(" ")},h=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.render=function(){var t=this.props,e=t.points,n=t.className;if(!e||!e.length)return null;var r=l.default("recharts-polygon",n);return s.default.createElement("polygon",o({},c.filterProps(this.props,!0),{className:r,points:f(e)}))},e}(s.PureComponent);e.default=h},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__rest||function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n},u=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e},s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var l=u(n(0)),c=s(n(3)),f=s(n(26)),h=s(n(20)),p=s(n(7)),d=n(12),y=n(2),v=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.getTickValueCoord=function(t){var e=t.coordinate,n=this.props,r=n.angle,i=n.cx,o=n.cy;return d.polarToCartesian(i,o,e,r)},e.prototype.getTickTextAnchor=function(){var t;switch(this.props.orientation){case"left":t="end";break;case"right":t="start";break;default:t="middle"}return t},e.prototype.getViewBox=function(){var t=this.props,e=t.cx,n=t.cy,r=t.angle,i=t.ticks,o=c.default.maxBy(i,(function(t){return t.coordinate||0}));return{cx:e,cy:n,startAngle:r,endAngle:r,innerRadius:c.default.minBy(i,(function(t){return t.coordinate||0})).coordinate||0,outerRadius:o.coordinate||0}},e.prototype.renderAxisLine=function(){var t=this.props,e=t.cx,n=t.cy,r=t.angle,i=t.ticks,u=t.axisLine,s=a(t,["cx","cy","angle","ticks","axisLine"]),c=i.reduce((function(t,e){return[Math.min(t[0],e.coordinate),Math.max(t[1],e.coordinate)]}),[1/0,-1/0]),f=d.polarToCartesian(e,n,c[0],r),h=d.polarToCartesian(e,n,c[1],r),p=o(o(o(o({},y.filterProps(s)),{fill:"none"}),y.filterProps(u)),{x1:f.x,y1:f.y,x2:h.x,y2:h.y});return l.default.createElement("line",o({className:"recharts-polar-radius-axis-line"},p))},e.renderTickItem=function(t,e,n){return l.default.isValidElement(t)?l.default.cloneElement(t,e):c.default.isFunction(t)?t(e):l.default.createElement(f.default,o({},e,{className:"recharts-polar-radius-axis-tick-value"}),n)},e.prototype.renderTicks=function(){var t=this,n=this.props,r=n.ticks,i=n.tick,u=n.angle,s=n.tickFormatter,c=n.stroke,f=a(n,["ticks","tick","angle","tickFormatter","stroke"]),h=this.getTickTextAnchor(),d=y.filterProps(f),v=y.filterProps(i),g=r.map((function(n,r){var a=t.getTickValueCoord(n),f=o(o(o(o(o(o({textAnchor:h,transform:"rotate("+(90-u)+", "+a.x+", "+a.y+")"},d),{stroke:"none",fill:c}),v),{index:r}),a),{payload:n});return l.default.createElement(p.default,o({className:"recharts-polar-radius-axis-tick",key:"tick-"+r},y.adaptEventsOfChild(t.props,n,r)),e.renderTickItem(i,f,s?s(n.value,r):n.value))}));return l.default.createElement(p.default,{className:"recharts-polar-radius-axis-ticks"},g)},e.prototype.render=function(){var t=this.props,e=t.ticks,n=t.axisLine,r=t.tick;return e&&e.length?l.default.createElement(p.default,{className:"recharts-polar-radius-axis"},n&&this.renderAxisLine(),r&&this.renderTicks(),h.default.renderCallByParent(this.props,this.getViewBox())):null},e.displayName="PolarRadiusAxis",e.axisType="radiusAxis",e.defaultProps={type:"number",radiusAxisId:0,cx:0,cy:0,angle:0,orientation:"right",stroke:"#ccc",axisLine:!0,tick:!0,tickCount:5,domain:[0,"auto"],allowDataOverflow:!1,scale:"auto",allowDuplicatedCategory:!0},e}(l.PureComponent);e.default=v},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e},u=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var s=a(n(0)),l=u(n(3)),c=u(n(7)),f=u(n(27)),h=u(n(54)),p=u(n(26)),d=n(2),y=n(12),v=Math.PI/180,g=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.getTickLineCoord=function(t){var e=this.props,n=e.cx,r=e.cy,i=e.radius,o=e.orientation,a=e.tickSize||8,u=y.polarToCartesian(n,r,i,t.coordinate),s=y.polarToCartesian(n,r,i+("inner"===o?-1:1)*a,t.coordinate);return{x1:u.x,y1:u.y,x2:s.x,y2:s.y}},e.prototype.getTickTextAnchor=function(t){var e=this.props.orientation,n=Math.cos(-t.coordinate*v);return n>1e-5?"outer"===e?"start":"end":n<-1e-5?"outer"===e?"end":"start":"middle"},e.prototype.renderAxisLine=function(){var t=this.props,e=t.cx,n=t.cy,r=t.radius,i=t.axisLine,a=t.axisLineType,u=o(o(o({},d.filterProps(this.props)),{fill:"none"}),d.filterProps(i));if("circle"===a)return s.default.createElement(f.default,o({className:"recharts-polar-angle-axis-line"},u,{cx:e,cy:n,r:r}));var l=this.props.ticks.map((function(t){return y.polarToCartesian(e,n,r,t.coordinate)}));return s.default.createElement(h.default,o({className:"recharts-polar-angle-axis-line"},u,{points:l}))},e.renderTickItem=function(t,e,n){return s.default.isValidElement(t)?s.default.cloneElement(t,e):l.default.isFunction(t)?t(e):s.default.createElement(p.default,o({},e,{className:"recharts-polar-angle-axis-tick-value"}),n)},e.prototype.renderTicks=function(){var t=this,n=this.props,r=n.ticks,i=n.tick,a=n.tickLine,u=n.tickFormatter,l=n.stroke,f=d.filterProps(this.props),h=d.filterProps(i),p=o(o(o({},f),{fill:"none"}),d.filterProps(a)),y=r.map((function(n,r){var y=t.getTickLineCoord(n),v=t.getTickTextAnchor(n),g=o(o(o(o({textAnchor:v},f),{stroke:"none",fill:l}),h),{index:r,payload:n,x:y.x2,y:y.y2});return s.default.createElement(c.default,o({className:"recharts-polar-angle-axis-tick",key:"tick-"+r},d.adaptEventsOfChild(t.props,n,r)),a&&s.default.createElement("line",o({className:"recharts-polar-angle-axis-tick-line"},p,y)),i&&e.renderTickItem(i,g,u?u(n.value,r):n.value))}));return s.default.createElement(c.default,{className:"recharts-polar-angle-axis-ticks"},y)},e.prototype.render=function(){var t=this.props,e=t.ticks,n=t.radius,r=t.axisLine;return n<=0||!e||!e.length?null:s.default.createElement(c.default,{className:"recharts-polar-angle-axis"},r&&this.renderAxisLine(),this.renderTicks())},e.displayName="PolarAngleAxis",e.axisType="angleAxis",e.defaultProps={type:"category",angleAxisId:0,scale:"auto",cx:0,cy:0,domain:[0,"auto"],orientation:"outer",axisLine:!0,tickLine:!0,tickSize:8,tick:!0,hide:!1,allowDuplicatedCategory:!0},e}(s.PureComponent);e.default=g},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ifOverflowMatches=function(t,e){var n=t.alwaysShow,r=t.ifOverflow;return n&&(r="extendDomain"),r===e}},function(t,e,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},i=this&&this.__rest||function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n},o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var a=o(n(0)),u=o(n(7)),s=n(2);function l(t){var e=t.offset,n=t.layout,o=t.width,l=t.dataKey,c=t.data,f=t.dataPointFormatter,h=t.xAxis,p=t.yAxis,d=i(t,["offset","layout","width","dataKey","data","dataPointFormatter","xAxis","yAxis"]),y=s.filterProps(d),v=c.map((function(t,i){var s=f(t,l),c=s.x,d=s.y,v=s.value,g=s.errorVal;if(!g)return null;var m,_,x=[];if(Array.isArray(g)?(m=g[0],_=g[1]):m=_=g,"vertical"===n){var b=h.scale,w=d+e,A=w+o,O=w-o,E=b(v-m),M=b(v+_);x.push({x1:M,y1:A,x2:M,y2:O}),x.push({x1:E,y1:w,x2:M,y2:w}),x.push({x1:E,y1:A,x2:E,y2:O})}else if("horizontal"===n){b=p.scale;var S=c+e;E=S-o,M=S+o,A=b(v-m),O=b(v+_);x.push({x1:E,y1:O,x2:M,y2:O}),x.push({x1:S,y1:A,x2:S,y2:O}),x.push({x1:E,y1:A,x2:M,y2:A})}return a.default.createElement(u.default,r({className:"recharts-errorBar",key:"bar-"+i},y),x.map((function(t,e){return a.default.createElement("line",r({},t,{key:"line-"+e}))})))}));return a.default.createElement(u.default,{className:"recharts-errorBars"},v)}l.defaultProps={stroke:"black",strokeWidth:1.5,width:5,offset:0,layout:"horizontal"},l.displayName="ErrorBar",e.default=l},function(t,e,n){"use strict";function r(t){return null}Object.defineProperty(e,"__esModule",{value:!0}),r.displayName="ZAxis",r.defaultProps={zAxisId:0,range:[64,64],scale:"auto",type:"number"},e.default=r},function(t,e){t.exports=n},function(t,e,n){"use strict";var r=u(n(313)),i=u(n(318)),o=u(n(131)),a=u(n(128));function u(t){return t&&t.__esModule?t:{default:t}}t.exports={Transition:a.default,TransitionGroup:o.default,ReplaceTransition:i.default,CSSTransition:r.default}},function(t,e,n){var r=n(29),i=n(156),o=n(95),a=n(63),u=n(66),s=n(19),l=n(96),c=Object.getOwnPropertyDescriptor;e.f=r?c:function(t,e){if(t=a(t),e=u(e,!0),l)try{return c(t,e)}catch(t){}if(s(t,e))return o(!i.f.call(t,e),t[e])}},function(t,e,n){var r=n(157),i=n(65);t.exports=function(t){return r(i(t))}},function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},function(t,e){t.exports=function(t){if(null==t)throw TypeError("Can't call method on "+t);return t}},function(t,e,n){var r=n(23);t.exports=function(t,e){if(!r(t))return t;var n,i;if(e&&"function"==typeof(n=t.toString)&&!r(i=n.call(t)))return i;if("function"==typeof(n=t.valueOf)&&!r(i=n.call(t)))return i;if(!e&&"function"==typeof(n=t.toString)&&!r(i=n.call(t)))return i;throw TypeError("Can't convert object to primitive value")}},function(t,e,n){var r=n(10),i=n(40);t.exports=function(t,e){try{i(r,t,e)}catch(n){r[t]=e}return e}},function(t,e){t.exports={}},function(t,e,n){t.exports=n(10)},function(t,e){t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(t,e){t.exports=Math.sign||function(t){return 0==(t=+t)||t!=t?t:t<0?-1:1}},function(t,e,n){var r=n(65),i="["+n(73)+"]",o=RegExp("^"+i+i+"*"),a=RegExp(i+i+"*$"),u=function(t){return function(e){var n=String(r(e));return 1&t&&(n=n.replace(o,"")),2&t&&(n=n.replace(a,"")),n}};t.exports={start:u(1),end:u(2),trim:u(3)}},function(t,e){t.exports="\t\n\v\f\r                　\u2028\u2029\ufeff"},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e},u=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var s=a(n(0)),l=u(n(3)),c=u(n(213)),f=n(5);function h(t){return t.value}function p(t,e){return!0===t?l.default.uniqBy(e,h):l.default.isFunction(t)?l.default.uniqBy(e,t):e}var d=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.state={boxWidth:-1,boxHeight:-1},e}return i(e,t),e.getWithHeight=function(t,e){var n=t.props.layout;return"vertical"===n&&f.isNumber(t.props.height)?{height:t.props.height}:"horizontal"===n?{width:t.props.width||e}:null},e.prototype.componentDidMount=function(){this.updateBBox()},e.prototype.componentDidUpdate=function(){this.updateBBox()},e.prototype.getBBox=function(){var t=this.state,e=t.boxWidth,n=t.boxHeight;return e>=0&&n>=0?{width:e,height:n}:null},e.prototype.getDefaultPosition=function(t){var e,n,r=this.props,i=r.layout,a=r.align,u=r.verticalAlign,s=r.margin,l=r.chartWidth,c=r.chartHeight;t&&(void 0!==t.left&&null!==t.left||void 0!==t.right&&null!==t.right)||(e="center"===a&&"vertical"===i?{left:((l||0)-(this.getBBox()||{width:0}).width)/2}:"right"===a?{right:s&&s.right||0}:{left:s&&s.left||0});t&&(void 0!==t.top&&null!==t.top||void 0!==t.bottom&&null!==t.bottom)||(n="middle"===u?{top:((c||0)-(this.getBBox()||{height:0}).height)/2}:"bottom"===u?{bottom:s&&s.bottom||0}:{top:s&&s.top||0});return o(o({},e),n)},e.prototype.updateBBox=function(){var t=this.state,e=t.boxWidth,n=t.boxHeight,r=this.props.onBBoxUpdate;if(this.wrapperNode&&this.wrapperNode.getBoundingClientRect){var i=this.wrapperNode.getBoundingClientRect();(Math.abs(i.width-e)>1||Math.abs(i.height-n)>1)&&this.setState({boxWidth:i.width,boxHeight:i.height},(function(){r&&r(i)}))}else-1===e&&-1===n||this.setState({boxWidth:-1,boxHeight:-1},(function(){r&&r(null)}))},e.prototype.render=function(){var t=this,e=this.props,n=e.content,r=e.width,i=e.height,a=e.wrapperStyle,u=e.payloadUniqBy,f=e.payload,h=o(o({position:"absolute",width:r||"auto",height:i||"auto"},this.getDefaultPosition(a)),a);return s.default.createElement("div",{className:"recharts-legend-wrapper",style:h,ref:function(e){t.wrapperNode=e}},function(t,e){return s.default.isValidElement(t)?s.default.cloneElement(t,e):l.default.isFunction(t)?s.default.createElement(t,e):s.default.createElement(c.default,o({},e))}(n,o(o({},this.props),{payload:p(u,f)})))},e.displayName="Legend",e.defaultProps={iconSize:14,layout:"horizontal",align:"center",verticalAlign:"bottom"},e}(s.PureComponent);e.default=d},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e},u=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var s=a(n(0)),l=n(92),c=u(n(4)),f=n(2),h={symbolCircle:l.symbolCircle,symbolCross:l.symbolCross,symbolDiamond:l.symbolDiamond,symbolSquare:l.symbolSquare,symbolStar:l.symbolStar,symbolTriangle:l.symbolTriangle,symbolWye:l.symbolWye},p=Math.PI/180,d=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.getPath=function(){var t=this.props,e=t.size,n=t.sizeType,r=t.type,i=function(t){var e="symbol"+t.slice(0,1).toUpperCase()+t.slice(1);return h[e]||l.symbolCircle}(r);return l.symbol().type(i).size(function(t,e,n){if("area"===e)return t;switch(n){case"cross":return 5*t*t/9;case"diamond":return.5*t*t/Math.sqrt(3);case"square":return t*t;case"star":var r=18*p;return 1.25*t*t*(Math.tan(r)-Math.tan(2*r)*Math.pow(Math.tan(r),2));case"triangle":return Math.sqrt(3)*t*t/4;case"wye":return(21-10*Math.sqrt(3))*t*t/8;default:return Math.PI*t*t/4}}(e,n,r))()},e.prototype.render=function(){var t=this.props,e=t.className,n=t.cx,r=t.cy,i=t.size;return n===+n&&r===+r&&i===+i?s.default.createElement("path",o({},f.filterProps(this.props,!0),{className:c.default("recharts-symbols",e),transform:"translate("+n+", "+r+")",d:this.getPath()})):null},e.defaultProps={type:"circle",size:64,sizeType:"area"},e}(s.PureComponent);e.default=d},function(t,e,n){var r=n(214),i=n(25);t.exports=function t(e,n,o,a,u){return e===n||(null==e||null==n||!i(e)&&!i(n)?e!=e&&n!=n:r(e,n,o,a,t,u))}},function(t,e,n){var r=n(24)(n(15),"Map");t.exports=r},function(t,e){t.exports=function(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}},function(t,e,n){var r=n(231),i=n(238),o=n(240),a=n(241),u=n(242);function s(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}s.prototype.clear=r,s.prototype.delete=i,s.prototype.get=o,s.prototype.has=a,s.prototype.set=u,t.exports=s},function(t,e,n){var r=n(256),i=n(262),o=n(83);t.exports=function(t){return o(t)?r(t):i(t)}},function(t,e){var n=9007199254740991;t.exports=function(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=n}},function(t,e,n){var r=n(112),i=n(82);t.exports=function(t){return null!=t&&i(t.length)&&!r(t)}},function(t,e){t.exports=function(t,e){for(var n=-1,r=null==t?0:t.length,i=Array(r);++n<r;)i[n]=e(t[n],n,t);return i}},function(t,e){t.exports=function(t){return t}},function(t,e,n){var r=n(16),i=n(87),o=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,a=/^\w*$/;t.exports=function(t,e){if(r(t))return!1;var n=typeof t;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=t&&!i(t))||(a.test(t)||!o.test(t)||null!=e&&t in Object(e))}},function(t,e,n){var r=n(30),i=n(25),o="[object Symbol]";t.exports=function(t){return"symbol"==typeof t||i(t)&&r(t)==o}},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__rest||function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n},u=this&&this.__spreadArrays||function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),i=0;for(e=0;e<n;e++)for(var o=arguments[e],a=0,u=o.length;a<u;a++,i++)r[i]=o[a];return r},s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e},l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var c=s(n(0)),f=l(n(11)),h=l(n(4)),p=l(n(3)),d=l(n(33)),y=l(n(27)),v=l(n(7)),g=l(n(17)),m=l(n(58)),_=n(5),x=n(8),b=n(9),w=n(2),A=function(t){function e(){var n=null!==t&&t.apply(this,arguments)||this;return n.state={isAnimationFinished:!0,totalLength:0},n.getStrokeDasharray=function(t,n,r){for(var i=r.reduce((function(t,e){return t+e})),o=Math.floor(t/i),a=t%i,s=n-t,l=[],c=0,f=0;;f+=r[c],++c)if(f+r[c]>a){l=u(r.slice(0,c),[a-f]);break}var h=l.length%2==0?[0,s]:[s];return u(e.repeat(r,o),l,h).map((function(t){return t+"px"})).join(", ")},n.id=_.uniqueId("recharts-line-"),n.cachePrevData=function(t){n.setState({prevPoints:t})},n.pathRef=function(t){n.mainCurve=t},n.handleAnimationEnd=function(){n.setState({isAnimationFinished:!0}),n.props.onAnimationEnd&&n.props.onAnimationEnd()},n.handleAnimationStart=function(){n.setState({isAnimationFinished:!1}),n.props.onAnimationStart&&n.props.onAnimationStart()},n}return i(e,t),e.prototype.componentDidMount=function(){if(this.props.isAnimationActive){var t=this.getTotalLength();this.setState({totalLength:t})}},e.prototype.UNSAFE_componentWillReceiveProps=function(t){var e=this.props,n=e.animationId,r=e.points;t.animationId!==n&&this.cachePrevData(r)},e.prototype.getTotalLength=function(){var t=this.mainCurve;try{return t&&t.getTotalLength&&t.getTotalLength()||0}catch(t){return 0}},e.repeat=function(t,e){for(var n=t.length%2!=0?u(t,[0]):t,r=[],i=0;i<e;++i)r=u(r,n);return r},e.prototype.renderErrorBar=function(){if(this.props.isAnimationActive&&!this.state.isAnimationFinished)return null;var t=this.props,e=t.points,n=t.xAxis,r=t.yAxis,i=t.layout,o=t.children,a=x.findAllByType(o,m.default.displayName);if(!a)return null;function u(t,e){return{x:t.x,y:t.y,value:t.value,errorVal:b.getValueByDataKey(t.payload,e)}}return a.map((function(t,o){return c.default.cloneElement(t,{key:"bar-"+o,data:e,xAxis:n,yAxis:r,layout:i,dataPointFormatter:u})}))},e.renderDotItem=function(t,e){var n;if(c.default.isValidElement(t))n=c.default.cloneElement(t,e);else if(p.default.isFunction(t))n=t(e);else{var r=h.default("recharts-line-dot",t?t.className:"");n=c.default.createElement(y.default,o({},e,{className:r}))}return n},e.prototype.renderDots=function(t,n){if(this.props.isAnimationActive&&!this.state.isAnimationFinished)return null;var r=this.props,i=r.dot,a=r.points,u=r.dataKey,s=w.filterProps(this.props),l=w.filterProps(i,!0),f=a.map((function(t,n){var r=o(o(o({key:"dot-"+n,r:3},s),l),{value:t.value,dataKey:u,cx:t.x,cy:t.y,index:n,payload:t.payload});return e.renderDotItem(i,r)})),h={clipPath:t?"url(#clipPath-"+n+")":null};return c.default.createElement(v.default,o({className:"recharts-line-dots",key:"dots"},h),f)},e.prototype.renderCurveStatically=function(t,e,n,r){var i=this.props,u=i.type,s=i.layout,l=i.connectNulls,f=(i.ref,a(i,["type","layout","connectNulls","ref"])),h=o(o(o(o({},w.filterProps(f,!0)),{fill:"none",className:"recharts-line-curve",clipPath:e?"url(#clipPath-"+n+")":null,points:t}),r),{type:u,layout:s,connectNulls:l});return c.default.createElement(d.default,o({},h,{pathRef:this.pathRef}))},e.prototype.renderCurveWithAnimation=function(t,e){var n=this,r=this.props,i=r.points,a=r.strokeDasharray,u=r.isAnimationActive,s=r.animationBegin,l=r.animationDuration,h=r.animationEasing,p=r.animationId,d=r.animateNewValues,y=r.width,v=r.height,g=this.state,m=g.prevPoints,x=g.totalLength;return c.default.createElement(f.default,{begin:s,duration:l,isActive:u,easing:h,from:{t:0},to:{t:1},key:"line-"+p,onAnimationEnd:this.handleAnimationEnd,onAnimationStart:this.handleAnimationStart},(function(r){var u=r.t;if(m){var s=m.length/i.length,l=i.map((function(t,e){var n=Math.floor(e*s);if(m[n]){var r=m[n],i=_.interpolateNumber(r.x,t.x),a=_.interpolateNumber(r.y,t.y);return o(o({},t),{x:i(u),y:a(u)})}if(d){i=_.interpolateNumber(2*y,t.x),a=_.interpolateNumber(v/2,t.y);return o(o({},t),{x:i(u),y:a(u)})}return o(o({},t),{x:t.x,y:t.y})}));return n.renderCurveStatically(l,t,e)}var c,f=_.interpolateNumber(0,x)(u);if(a){var h=(""+a).split(/[,\s]+/gim).map((function(t){return parseFloat(t)}));c=n.getStrokeDasharray(f,x,h)}else c=f+"px "+(x-f)+"px";return n.renderCurveStatically(i,t,e,{strokeDasharray:c})}))},e.prototype.renderCurve=function(t,e){var n=this.props,r=n.points,i=n.isAnimationActive,o=this.state,a=o.prevPoints,u=o.totalLength;return i&&r&&r.length&&(!a&&u>0||!p.default.isEqual(a,r))?this.renderCurveWithAnimation(t,e):this.renderCurveStatically(r,t,e)},e.prototype.render=function(){var t=this.props,e=t.hide,n=t.dot,r=t.points,i=t.className,o=t.xAxis,a=t.yAxis,u=t.top,s=t.left,l=t.width,f=t.height,d=t.isAnimationActive,y=t.id;if(e||!r||!r.length)return null;var m=this.state.isAnimationFinished,_=1===r.length,x=h.default("recharts-line",i),b=o&&o.allowDataOverflow||a&&a.allowDataOverflow,w=p.default.isNil(y)?this.id:y;return c.default.createElement(v.default,{className:x},b?c.default.createElement("defs",null,c.default.createElement("clipPath",{id:"clipPath-"+w},c.default.createElement("rect",{x:s,y:u,width:l,height:f}))):null,!_&&this.renderCurve(b,w),this.renderErrorBar(),(_||n)&&this.renderDots(b,w),(!d||m)&&g.default.renderCallByParent(this.props,r))},e.displayName="Line",e.defaultProps={xAxisId:0,yAxisId:0,connectNulls:!1,activeDot:!0,dot:!0,legendType:"line",stroke:"#3182bd",strokeWidth:1,fill:"#fff",points:[],isAnimationActive:!x.isSsr(),animateNewValues:!0,animationBegin:0,animationDuration:1500,animationEasing:"ease",hide:!1},e.getComposedData=function(t){var e=t.props,n=t.xAxis,r=t.yAxis,i=t.xAxisTicks,a=t.yAxisTicks,u=t.dataKey,s=t.bandSize,l=t.displayedData,c=t.offset,f=e.layout,h=l.map((function(t,e){var o=b.getValueByDataKey(t,u);return"horizontal"===f?{x:b.getCateCoordinateOfLine({axis:n,ticks:i,bandSize:s,entry:t,index:e}),y:p.default.isNil(o)?null:r.scale(o),value:o,payload:t}:{x:p.default.isNil(o)?null:n.scale(o),y:b.getCateCoordinateOfLine({axis:r,ticks:a,bandSize:s,entry:t,index:e}),value:o,payload:t}}));return o({points:h,layout:f},c)},e}(c.PureComponent);e.default=A},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__rest||function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n},u=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e},s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var l=u(n(0)),c=s(n(4)),f=s(n(11)),h=s(n(3)),p=s(n(33)),d=s(n(27)),y=s(n(7)),v=s(n(17)),g=n(8),m=n(5),_=n(9),x=n(2),b=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.state={isAnimationFinished:!0},e.id=m.uniqueId("recharts-area-"),e.cachePrevData=function(t,n){e.setState({prevPoints:t,prevBaseLine:n})},e.handleAnimationEnd=function(){var t=e.props.onAnimationEnd;e.setState({isAnimationFinished:!0}),h.default.isFunction(t)&&t()},e.handleAnimationStart=function(){var t=e.props.onAnimationStart;e.setState({isAnimationFinished:!1}),h.default.isFunction(t)&&t()},e}return i(e,t),e.prototype.UNSAFE_componentWillReceiveProps=function(t){var e=this.props,n=e.animationId,r=e.points,i=e.baseLine;t.animationId!==n&&this.cachePrevData(r,i)},e.prototype.renderDots=function(t,n){var r=this.props.isAnimationActive,i=this.state.isAnimationFinished;if(r&&!i)return null;var a=this.props,u=a.dot,s=a.points,c=a.dataKey,f=x.filterProps(this.props),h=x.filterProps(u,!0),p=s.map((function(t,n){var r=o(o(o({key:"dot-"+n,r:3},f),h),{dataKey:c,cx:t.x,cy:t.y,index:n,value:t.value,payload:t.payload});return e.renderDotItem(u,r)})),d={clipPath:t?"url(#clipPath-"+n+")":null};return l.default.createElement(y.default,o({className:"recharts-area-dots"},d),p)},e.prototype.renderHorizontalRect=function(t){var e=this.props,n=e.baseLine,r=e.points,i=e.strokeWidth,o=r[0].x,a=r[r.length-1].x,u=t*Math.abs(o-a),s=h.default.max(r.map((function(t){return t.y||0})));return m.isNumber(n)&&"number"==typeof n?s=Math.max(n,s):n&&h.default.isArray(n)&&n.length&&(s=Math.max(h.default.max(n.map((function(t){return t.y||0}))),s)),m.isNumber(s)?l.default.createElement("rect",{x:o<a?o:o-u,y:0,width:u,height:Math.floor(s+(i?parseInt(""+i,10):1))}):null},e.prototype.renderVerticalRect=function(t){var e=this.props,n=e.baseLine,r=e.points,i=e.strokeWidth,o=r[0].y,a=r[r.length-1].y,u=t*Math.abs(o-a),s=h.default.max(r.map((function(t){return t.x||0})));return m.isNumber(n)&&"number"==typeof n?s=Math.max(n,s):n&&h.default.isArray(n)&&n.length&&(s=Math.max(h.default.max(n.map((function(t){return t.x||0}))),s)),m.isNumber(s)?l.default.createElement("rect",{x:0,y:o<a?o:o-u,width:s+(i?parseInt(""+i,10):1),height:Math.floor(u)}):null},e.prototype.renderClipRect=function(t){return"vertical"===this.props.layout?this.renderVerticalRect(t):this.renderHorizontalRect(t)},e.prototype.renderAreaStatically=function(t,e,n,r){var i=this.props,u=i.layout,s=i.type,c=i.stroke,f=i.connectNulls,h=i.isRange,d=(i.ref,a(i,["layout","type","stroke","connectNulls","isRange","ref"]));return l.default.createElement(y.default,{clipPath:n?"url(#clipPath-"+r+")":null},l.default.createElement(p.default,o({},x.filterProps(d,!0),{points:t,connectNulls:f,type:s,baseLine:e,layout:u,stroke:"none",className:"recharts-area-area"})),"none"!==c&&l.default.createElement(p.default,o({},x.filterProps(this.props),{className:"recharts-area-curve",layout:u,type:s,connectNulls:f,fill:"none",points:t})),"none"!==c&&h&&l.default.createElement(p.default,o({},x.filterProps(this.props),{className:"recharts-area-curve",layout:u,type:s,connectNulls:f,fill:"none",points:e})))},e.prototype.renderAreaWithAnimation=function(t,e){var n=this,r=this.props,i=r.points,a=r.baseLine,u=r.isAnimationActive,s=r.animationBegin,c=r.animationDuration,p=r.animationEasing,d=r.animationId,v=this.state,g=v.prevPoints,_=v.prevBaseLine;return l.default.createElement(f.default,{begin:s,duration:c,isActive:u,easing:p,from:{t:0},to:{t:1},key:"area-"+d,onAnimationEnd:this.handleAnimationEnd,onAnimationStart:this.handleAnimationStart},(function(r){var u=r.t;if(g){var s=g.length/i.length,c=i.map((function(t,e){var n=Math.floor(e*s);if(g[n]){var r=g[n],i=m.interpolateNumber(r.x,t.x),a=m.interpolateNumber(r.y,t.y);return o(o({},t),{x:i(u),y:a(u)})}return t})),f=void 0;if(m.isNumber(a)&&"number"==typeof a)f=m.interpolateNumber(_,a)(u);else if(h.default.isNil(a)||h.default.isNaN(a)){f=m.interpolateNumber(_,0)(u)}else f=a.map((function(t,e){var n=Math.floor(e*s);if(_[n]){var r=_[n],i=m.interpolateNumber(r.x,t.x),a=m.interpolateNumber(r.y,t.y);return o(o({},t),{x:i(u),y:a(u)})}return t}));return n.renderAreaStatically(c,f,t,e)}return l.default.createElement(y.default,null,l.default.createElement("defs",null,l.default.createElement("clipPath",{id:"animationClipPath-"+e},n.renderClipRect(u))),l.default.createElement(y.default,{clipPath:"url(#animationClipPath-"+e+")"},n.renderAreaStatically(i,a,t,e)))}))},e.prototype.renderArea=function(t,e){var n=this.props,r=n.points,i=n.baseLine,o=n.isAnimationActive,a=this.state,u=a.prevPoints,s=a.prevBaseLine,l=a.totalLength;return o&&r&&r.length&&(!u&&l>0||!h.default.isEqual(u,r)||!h.default.isEqual(s,i))?this.renderAreaWithAnimation(t,e):this.renderAreaStatically(r,i,t,e)},e.prototype.render=function(){var t=this.props,e=t.hide,n=t.dot,r=t.points,i=t.className,o=t.top,a=t.left,u=t.xAxis,s=t.yAxis,f=t.width,p=t.height,d=t.isAnimationActive,g=t.id;if(e||!r||!r.length)return null;var m=this.state.isAnimationFinished,_=1===r.length,x=c.default("recharts-area",i),b=u&&u.allowDataOverflow||s&&s.allowDataOverflow,w=h.default.isNil(g)?this.id:g;return l.default.createElement(y.default,{className:x},b?l.default.createElement("defs",null,l.default.createElement("clipPath",{id:"clipPath-"+w},l.default.createElement("rect",{x:a,y:o,width:f,height:Math.floor(p)}))):null,_?null:this.renderArea(b,w),(n||_)&&this.renderDots(b,w),(!d||m)&&v.default.renderCallByParent(this.props,r))},e.displayName="Area",e.defaultProps={stroke:"#3182bd",fill:"#3182bd",fillOpacity:.6,xAxisId:0,yAxisId:0,legendType:"line",connectNulls:!1,points:[],dot:!1,activeDot:!0,hide:!1,isAnimationActive:!g.isSsr(),animationBegin:0,animationDuration:1500,animationEasing:"ease"},e.getBaseValue=function(t,e,n){var r=t.layout,i=t.baseValue;if(m.isNumber(i)&&"number"==typeof i)return i;var o="horizontal"===r?n:e,a=o.scale.domain();if("number"===o.type){var u=Math.max(a[0],a[1]),s=Math.min(a[0],a[1]);return"dataMin"===i?s:"dataMax"===i?u:u<0?u:Math.max(Math.min(a[0],a[1]),0)}return"dataMin"===i?a[0]:"dataMax"===i?a[1]:a[0]},e.getComposedData=function(t){var n,r=t.props,i=t.xAxis,a=t.yAxis,u=t.xAxisTicks,s=t.yAxisTicks,l=t.bandSize,c=t.dataKey,f=t.stackedData,p=t.dataStartIndex,d=t.displayedData,y=t.offset,v=r.layout,g=f&&f.length,m=e.getBaseValue(r,i,a),x=!1,b=d.map((function(t,e){var n,r=_.getValueByDataKey(t,c);g?n=f[p+e]:(n=r,h.default.isArray(n)?x=!0:n=[m,n]);var o=h.default.isNil(n[1])||g&&h.default.isNil(r);return"horizontal"===v?{x:_.getCateCoordinateOfLine({axis:i,ticks:u,bandSize:l,entry:t,index:e}),y:o?null:a.scale(n[1]),value:n,payload:t}:{x:o?null:i.scale(n[1]),y:_.getCateCoordinateOfLine({axis:a,ticks:s,bandSize:l,entry:t,index:e}),value:n,payload:t}}));return n=g||x?b.map((function(t){return"horizontal"===v?{x:t.x,y:h.default.isNil(h.default.get(t,"value[0]"))?null:a.scale(h.default.get(t,"value[0]"))}:{x:h.default.isNil(h.default.get(t,"value[0]"))?null:i.scale(h.default.get(t,"value[0]")),y:t.y}})):"horizontal"===v?a.scale(m):i.scale(m),o({points:b,baseLine:n,layout:v,isRange:x},y)},e.renderDotItem=function(t,e){return l.default.isValidElement(t)?l.default.cloneElement(t,e):h.default.isFunction(t)?t(e):l.default.createElement(d.default,o({},e,{className:"recharts-area-dot"}))},e}(l.PureComponent);e.default=b},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__rest||function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n},u=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e},s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var l=u(n(0)),c=s(n(4)),f=s(n(11)),h=s(n(3)),p=s(n(34)),d=s(n(7)),y=s(n(58)),v=s(n(32)),g=s(n(17)),m=n(5),_=n(8),x=n(9),b=n(2),w=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.state={isAnimationFinished:!1},e.id=m.uniqueId("recharts-bar-"),e.cachePrevData=function(t){e.setState({prevData:t})},e.handleAnimationEnd=function(){var t=e.props.onAnimationEnd;e.setState({isAnimationFinished:!0}),t&&t()},e.handleAnimationStart=function(){var t=e.props.onAnimationStart;e.setState({isAnimationFinished:!1}),t&&t()},e}return i(e,t),e.prototype.UNSAFE_componentWillReceiveProps=function(t){var e=this.props,n=e.animationId,r=e.data;t.animationId!==n&&this.cachePrevData(r)},e.renderRectangle=function(t,e){return l.default.isValidElement(t)?l.default.cloneElement(t,e):h.default.isFunction(t)?t(e):l.default.createElement(p.default,o({},e))},e.prototype.renderRectanglesStatically=function(t){var n=this,r=this.props.shape,i=b.filterProps(this.props);return t&&t.map((function(t,a){var u=o(o(o({},i),t),{index:a});return l.default.createElement(d.default,o({className:"recharts-bar-rectangle"},b.adaptEventsOfChild(n.props,t,a),{key:"rectangle-"+a}),e.renderRectangle(r,u))}))},e.prototype.renderRectanglesWithAnimation=function(){var t=this,e=this.props,n=e.data,r=e.layout,i=e.isAnimationActive,a=e.animationBegin,u=e.animationDuration,s=e.animationEasing,c=e.animationId,h=this.state.prevData;return l.default.createElement(f.default,{begin:a,duration:u,isActive:i,easing:s,from:{t:0},to:{t:1},key:"bar-"+c,onAnimationEnd:this.handleAnimationEnd,onAnimationStart:this.handleAnimationStart},(function(e){var i=e.t,a=n.map((function(t,e){var n=h&&h[e];if(n){var a=m.interpolateNumber(n.x,t.x),u=m.interpolateNumber(n.y,t.y),s=m.interpolateNumber(n.width,t.width),l=m.interpolateNumber(n.height,t.height);return o(o({},t),{x:a(i),y:u(i),width:s(i),height:l(i)})}if("horizontal"===r){var c=(l=m.interpolateNumber(0,t.height))(i);return o(o({},t),{y:t.y+t.height-c,height:c})}var f=m.interpolateNumber(0,t.width)(i);return o(o({},t),{width:f})}));return l.default.createElement(d.default,null,t.renderRectanglesStatically(a))}))},e.prototype.renderRectangles=function(){var t=this.props,e=t.data,n=t.isAnimationActive,r=this.state.prevData;return!(n&&e&&e.length)||r&&h.default.isEqual(r,e)?this.renderRectanglesStatically(e):this.renderRectanglesWithAnimation()},e.prototype.renderBackground=function(){var t=this,n=this.props.data,r=b.filterProps(this.props.background);return n.map((function(n,i){n.value;var u=n.background,s=a(n,["value","background"]);if(!u)return null;var l=o(o(o(o(o(o({},s),{fill:"#eee"}),u),r),b.adaptEventsOfChild(t.props,n,i)),{index:i,key:"background-bar-"+i,className:"recharts-bar-background-rectangle"});return e.renderRectangle(t.props.background,l)}))},e.prototype.renderErrorBar=function(){if(this.props.isAnimationActive&&!this.state.isAnimationFinished)return null;var t=this.props,e=t.data,n=t.xAxis,r=t.yAxis,i=t.layout,o=t.children,a=_.findAllByType(o,y.default.displayName);if(!a)return null;var u="vertical"===i?e[0].height/2:e[0].width/2;function s(t,e){return{x:t.x,y:t.y,value:t.value,errorVal:x.getValueByDataKey(t,e)}}return a.map((function(t,o){return l.default.cloneElement(t,{key:"error-bar-"+o,data:e,xAxis:n,yAxis:r,layout:i,offset:u,dataPointFormatter:s})}))},e.prototype.render=function(){var t=this.props,e=t.hide,n=t.data,r=t.className,i=t.xAxis,o=t.yAxis,a=t.left,u=t.top,s=t.width,f=t.height,p=t.isAnimationActive,y=t.background,v=t.id;if(e||!n||!n.length)return null;var m=this.state.isAnimationFinished,_=c.default("recharts-bar",r),x=i&&i.allowDataOverflow||o&&o.allowDataOverflow,b=h.default.isNil(v)?this.id:v;return l.default.createElement(d.default,{className:_},x?l.default.createElement("defs",null,l.default.createElement("clipPath",{id:"clipPath-"+b},l.default.createElement("rect",{x:a,y:u,width:s,height:f}))):null,l.default.createElement(d.default,{className:"recharts-bar-rectangles",clipPath:x?"url(#clipPath-"+b+")":null},y?this.renderBackground():null,this.renderRectangles()),this.renderErrorBar(),(!p||m)&&g.default.renderCallByParent(this.props,n))},e.displayName="Bar",e.defaultProps={xAxisId:0,yAxisId:0,legendType:"rect",minPointSize:0,hide:!1,data:[],layout:"vertical",isAnimationActive:!_.isSsr(),animationBegin:0,animationDuration:400,animationEasing:"ease"},e.getComposedData=function(t){var e=t.props,n=t.item,r=t.barPosition,i=t.bandSize,a=t.xAxis,u=t.yAxis,s=t.xAxisTicks,l=t.yAxisTicks,c=t.stackedData,f=t.dataStartIndex,p=t.displayedData,d=t.offset,y=x.findPositionOfBar(r,n);if(!y)return null;var g=e.layout,b=n.props,w=b.dataKey,A=b.children,O=b.minPointSize,E="horizontal"===g?u:a,M=c?E.scale.domain():null,S=x.getBaseValueOfBar({numericAxis:E}),k=_.findAllByType(A,v.default.displayName),P=p.map((function(t,e){var n,r,p,d,v,_,b;(c?n=x.truncateByDomain(c[f+e],M):(n=x.getValueByDataKey(t,w),h.default.isArray(n)||(n=[S,n])),"horizontal"===g)?(r=x.getCateCoordinateOfBar({axis:a,ticks:s,bandSize:i,offset:y.offset,entry:t,index:e}),p=u.scale(n[1]),d=y.size,v=u.scale(n[0])-u.scale(n[1]),_={x:r,y:u.y,width:d,height:u.height},Math.abs(O)>0&&Math.abs(v)<Math.abs(O)&&(p-=b=m.mathSign(v||O)*(Math.abs(O)-Math.abs(v)),v+=b)):(r=a.scale(n[0]),p=x.getCateCoordinateOfBar({axis:u,ticks:l,bandSize:i,offset:y.offset,entry:t,index:e}),d=a.scale(n[1])-a.scale(n[0]),v=y.size,_={x:a.x,y:p,width:a.width,height:v},Math.abs(O)>0&&Math.abs(d)<Math.abs(O)&&(d+=b=m.mathSign(d||O)*(Math.abs(O)-Math.abs(d))));return o(o(o({},t),{x:r,y:p,width:d,height:v,value:c?n:n[1],payload:t,background:_}),k&&k[e]&&k[e].props)}));return o({data:P,layout:g},d)},e}(l.PureComponent);e.default=w},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e},u=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var s=a(n(0)),l=u(n(11)),c=u(n(4)),f=u(n(3)),h=u(n(7)),p=u(n(17)),d=n(8),y=u(n(59)),v=u(n(33)),g=u(n(76)),m=u(n(58)),_=u(n(32)),x=n(5),b=n(9),w=n(2),A=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.state={isAnimationFinished:!1},e.cachePrevPoints=function(t){e.setState({prevPoints:t})},e.handleAnimationEnd=function(){e.setState({isAnimationFinished:!0})},e.handleAnimationStart=function(){e.setState({isAnimationFinished:!1})},e.id=x.uniqueId("recharts-scatter-"),e}return i(e,t),e.prototype.UNSAFE_componentWillReceiveProps=function(t){var e=this.props,n=e.animationId,r=e.points;t.animationId!==n&&this.cachePrevPoints(r)},e.renderSymbolItem=function(t,e){var n;return s.default.isValidElement(t)?n=s.default.cloneElement(t,e):f.default.isFunction(t)?n=t(e):"string"==typeof t&&(n=s.default.createElement(g.default,o({},e,{type:t}))),n},e.prototype.renderSymbolsStatically=function(t){var n=this,r=this.props,i=r.shape,a=r.activeShape,u=r.activeIndex,l=w.filterProps(this.props);return t.map((function(t,r){var c=o(o({key:"symbol-"+r},l),t);return s.default.createElement(h.default,o({className:"recharts-scatter-symbol"},w.adaptEventsOfChild(n.props,t,r),{key:"symbol-"+r}),e.renderSymbolItem(u===r?a:i,c))}))},e.prototype.renderSymbolsWithAnimation=function(){var t=this,e=this.props,n=e.points,r=e.isAnimationActive,i=e.animationBegin,a=e.animationDuration,u=e.animationEasing,c=e.animationId,f=this.state.prevPoints;return s.default.createElement(l.default,{begin:i,duration:a,isActive:r,easing:u,from:{t:0},to:{t:1},key:"pie-"+c,onAnimationEnd:this.handleAnimationEnd,onAnimationStart:this.handleAnimationStart},(function(e){var r=e.t,i=n.map((function(t,e){var n=f&&f[e];if(n){var i=x.interpolateNumber(n.cx,t.cx),a=x.interpolateNumber(n.cy,t.cy),u=x.interpolateNumber(n.size,t.size);return o(o({},t),{cx:i(r),cy:a(r),size:u(r)})}var s=x.interpolateNumber(0,t.size);return o(o({},t),{size:s(r)})}));return s.default.createElement(h.default,null,t.renderSymbolsStatically(i))}))},e.prototype.renderSymbols=function(){var t=this.props,e=t.points,n=t.isAnimationActive,r=this.state.prevPoints;return!(n&&e&&e.length)||r&&f.default.isEqual(r,e)?this.renderSymbolsStatically(e):this.renderSymbolsWithAnimation()},e.prototype.renderErrorBar=function(){if(this.props.isAnimationActive&&!this.state.isAnimationFinished)return null;var t=this.props,e=t.points,n=t.xAxis,r=t.yAxis,i=t.children,o=d.findAllByType(i,m.default.displayName);if(!o)return null;function a(t,e){return{x:t.cx,y:t.cy,value:+t.node.y,errorVal:b.getValueByDataKey(t,e)}}function u(t,e){return{x:t.cx,y:t.cy,value:+t.node.x,errorVal:b.getValueByDataKey(t,e)}}return o.map((function(t,i){var o=t.props.direction;return s.default.cloneElement(t,{key:i,data:e,xAxis:n,yAxis:r,layout:"x"===o?"vertical":"horizontal",dataPointFormatter:"x"===o?u:a})}))},e.prototype.renderLine=function(){var t,e,n=this.props,r=n.points,i=n.line,a=n.lineType,u=n.lineJointType,l=w.filterProps(this.props),c=w.filterProps(i);if("joint"===a)t=r.map((function(t){return{x:t.cx,y:t.cy}}));else if("fitting"===a){var p=x.getLinearRegression(r),d=p.xmin,y=p.xmax,g=p.a,m=p.b,_=function(t){return g*t+m};t=[{x:d,y:_(d)},{x:y,y:_(y)}]}var b=o(o(o(o({},l),{fill:"none",stroke:l&&l.fill}),c),{points:t});return e=s.default.isValidElement(i)?s.default.cloneElement(i,b):f.default.isFunction(i)?i(b):s.default.createElement(v.default,o({},b,{type:u})),s.default.createElement(h.default,{className:"recharts-scatter-line",key:"recharts-scatter-line"},e)},e.prototype.render=function(){var t=this.props,e=t.hide,n=t.points,r=t.line,i=t.className,o=t.xAxis,a=t.yAxis,u=t.left,l=t.top,d=t.width,y=t.height,v=t.id,g=t.isAnimationActive;if(e||!n||!n.length)return null;var m=this.state.isAnimationFinished,_=c.default("recharts-scatter",i),x=o&&o.allowDataOverflow||a&&a.allowDataOverflow,b=f.default.isNil(v)?this.id:v;return s.default.createElement(h.default,{className:_,clipPath:x?"url(#clipPath-"+b+")":null},x?s.default.createElement("defs",null,s.default.createElement("clipPath",{id:"clipPath-"+b},s.default.createElement("rect",{x:u,y:l,width:d,height:y}))):null,r&&this.renderLine(),this.renderErrorBar(),s.default.createElement(h.default,{key:"recharts-scatter-symbols"},this.renderSymbols()),(!g||m)&&p.default.renderCallByParent(this.props,n))},e.displayName="Scatter",e.defaultProps={xAxisId:0,yAxisId:0,zAxisId:0,legendType:"circle",lineType:"joint",lineJointType:"linear",data:[],shape:"circle",hide:!1,isAnimationActive:!d.isSsr(),animationBegin:0,animationDuration:400,animationEasing:"linear"},e.getComposedData=function(t){var e=t.xAxis,n=t.yAxis,r=t.zAxis,i=t.item,a=t.displayedData,u=t.onItemMouseLeave,s=t.onItemMouseEnter,l=t.offset,c=t.xAxisTicks,h=t.yAxisTicks,p=i.props.tooltipType,v=d.findAllByType(i.props.children,_.default.displayName),g=f.default.isNil(e.dataKey)?i.props.dataKey:e.dataKey,m=f.default.isNil(n.dataKey)?i.props.dataKey:n.dataKey,x=r&&r.dataKey,w=r?r.range:y.default.defaultProps.range,A=w&&w[0],O=e.scale.bandwidth?e.scale.bandwidth():0,E=n.scale.bandwidth?n.scale.bandwidth():0,M=a.map((function(t,i){var a=b.getValueByDataKey(t,g),u=b.getValueByDataKey(t,m),s=!f.default.isNil(x)&&b.getValueByDataKey(t,x)||"-",l=[{name:e.name||e.dataKey,unit:e.unit||"",value:a,payload:t,dataKey:g,type:p},{name:n.name||n.dataKey,unit:n.unit||"",value:u,payload:t,dataKey:m,type:p}];"-"!==s&&l.push({name:r.name||r.dataKey,unit:r.unit||"",value:s,payload:t,dataKey:x,type:p});var d=b.getCateCoordinateOfLine({axis:e,ticks:c,bandSize:O,entry:t,index:i,dataKey:g}),y=b.getCateCoordinateOfLine({axis:n,ticks:h,bandSize:E,entry:t,index:i,dataKey:m}),_="-"!==s?r.scale(s):A,w=Math.sqrt(Math.max(_,0)/Math.PI);return o(o(o({},t),{cx:d,cy:y,x:d-w,y:y-w,xAxis:e,yAxis:n,zAxis:r,width:2*w,height:2*w,size:_,node:{x:a,y:u,z:s},tooltipPayload:l,tooltipPosition:{x:d,y:y},payload:t}),v&&v[i]&&v[i].props)}));return o({onMouseLeave:u,onMouseEnter:s,points:M},l)},e}(s.PureComponent);e.default=A},function(t,e,n){"use strict";n.r(e);var r=Math.PI,i=2*r,o=i-1e-6;function a(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function u(){return new a}a.prototype=u.prototype={constructor:a,moveTo:function(t,e){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,e){this._+="L"+(this._x1=+t)+","+(this._y1=+e)},quadraticCurveTo:function(t,e,n,r){this._+="Q"+ +t+","+ +e+","+(this._x1=+n)+","+(this._y1=+r)},bezierCurveTo:function(t,e,n,r,i,o){this._+="C"+ +t+","+ +e+","+ +n+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(t,e,n,i,o){t=+t,e=+e,n=+n,i=+i,o=+o;var a=this._x1,u=this._y1,s=n-t,l=i-e,c=a-t,f=u-e,h=c*c+f*f;if(o<0)throw new Error("negative radius: "+o);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=e);else if(h>1e-6)if(Math.abs(f*s-l*c)>1e-6&&o){var p=n-a,d=i-u,y=s*s+l*l,v=p*p+d*d,g=Math.sqrt(y),m=Math.sqrt(h),_=o*Math.tan((r-Math.acos((y+h-v)/(2*g*m)))/2),x=_/m,b=_/g;Math.abs(x-1)>1e-6&&(this._+="L"+(t+x*c)+","+(e+x*f)),this._+="A"+o+","+o+",0,0,"+ +(f*p>c*d)+","+(this._x1=t+b*s)+","+(this._y1=e+b*l)}else this._+="L"+(this._x1=t)+","+(this._y1=e);else;},arc:function(t,e,n,a,u,s){t=+t,e=+e,s=!!s;var l=(n=+n)*Math.cos(a),c=n*Math.sin(a),f=t+l,h=e+c,p=1^s,d=s?a-u:u-a;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+f+","+h:(Math.abs(this._x1-f)>1e-6||Math.abs(this._y1-h)>1e-6)&&(this._+="L"+f+","+h),n&&(d<0&&(d=d%i+i),d>o?this._+="A"+n+","+n+",0,1,"+p+","+(t-l)+","+(e-c)+"A"+n+","+n+",0,1,"+p+","+(this._x1=f)+","+(this._y1=h):d>1e-6&&(this._+="A"+n+","+n+",0,"+ +(d>=r)+","+p+","+(this._x1=t+n*Math.cos(u))+","+(this._y1=e+n*Math.sin(u))))},rect:function(t,e,n,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)+"h"+ +n+"v"+ +r+"h"+-n+"Z"},toString:function(){return this._}};var s=u,l=function(t){return function(){return t}},c=Math.abs,f=Math.atan2,h=Math.cos,p=Math.max,d=Math.min,y=Math.sin,v=Math.sqrt,g=1e-12,m=Math.PI,_=m/2,x=2*m;function b(t){return t>=1?_:t<=-1?-_:Math.asin(t)}function w(t){return t.innerRadius}function A(t){return t.outerRadius}function O(t){return t.startAngle}function E(t){return t.endAngle}function M(t){return t&&t.padAngle}function S(t,e,n,r,i,o,a){var u=t-n,s=e-r,l=(a?o:-o)/v(u*u+s*s),c=l*s,f=-l*u,h=t+c,d=e+f,y=n+c,g=r+f,m=(h+y)/2,_=(d+g)/2,x=y-h,b=g-d,w=x*x+b*b,A=i-o,O=h*g-y*d,E=(b<0?-1:1)*v(p(0,A*A*w-O*O)),M=(O*b-x*E)/w,S=(-O*x-b*E)/w,k=(O*b+x*E)/w,P=(-O*x+b*E)/w,N=M-m,C=S-_,T=k-m,j=P-_;return N*N+C*C>T*T+j*j&&(M=k,S=P),{cx:M,cy:S,x01:-c,y01:-f,x11:M*(i/A-1),y11:S*(i/A-1)}}var k=function(){var t=w,e=A,n=l(0),r=null,i=O,o=E,a=M,u=null;function p(){var l,p,w,A=+t.apply(this,arguments),O=+e.apply(this,arguments),E=i.apply(this,arguments)-_,M=o.apply(this,arguments)-_,k=c(M-E),P=M>E;if(u||(u=l=s()),O<A&&(p=O,O=A,A=p),O>g)if(k>x-g)u.moveTo(O*h(E),O*y(E)),u.arc(0,0,O,E,M,!P),A>g&&(u.moveTo(A*h(M),A*y(M)),u.arc(0,0,A,M,E,P));else{var N,C,T=E,j=M,I=E,D=M,R=k,L=k,B=a.apply(this,arguments)/2,F=B>g&&(r?+r.apply(this,arguments):v(A*A+O*O)),z=d(c(O-A)/2,+n.apply(this,arguments)),W=z,V=z;if(F>g){var U=b(F/A*y(B)),q=b(F/O*y(B));(R-=2*U)>g?(I+=U*=P?1:-1,D-=U):(R=0,I=D=(E+M)/2),(L-=2*q)>g?(T+=q*=P?1:-1,j-=q):(L=0,T=j=(E+M)/2)}var G=O*h(T),H=O*y(T),K=A*h(D),X=A*y(D);if(z>g){var Y,$=O*h(j),Z=O*y(j),J=A*h(I),Q=A*y(I);if(k<m&&(Y=function(t,e,n,r,i,o,a,u){var s=n-t,l=r-e,c=a-i,f=u-o,h=f*s-c*l;if(!(h*h<g))return[t+(h=(c*(e-o)-f*(t-i))/h)*s,e+h*l]}(G,H,J,Q,$,Z,K,X))){var tt=G-Y[0],et=H-Y[1],nt=$-Y[0],rt=Z-Y[1],it=1/y(((w=(tt*nt+et*rt)/(v(tt*tt+et*et)*v(nt*nt+rt*rt)))>1?0:w<-1?m:Math.acos(w))/2),ot=v(Y[0]*Y[0]+Y[1]*Y[1]);W=d(z,(A-ot)/(it-1)),V=d(z,(O-ot)/(it+1))}}L>g?V>g?(N=S(J,Q,G,H,O,V,P),C=S($,Z,K,X,O,V,P),u.moveTo(N.cx+N.x01,N.cy+N.y01),V<z?u.arc(N.cx,N.cy,V,f(N.y01,N.x01),f(C.y01,C.x01),!P):(u.arc(N.cx,N.cy,V,f(N.y01,N.x01),f(N.y11,N.x11),!P),u.arc(0,0,O,f(N.cy+N.y11,N.cx+N.x11),f(C.cy+C.y11,C.cx+C.x11),!P),u.arc(C.cx,C.cy,V,f(C.y11,C.x11),f(C.y01,C.x01),!P))):(u.moveTo(G,H),u.arc(0,0,O,T,j,!P)):u.moveTo(G,H),A>g&&R>g?W>g?(N=S(K,X,$,Z,A,-W,P),C=S(G,H,J,Q,A,-W,P),u.lineTo(N.cx+N.x01,N.cy+N.y01),W<z?u.arc(N.cx,N.cy,W,f(N.y01,N.x01),f(C.y01,C.x01),!P):(u.arc(N.cx,N.cy,W,f(N.y01,N.x01),f(N.y11,N.x11),!P),u.arc(0,0,A,f(N.cy+N.y11,N.cx+N.x11),f(C.cy+C.y11,C.cx+C.x11),P),u.arc(C.cx,C.cy,W,f(C.y11,C.x11),f(C.y01,C.x01),!P))):u.arc(0,0,A,D,I,P):u.lineTo(K,X)}else u.moveTo(0,0);if(u.closePath(),l)return u=null,l+""||null}return p.centroid=function(){var n=(+t.apply(this,arguments)+ +e.apply(this,arguments))/2,r=(+i.apply(this,arguments)+ +o.apply(this,arguments))/2-m/2;return[h(r)*n,y(r)*n]},p.innerRadius=function(e){return arguments.length?(t="function"==typeof e?e:l(+e),p):t},p.outerRadius=function(t){return arguments.length?(e="function"==typeof t?t:l(+t),p):e},p.cornerRadius=function(t){return arguments.length?(n="function"==typeof t?t:l(+t),p):n},p.padRadius=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:l(+t),p):r},p.startAngle=function(t){return arguments.length?(i="function"==typeof t?t:l(+t),p):i},p.endAngle=function(t){return arguments.length?(o="function"==typeof t?t:l(+t),p):o},p.padAngle=function(t){return arguments.length?(a="function"==typeof t?t:l(+t),p):a},p.context=function(t){return arguments.length?(u=null==t?null:t,p):u},p};function P(t){this._context=t}P.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:this._context.lineTo(t,e)}}};var N=function(t){return new P(t)};function C(t){return t[0]}function T(t){return t[1]}var j=function(){var t=C,e=T,n=l(!0),r=null,i=N,o=null;function a(a){var u,l,c,f=a.length,h=!1;for(null==r&&(o=i(c=s())),u=0;u<=f;++u)!(u<f&&n(l=a[u],u,a))===h&&((h=!h)?o.lineStart():o.lineEnd()),h&&o.point(+t(l,u,a),+e(l,u,a));if(c)return o=null,c+""||null}return a.x=function(e){return arguments.length?(t="function"==typeof e?e:l(+e),a):t},a.y=function(t){return arguments.length?(e="function"==typeof t?t:l(+t),a):e},a.defined=function(t){return arguments.length?(n="function"==typeof t?t:l(!!t),a):n},a.curve=function(t){return arguments.length?(i=t,null!=r&&(o=i(r)),a):i},a.context=function(t){return arguments.length?(null==t?r=o=null:o=i(r=t),a):r},a},I=function(){var t=C,e=null,n=l(0),r=T,i=l(!0),o=null,a=N,u=null;function c(l){var c,f,h,p,d,y=l.length,v=!1,g=new Array(y),m=new Array(y);for(null==o&&(u=a(d=s())),c=0;c<=y;++c){if(!(c<y&&i(p=l[c],c,l))===v)if(v=!v)f=c,u.areaStart(),u.lineStart();else{for(u.lineEnd(),u.lineStart(),h=c-1;h>=f;--h)u.point(g[h],m[h]);u.lineEnd(),u.areaEnd()}v&&(g[c]=+t(p,c,l),m[c]=+n(p,c,l),u.point(e?+e(p,c,l):g[c],r?+r(p,c,l):m[c]))}if(d)return u=null,d+""||null}function f(){return j().defined(i).curve(a).context(o)}return c.x=function(n){return arguments.length?(t="function"==typeof n?n:l(+n),e=null,c):t},c.x0=function(e){return arguments.length?(t="function"==typeof e?e:l(+e),c):t},c.x1=function(t){return arguments.length?(e=null==t?null:"function"==typeof t?t:l(+t),c):e},c.y=function(t){return arguments.length?(n="function"==typeof t?t:l(+t),r=null,c):n},c.y0=function(t){return arguments.length?(n="function"==typeof t?t:l(+t),c):n},c.y1=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:l(+t),c):r},c.lineX0=c.lineY0=function(){return f().x(t).y(n)},c.lineY1=function(){return f().x(t).y(r)},c.lineX1=function(){return f().x(e).y(n)},c.defined=function(t){return arguments.length?(i="function"==typeof t?t:l(!!t),c):i},c.curve=function(t){return arguments.length?(a=t,null!=o&&(u=a(o)),c):a},c.context=function(t){return arguments.length?(null==t?o=u=null:u=a(o=t),c):o},c},D=function(t,e){return e<t?-1:e>t?1:e>=t?0:NaN},R=function(t){return t},L=function(){var t=R,e=D,n=null,r=l(0),i=l(x),o=l(0);function a(a){var u,s,l,c,f,h=a.length,p=0,d=new Array(h),y=new Array(h),v=+r.apply(this,arguments),g=Math.min(x,Math.max(-x,i.apply(this,arguments)-v)),m=Math.min(Math.abs(g)/h,o.apply(this,arguments)),_=m*(g<0?-1:1);for(u=0;u<h;++u)(f=y[d[u]=u]=+t(a[u],u,a))>0&&(p+=f);for(null!=e?d.sort((function(t,n){return e(y[t],y[n])})):null!=n&&d.sort((function(t,e){return n(a[t],a[e])})),u=0,l=p?(g-h*_)/p:0;u<h;++u,v=c)s=d[u],c=v+((f=y[s])>0?f*l:0)+_,y[s]={data:a[s],index:u,value:f,startAngle:v,endAngle:c,padAngle:m};return y}return a.value=function(e){return arguments.length?(t="function"==typeof e?e:l(+e),a):t},a.sortValues=function(t){return arguments.length?(e=t,n=null,a):e},a.sort=function(t){return arguments.length?(n=t,e=null,a):n},a.startAngle=function(t){return arguments.length?(r="function"==typeof t?t:l(+t),a):r},a.endAngle=function(t){return arguments.length?(i="function"==typeof t?t:l(+t),a):i},a.padAngle=function(t){return arguments.length?(o="function"==typeof t?t:l(+t),a):o},a},B=z(N);function F(t){this._curve=t}function z(t){function e(e){return new F(t(e))}return e._curve=t,e}function W(t){var e=t.curve;return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t.curve=function(t){return arguments.length?e(z(t)):e()._curve},t}F.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(t,e){this._curve.point(e*Math.sin(t),e*-Math.cos(t))}};var V=function(){return W(j().curve(B))},U=function(){var t=I().curve(B),e=t.curve,n=t.lineX0,r=t.lineX1,i=t.lineY0,o=t.lineY1;return t.angle=t.x,delete t.x,t.startAngle=t.x0,delete t.x0,t.endAngle=t.x1,delete t.x1,t.radius=t.y,delete t.y,t.innerRadius=t.y0,delete t.y0,t.outerRadius=t.y1,delete t.y1,t.lineStartAngle=function(){return W(n())},delete t.lineX0,t.lineEndAngle=function(){return W(r())},delete t.lineX1,t.lineInnerRadius=function(){return W(i())},delete t.lineY0,t.lineOuterRadius=function(){return W(o())},delete t.lineY1,t.curve=function(t){return arguments.length?e(z(t)):e()._curve},t},q=function(t,e){return[(e=+e)*Math.cos(t-=Math.PI/2),e*Math.sin(t)]},G=Array.prototype.slice;function H(t){return t.source}function K(t){return t.target}function X(t){var e=H,n=K,r=C,i=T,o=null;function a(){var a,u=G.call(arguments),l=e.apply(this,u),c=n.apply(this,u);if(o||(o=a=s()),t(o,+r.apply(this,(u[0]=l,u)),+i.apply(this,u),+r.apply(this,(u[0]=c,u)),+i.apply(this,u)),a)return o=null,a+""||null}return a.source=function(t){return arguments.length?(e=t,a):e},a.target=function(t){return arguments.length?(n=t,a):n},a.x=function(t){return arguments.length?(r="function"==typeof t?t:l(+t),a):r},a.y=function(t){return arguments.length?(i="function"==typeof t?t:l(+t),a):i},a.context=function(t){return arguments.length?(o=null==t?null:t,a):o},a}function Y(t,e,n,r,i){t.moveTo(e,n),t.bezierCurveTo(e=(e+r)/2,n,e,i,r,i)}function $(t,e,n,r,i){t.moveTo(e,n),t.bezierCurveTo(e,n=(n+i)/2,r,n,r,i)}function Z(t,e,n,r,i){var o=q(e,n),a=q(e,n=(n+i)/2),u=q(r,n),s=q(r,i);t.moveTo(o[0],o[1]),t.bezierCurveTo(a[0],a[1],u[0],u[1],s[0],s[1])}function J(){return X(Y)}function Q(){return X($)}function tt(){var t=X(Z);return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t}var et={draw:function(t,e){var n=Math.sqrt(e/m);t.moveTo(n,0),t.arc(0,0,n,0,x)}},nt={draw:function(t,e){var n=Math.sqrt(e/5)/2;t.moveTo(-3*n,-n),t.lineTo(-n,-n),t.lineTo(-n,-3*n),t.lineTo(n,-3*n),t.lineTo(n,-n),t.lineTo(3*n,-n),t.lineTo(3*n,n),t.lineTo(n,n),t.lineTo(n,3*n),t.lineTo(-n,3*n),t.lineTo(-n,n),t.lineTo(-3*n,n),t.closePath()}},rt=Math.sqrt(1/3),it=2*rt,ot={draw:function(t,e){var n=Math.sqrt(e/it),r=n*rt;t.moveTo(0,-n),t.lineTo(r,0),t.lineTo(0,n),t.lineTo(-r,0),t.closePath()}},at=Math.sin(m/10)/Math.sin(7*m/10),ut=Math.sin(x/10)*at,st=-Math.cos(x/10)*at,lt={draw:function(t,e){var n=Math.sqrt(.8908130915292852*e),r=ut*n,i=st*n;t.moveTo(0,-n),t.lineTo(r,i);for(var o=1;o<5;++o){var a=x*o/5,u=Math.cos(a),s=Math.sin(a);t.lineTo(s*n,-u*n),t.lineTo(u*r-s*i,s*r+u*i)}t.closePath()}},ct={draw:function(t,e){var n=Math.sqrt(e),r=-n/2;t.rect(r,r,n,n)}},ft=Math.sqrt(3),ht={draw:function(t,e){var n=-Math.sqrt(e/(3*ft));t.moveTo(0,2*n),t.lineTo(-ft*n,-n),t.lineTo(ft*n,-n),t.closePath()}},pt=Math.sqrt(3)/2,dt=1/Math.sqrt(12),yt=3*(dt/2+1),vt={draw:function(t,e){var n=Math.sqrt(e/yt),r=n/2,i=n*dt,o=r,a=n*dt+n,u=-o,s=a;t.moveTo(r,i),t.lineTo(o,a),t.lineTo(u,s),t.lineTo(-.5*r-pt*i,pt*r+-.5*i),t.lineTo(-.5*o-pt*a,pt*o+-.5*a),t.lineTo(-.5*u-pt*s,pt*u+-.5*s),t.lineTo(-.5*r+pt*i,-.5*i-pt*r),t.lineTo(-.5*o+pt*a,-.5*a-pt*o),t.lineTo(-.5*u+pt*s,-.5*s-pt*u),t.closePath()}},gt=[et,nt,ot,ct,lt,ht,vt],mt=function(){var t=l(et),e=l(64),n=null;function r(){var r;if(n||(n=r=s()),t.apply(this,arguments).draw(n,+e.apply(this,arguments)),r)return n=null,r+""||null}return r.type=function(e){return arguments.length?(t="function"==typeof e?e:l(e),r):t},r.size=function(t){return arguments.length?(e="function"==typeof t?t:l(+t),r):e},r.context=function(t){return arguments.length?(n=null==t?null:t,r):n},r},_t=function(){};function xt(t,e,n){t._context.bezierCurveTo((2*t._x0+t._x1)/3,(2*t._y0+t._y1)/3,(t._x0+2*t._x1)/3,(t._y0+2*t._y1)/3,(t._x0+4*t._x1+e)/6,(t._y0+4*t._y1+n)/6)}function bt(t){this._context=t}bt.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:xt(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:xt(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}};var wt=function(t){return new bt(t)};function At(t){this._context=t}At.prototype={areaStart:_t,areaEnd:_t,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._x2=t,this._y2=e;break;case 1:this._point=2,this._x3=t,this._y3=e;break;case 2:this._point=3,this._x4=t,this._y4=e,this._context.moveTo((this._x0+4*this._x1+t)/6,(this._y0+4*this._y1+e)/6);break;default:xt(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}};var Ot=function(t){return new At(t)};function Et(t){this._context=t}Et.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var n=(this._x0+4*this._x1+t)/6,r=(this._y0+4*this._y1+e)/6;this._line?this._context.lineTo(n,r):this._context.moveTo(n,r);break;case 3:this._point=4;default:xt(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}};var Mt=function(t){return new Et(t)};function St(t,e){this._basis=new bt(t),this._beta=e}St.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var t=this._x,e=this._y,n=t.length-1;if(n>0)for(var r,i=t[0],o=e[0],a=t[n]-i,u=e[n]-o,s=-1;++s<=n;)r=s/n,this._basis.point(this._beta*t[s]+(1-this._beta)*(i+r*a),this._beta*e[s]+(1-this._beta)*(o+r*u));this._x=this._y=null,this._basis.lineEnd()},point:function(t,e){this._x.push(+t),this._y.push(+e)}};var kt=function t(e){function n(t){return 1===e?new bt(t):new St(t,e)}return n.beta=function(e){return t(+e)},n}(.85);function Pt(t,e,n){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-e),t._y2+t._k*(t._y1-n),t._x2,t._y2)}function Nt(t,e){this._context=t,this._k=(1-e)/6}Nt.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:Pt(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2,this._x1=t,this._y1=e;break;case 2:this._point=3;default:Pt(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var Ct=function t(e){function n(t){return new Nt(t,e)}return n.tension=function(e){return t(+e)},n}(0);function Tt(t,e){this._context=t,this._k=(1-e)/6}Tt.prototype={areaStart:_t,areaEnd:_t,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._x3=t,this._y3=e;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=e);break;case 2:this._point=3,this._x5=t,this._y5=e;break;default:Pt(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var jt=function t(e){function n(t){return new Tt(t,e)}return n.tension=function(e){return t(+e)},n}(0);function It(t,e){this._context=t,this._k=(1-e)/6}It.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Pt(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var Dt=function t(e){function n(t){return new It(t,e)}return n.tension=function(e){return t(+e)},n}(0);function Rt(t,e,n){var r=t._x1,i=t._y1,o=t._x2,a=t._y2;if(t._l01_a>g){var u=2*t._l01_2a+3*t._l01_a*t._l12_a+t._l12_2a,s=3*t._l01_a*(t._l01_a+t._l12_a);r=(r*u-t._x0*t._l12_2a+t._x2*t._l01_2a)/s,i=(i*u-t._y0*t._l12_2a+t._y2*t._l01_2a)/s}if(t._l23_a>g){var l=2*t._l23_2a+3*t._l23_a*t._l12_a+t._l12_2a,c=3*t._l23_a*(t._l23_a+t._l12_a);o=(o*l+t._x1*t._l23_2a-e*t._l12_2a)/c,a=(a*l+t._y1*t._l23_2a-n*t._l12_2a)/c}t._context.bezierCurveTo(r,i,o,a,t._x2,t._y2)}function Lt(t,e){this._context=t,this._alpha=e}Lt.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,r=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3;default:Rt(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var Bt=function t(e){function n(t){return e?new Lt(t,e):new Nt(t,0)}return n.alpha=function(e){return t(+e)},n}(.5);function Ft(t,e){this._context=t,this._alpha=e}Ft.prototype={areaStart:_t,areaEnd:_t,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,r=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=t,this._y3=e;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=e);break;case 2:this._point=3,this._x5=t,this._y5=e;break;default:Rt(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var zt=function t(e){function n(t){return e?new Ft(t,e):new Tt(t,0)}return n.alpha=function(e){return t(+e)},n}(.5);function Wt(t,e){this._context=t,this._alpha=e}Wt.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,r=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Rt(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var Vt=function t(e){function n(t){return e?new Wt(t,e):new It(t,0)}return n.alpha=function(e){return t(+e)},n}(.5);function Ut(t){this._context=t}Ut.prototype={areaStart:_t,areaEnd:_t,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(t,e){t=+t,e=+e,this._point?this._context.lineTo(t,e):(this._point=1,this._context.moveTo(t,e))}};var qt=function(t){return new Ut(t)};function Gt(t){return t<0?-1:1}function Ht(t,e,n){var r=t._x1-t._x0,i=e-t._x1,o=(t._y1-t._y0)/(r||i<0&&-0),a=(n-t._y1)/(i||r<0&&-0),u=(o*i+a*r)/(r+i);return(Gt(o)+Gt(a))*Math.min(Math.abs(o),Math.abs(a),.5*Math.abs(u))||0}function Kt(t,e){var n=t._x1-t._x0;return n?(3*(t._y1-t._y0)/n-e)/2:e}function Xt(t,e,n){var r=t._x0,i=t._y0,o=t._x1,a=t._y1,u=(o-r)/3;t._context.bezierCurveTo(r+u,i+u*e,o-u,a-u*n,o,a)}function Yt(t){this._context=t}function $t(t){this._context=new Zt(t)}function Zt(t){this._context=t}function Jt(t){return new Yt(t)}function Qt(t){return new $t(t)}function te(t){this._context=t}function ee(t){var e,n,r=t.length-1,i=new Array(r),o=new Array(r),a=new Array(r);for(i[0]=0,o[0]=2,a[0]=t[0]+2*t[1],e=1;e<r-1;++e)i[e]=1,o[e]=4,a[e]=4*t[e]+2*t[e+1];for(i[r-1]=2,o[r-1]=7,a[r-1]=8*t[r-1]+t[r],e=1;e<r;++e)n=i[e]/o[e-1],o[e]-=n,a[e]-=n*a[e-1];for(i[r-1]=a[r-1]/o[r-1],e=r-2;e>=0;--e)i[e]=(a[e]-i[e+1])/o[e];for(o[r-1]=(t[r]+i[r-1])/2,e=0;e<r-1;++e)o[e]=2*t[e+1]-i[e+1];return[i,o]}Yt.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:Xt(this,this._t0,Kt(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){var n=NaN;if(e=+e,(t=+t)!==this._x1||e!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,Xt(this,Kt(this,n=Ht(this,t,e)),n);break;default:Xt(this,this._t0,n=Ht(this,t,e))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e,this._t0=n}}},($t.prototype=Object.create(Yt.prototype)).point=function(t,e){Yt.prototype.point.call(this,e,t)},Zt.prototype={moveTo:function(t,e){this._context.moveTo(e,t)},closePath:function(){this._context.closePath()},lineTo:function(t,e){this._context.lineTo(e,t)},bezierCurveTo:function(t,e,n,r,i,o){this._context.bezierCurveTo(e,t,r,n,o,i)}},te.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var t=this._x,e=this._y,n=t.length;if(n)if(this._line?this._context.lineTo(t[0],e[0]):this._context.moveTo(t[0],e[0]),2===n)this._context.lineTo(t[1],e[1]);else for(var r=ee(t),i=ee(e),o=0,a=1;a<n;++o,++a)this._context.bezierCurveTo(r[0][o],i[0][o],r[1][o],i[1][o],t[a],e[a]);(this._line||0!==this._line&&1===n)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(t,e){this._x.push(+t),this._y.push(+e)}};var ne=function(t){return new te(t)};function re(t,e){this._context=t,this._t=e}re.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,e),this._context.lineTo(t,e);else{var n=this._x*(1-this._t)+t*this._t;this._context.lineTo(n,this._y),this._context.lineTo(n,e)}}this._x=t,this._y=e}};var ie=function(t){return new re(t,.5)};function oe(t){return new re(t,0)}function ae(t){return new re(t,1)}var ue=function(t,e){if((i=t.length)>1)for(var n,r,i,o=1,a=t[e[0]],u=a.length;o<i;++o)for(r=a,a=t[e[o]],n=0;n<u;++n)a[n][1]+=a[n][0]=isNaN(r[n][1])?r[n][0]:r[n][1]},se=function(t){for(var e=t.length,n=new Array(e);--e>=0;)n[e]=e;return n};function le(t,e){return t[e]}var ce=function(){var t=l([]),e=se,n=ue,r=le;function i(i){var o,a,u=t.apply(this,arguments),s=i.length,l=u.length,c=new Array(l);for(o=0;o<l;++o){for(var f,h=u[o],p=c[o]=new Array(s),d=0;d<s;++d)p[d]=f=[0,+r(i[d],h,d,i)],f.data=i[d];p.key=h}for(o=0,a=e(c);o<l;++o)c[a[o]].index=o;return n(c,a),c}return i.keys=function(e){return arguments.length?(t="function"==typeof e?e:l(G.call(e)),i):t},i.value=function(t){return arguments.length?(r="function"==typeof t?t:l(+t),i):r},i.order=function(t){return arguments.length?(e=null==t?se:"function"==typeof t?t:l(G.call(t)),i):e},i.offset=function(t){return arguments.length?(n=null==t?ue:t,i):n},i},fe=function(t,e){if((r=t.length)>0){for(var n,r,i,o=0,a=t[0].length;o<a;++o){for(i=n=0;n<r;++n)i+=t[n][o][1]||0;if(i)for(n=0;n<r;++n)t[n][o][1]/=i}ue(t,e)}},he=function(t,e){if((u=t.length)>0)for(var n,r,i,o,a,u,s=0,l=t[e[0]].length;s<l;++s)for(o=a=0,n=0;n<u;++n)(i=(r=t[e[n]][s])[1]-r[0])>=0?(r[0]=o,r[1]=o+=i):i<0?(r[1]=a,r[0]=a+=i):r[0]=o},pe=function(t,e){if((n=t.length)>0){for(var n,r=0,i=t[e[0]],o=i.length;r<o;++r){for(var a=0,u=0;a<n;++a)u+=t[a][r][1]||0;i[r][1]+=i[r][0]=-u/2}ue(t,e)}},de=function(t,e){if((i=t.length)>0&&(r=(n=t[e[0]]).length)>0){for(var n,r,i,o=0,a=1;a<r;++a){for(var u=0,s=0,l=0;u<i;++u){for(var c=t[e[u]],f=c[a][1]||0,h=(f-(c[a-1][1]||0))/2,p=0;p<u;++p){var d=t[e[p]];h+=(d[a][1]||0)-(d[a-1][1]||0)}s+=f,l+=h*f}n[a-1][1]+=n[a-1][0]=o,s&&(o-=l/s)}n[a-1][1]+=n[a-1][0]=o,ue(t,e)}},ye=function(t){var e=t.map(ve);return se(t).sort((function(t,n){return e[t]-e[n]}))};function ve(t){for(var e,n=-1,r=0,i=t.length,o=-1/0;++n<i;)(e=+t[n][1])>o&&(o=e,r=n);return r}var ge=function(t){var e=t.map(me);return se(t).sort((function(t,n){return e[t]-e[n]}))};function me(t){for(var e,n=0,r=-1,i=t.length;++r<i;)(e=+t[r][1])&&(n+=e);return n}var _e=function(t){return ge(t).reverse()},xe=function(t){var e,n,r=t.length,i=t.map(me),o=ye(t),a=0,u=0,s=[],l=[];for(e=0;e<r;++e)n=o[e],a<u?(a+=i[n],s.push(n)):(u+=i[n],l.push(n));return l.reverse().concat(s)},be=function(t){return se(t).reverse()};n.d(e,"arc",(function(){return k})),n.d(e,"area",(function(){return I})),n.d(e,"line",(function(){return j})),n.d(e,"pie",(function(){return L})),n.d(e,"areaRadial",(function(){return U})),n.d(e,"radialArea",(function(){return U})),n.d(e,"lineRadial",(function(){return V})),n.d(e,"radialLine",(function(){return V})),n.d(e,"pointRadial",(function(){return q})),n.d(e,"linkHorizontal",(function(){return J})),n.d(e,"linkVertical",(function(){return Q})),n.d(e,"linkRadial",(function(){return tt})),n.d(e,"symbol",(function(){return mt})),n.d(e,"symbols",(function(){return gt})),n.d(e,"symbolCircle",(function(){return et})),n.d(e,"symbolCross",(function(){return nt})),n.d(e,"symbolDiamond",(function(){return ot})),n.d(e,"symbolSquare",(function(){return ct})),n.d(e,"symbolStar",(function(){return lt})),n.d(e,"symbolTriangle",(function(){return ht})),n.d(e,"symbolWye",(function(){return vt})),n.d(e,"curveBasisClosed",(function(){return Ot})),n.d(e,"curveBasisOpen",(function(){return Mt})),n.d(e,"curveBasis",(function(){return wt})),n.d(e,"curveBundle",(function(){return kt})),n.d(e,"curveCardinalClosed",(function(){return jt})),n.d(e,"curveCardinalOpen",(function(){return Dt})),n.d(e,"curveCardinal",(function(){return Ct})),n.d(e,"curveCatmullRomClosed",(function(){return zt})),n.d(e,"curveCatmullRomOpen",(function(){return Vt})),n.d(e,"curveCatmullRom",(function(){return Bt})),n.d(e,"curveLinearClosed",(function(){return qt})),n.d(e,"curveLinear",(function(){return N})),n.d(e,"curveMonotoneX",(function(){return Jt})),n.d(e,"curveMonotoneY",(function(){return Qt})),n.d(e,"curveNatural",(function(){return ne})),n.d(e,"curveStep",(function(){return ie})),n.d(e,"curveStepAfter",(function(){return ae})),n.d(e,"curveStepBefore",(function(){return oe})),n.d(e,"stack",(function(){return ce})),n.d(e,"stackOffsetExpand",(function(){return fe})),n.d(e,"stackOffsetDiverging",(function(){return he})),n.d(e,"stackOffsetNone",(function(){return ue})),n.d(e,"stackOffsetSilhouette",(function(){return pe})),n.d(e,"stackOffsetWiggle",(function(){return de})),n.d(e,"stackOrderAppearance",(function(){return ye})),n.d(e,"stackOrderAscending",(function(){return ge})),n.d(e,"stackOrderDescending",(function(){return _e})),n.d(e,"stackOrderInsideOut",(function(){return xe})),n.d(e,"stackOrderNone",(function(){return se})),n.d(e,"stackOrderReverse",(function(){return be}))},function(t,e,n){var r=n(30),i=n(25),o="[object Number]";t.exports=function(t){return"number"==typeof t||i(t)&&r(t)==o}},,function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e,n){var r=n(29),i=n(13),o=n(97);t.exports=!r&&!i((function(){return 7!=Object.defineProperty(o("div"),"a",{get:function(){return 7}}).a}))},function(t,e,n){var r=n(10),i=n(23),o=r.document,a=i(o)&&i(o.createElement);t.exports=function(t){return a?o.createElement(t):{}}},function(t,e,n){var r=n(10),i=n(41),o=n(40),a=n(19),u=n(67),s=n(99),l=n(160),c=l.get,f=l.enforce,h=String(s).split("toString");i("inspectSource",(function(t){return s.call(t)})),(t.exports=function(t,e,n,i){var s=!!i&&!!i.unsafe,l=!!i&&!!i.enumerable,c=!!i&&!!i.noTargetGet;"function"==typeof n&&("string"!=typeof e||a(n,"name")||o(n,"name",e),f(n).source=h.join("string"==typeof e?e:"")),t!==r?(s?!c&&t[e]&&(l=!0):delete t[e],l?t[e]=n:o(t,e,n)):l?t[e]=n:u(e,n)})(Function.prototype,"toString",(function(){return"function"==typeof this&&c(this).source||s.call(this)}))},function(t,e,n){var r=n(41);t.exports=r("native-function-to-string",Function.toString)},function(t,e,n){var r=n(41),i=n(101),o=r("keys");t.exports=function(t){return o[t]||(o[t]=i(t))}},function(t,e){var n=0,r=Math.random();t.exports=function(t){return"Symbol("+String(void 0===t?"":t)+")_"+(++n+r).toString(36)}},function(t,e,n){var r=n(69),i=n(10),o=function(t){return"function"==typeof t?t:void 0};t.exports=function(t,e){return arguments.length<2?o(r[t])||o(i[t]):r[t]&&r[t][e]||i[t]&&i[t][e]}},function(t,e,n){var r=n(104),i=n(70).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return r(t,i)}},function(t,e,n){var r=n(19),i=n(63),o=n(164).indexOf,a=n(68);t.exports=function(t,e){var n,u=i(t),s=0,l=[];for(n in u)!r(a,n)&&r(u,n)&&l.push(n);for(;e.length>s;)r(u,n=e[s++])&&(~o(l,n)||l.push(n));return l}},function(t,e,n){var r=n(13),i=/#|\.prototype\./,o=function(t,e){var n=u[a(t)];return n==l||n!=s&&("function"==typeof e?r(e):!!e)},a=o.normalize=function(t){return String(t).replace(i,".").toLowerCase()},u=o.data={},s=o.NATIVE="N",l=o.POLYFILL="P";t.exports=o},function(t,e){var n=Math.log;t.exports=Math.log1p||function(t){return(t=+t)>-1e-8&&t<1e-8?t-t*t/2:n(1+t)}},function(t,e,n){var r=n(13);t.exports=!!Object.getOwnPropertySymbols&&!r((function(){return!String(Symbol())}))},function(t,e,n){var r=n(23),i=Math.floor;t.exports=function(t){return!r(t)&&isFinite(t)&&i(t)===t}},function(t,e,n){var r=n(64);t.exports=function(t){if("number"!=typeof t&&"Number"!=r(t))throw TypeError("Incorrect invocation");return+t}},function(t,e,n){var r=n(45),i=n(220),o=n(221),a=n(222),u=n(223),s=n(224);function l(t){var e=this.__data__=new r(t);this.size=e.size}l.prototype.clear=i,l.prototype.delete=o,l.prototype.get=a,l.prototype.has=u,l.prototype.set=s,t.exports=l},function(t,e){t.exports=function(t,e){return t===e||t!=t&&e!=e}},function(t,e,n){var r=n(30),i=n(79),o="[object AsyncFunction]",a="[object Function]",u="[object GeneratorFunction]",s="[object Proxy]";t.exports=function(t){if(!i(t))return!1;var e=r(t);return e==a||e==u||e==o||e==s}},function(t,e,n){(function(e){var n="object"==typeof e&&e&&e.Object===Object&&e;t.exports=n}).call(this,n(28))},function(t,e){var n=Function.prototype.toString;t.exports=function(t){if(null!=t){try{return n.call(t)}catch(t){}try{return t+""}catch(t){}}return""}},function(t,e,n){var r=n(116),i=n(245),o=n(117),a=1,u=2;t.exports=function(t,e,n,s,l,c){var f=n&a,h=t.length,p=e.length;if(h!=p&&!(f&&p>h))return!1;var d=c.get(t);if(d&&c.get(e))return d==e;var y=-1,v=!0,g=n&u?new r:void 0;for(c.set(t,e),c.set(e,t);++y<h;){var m=t[y],_=e[y];if(s)var x=f?s(_,m,y,e,t,c):s(m,_,y,t,e,c);if(void 0!==x){if(x)continue;v=!1;break}if(g){if(!i(e,(function(t,e){if(!o(g,e)&&(m===t||l(m,t,n,s,c)))return g.push(e)}))){v=!1;break}}else if(m!==_&&!l(m,_,n,s,c)){v=!1;break}}return c.delete(t),c.delete(e),v}},function(t,e,n){var r=n(80),i=n(243),o=n(244);function a(t){var e=-1,n=null==t?0:t.length;for(this.__data__=new r;++e<n;)this.add(t[e])}a.prototype.add=a.prototype.push=i,a.prototype.has=o,t.exports=a},function(t,e){t.exports=function(t,e){return t.has(e)}},function(t,e){t.exports=function(t,e){for(var n=-1,r=null==t?0:t.length,i=0,o=[];++n<r;){var a=t[n];e(a,n,t)&&(o[i++]=a)}return o}},function(t,e,n){var r=n(258),i=n(25),o=Object.prototype,a=o.hasOwnProperty,u=o.propertyIsEnumerable,s=r(function(){return arguments}())?r:function(t){return i(t)&&a.call(t,"callee")&&!u.call(t,"callee")};t.exports=s},function(t,e,n){(function(t){var r=n(15),i=n(259),o=e&&!e.nodeType&&e,a=o&&"object"==typeof t&&t&&!t.nodeType&&t,u=a&&a.exports===o?r.Buffer:void 0,s=(u?u.isBuffer:void 0)||i;t.exports=s}).call(this,n(74)(t))},function(t,e){var n=9007199254740991,r=/^(?:0|[1-9]\d*)$/;t.exports=function(t,e){var i=typeof t;return!!(e=null==e?n:e)&&("number"==i||"symbol"!=i&&r.test(t))&&t>-1&&t%1==0&&t<e}},function(t,e,n){var r=n(260),i=n(123),o=n(261),a=o&&o.isTypedArray,u=a?i(a):r;t.exports=u},function(t,e){t.exports=function(t){return function(e){return t(e)}}},function(t,e,n){var r=n(79);t.exports=function(t){return t==t&&!r(t)}},function(t,e){t.exports=function(t,e){return function(n){return null!=n&&(n[t]===e&&(void 0!==e||t in Object(n)))}}},function(t,e,n){var r=n(127),i=n(50);t.exports=function(t,e){for(var n=0,o=(e=r(e,t)).length;null!=t&&n<o;)t=t[i(e[n++])];return n&&n==o?t:void 0}},function(t,e,n){var r=n(16),i=n(86),o=n(302),a=n(305);t.exports=function(t,e){return r(t)?t:i(t,e)?[t]:o(a(t))}},function(t,e,n){"use strict";e.__esModule=!0,e.default=e.EXITING=e.ENTERED=e.ENTERING=e.EXITED=e.UNMOUNTED=void 0;var r=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)if(Object.prototype.hasOwnProperty.call(t,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(t,n):{};r.get||r.set?Object.defineProperty(e,n,r):e[n]=t[n]}return e.default=t,e}(n(1)),i=u(n(0)),o=u(n(60)),a=n(129);n(130);function u(t){return t&&t.__esModule?t:{default:t}}var s="unmounted";e.UNMOUNTED=s;var l="exited";e.EXITED=l;var c="entering";e.ENTERING=c;var f="entered";e.ENTERED=f;e.EXITING="exiting";var h=function(t){var e,n;function r(e,n){var r;r=t.call(this,e,n)||this;var i,o=n.transitionGroup,a=o&&!o.isMounting?e.enter:e.appear;return r.appearStatus=null,e.in?a?(i=l,r.appearStatus=c):i=f:i=e.unmountOnExit||e.mountOnEnter?s:l,r.state={status:i},r.nextCallback=null,r}n=t,(e=r).prototype=Object.create(n.prototype),e.prototype.constructor=e,e.__proto__=n;var a=r.prototype;return a.getChildContext=function(){return{transitionGroup:null}},r.getDerivedStateFromProps=function(t,e){return t.in&&e.status===s?{status:l}:null},a.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},a.componentDidUpdate=function(t){var e=null;if(t!==this.props){var n=this.state.status;this.props.in?n!==c&&n!==f&&(e=c):n!==c&&n!==f||(e="exiting")}this.updateStatus(!1,e)},a.componentWillUnmount=function(){this.cancelNextCallback()},a.getTimeouts=function(){var t,e,n,r=this.props.timeout;return t=e=n=r,null!=r&&"number"!=typeof r&&(t=r.exit,e=r.enter,n=void 0!==r.appear?r.appear:e),{exit:t,enter:e,appear:n}},a.updateStatus=function(t,e){if(void 0===t&&(t=!1),null!==e){this.cancelNextCallback();var n=o.default.findDOMNode(this);e===c?this.performEnter(n,t):this.performExit(n)}else this.props.unmountOnExit&&this.state.status===l&&this.setState({status:s})},a.performEnter=function(t,e){var n=this,r=this.props.enter,i=this.context.transitionGroup?this.context.transitionGroup.isMounting:e,o=this.getTimeouts(),a=i?o.appear:o.enter;e||r?(this.props.onEnter(t,i),this.safeSetState({status:c},(function(){n.props.onEntering(t,i),n.onTransitionEnd(t,a,(function(){n.safeSetState({status:f},(function(){n.props.onEntered(t,i)}))}))}))):this.safeSetState({status:f},(function(){n.props.onEntered(t)}))},a.performExit=function(t){var e=this,n=this.props.exit,r=this.getTimeouts();n?(this.props.onExit(t),this.safeSetState({status:"exiting"},(function(){e.props.onExiting(t),e.onTransitionEnd(t,r.exit,(function(){e.safeSetState({status:l},(function(){e.props.onExited(t)}))}))}))):this.safeSetState({status:l},(function(){e.props.onExited(t)}))},a.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},a.safeSetState=function(t,e){e=this.setNextCallback(e),this.setState(t,e)},a.setNextCallback=function(t){var e=this,n=!0;return this.nextCallback=function(r){n&&(n=!1,e.nextCallback=null,t(r))},this.nextCallback.cancel=function(){n=!1},this.nextCallback},a.onTransitionEnd=function(t,e,n){this.setNextCallback(n);var r=null==e&&!this.props.addEndListener;t&&!r?(this.props.addEndListener&&this.props.addEndListener(t,this.nextCallback),null!=e&&setTimeout(this.nextCallback,e)):setTimeout(this.nextCallback,0)},a.render=function(){var t=this.state.status;if(t===s)return null;var e=this.props,n=e.children,r=function(t,e){if(null==t)return{};var n,r,i={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(i[n]=t[n]);return i}(e,["children"]);if(delete r.in,delete r.mountOnEnter,delete r.unmountOnExit,delete r.appear,delete r.enter,delete r.exit,delete r.timeout,delete r.addEndListener,delete r.onEnter,delete r.onEntering,delete r.onEntered,delete r.onExit,delete r.onExiting,delete r.onExited,"function"==typeof n)return n(t,r);var o=i.default.Children.only(n);return i.default.cloneElement(o,r)},r}(i.default.Component);function p(){}h.contextTypes={transitionGroup:r.object},h.childContextTypes={transitionGroup:function(){}},h.propTypes={},h.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:p,onEntering:p,onEntered:p,onExit:p,onExiting:p,onExited:p},h.UNMOUNTED=0,h.EXITED=1,h.ENTERING=2,h.ENTERED=3,h.EXITING=4;var d=(0,a.polyfill)(h);e.default=d},function(t,e,n){"use strict";function r(){var t=this.constructor.getDerivedStateFromProps(this.props,this.state);null!=t&&this.setState(t)}function i(t){this.setState(function(e){var n=this.constructor.getDerivedStateFromProps(t,e);return null!=n?n:null}.bind(this))}function o(t,e){try{var n=this.props,r=this.state;this.props=t,this.state=e,this.__reactInternalSnapshotFlag=!0,this.__reactInternalSnapshot=this.getSnapshotBeforeUpdate(n,r)}finally{this.props=n,this.state=r}}function a(t){var e=t.prototype;if(!e||!e.isReactComponent)throw new Error("Can only polyfill class components");if("function"!=typeof t.getDerivedStateFromProps&&"function"!=typeof e.getSnapshotBeforeUpdate)return t;var n=null,a=null,u=null;if("function"==typeof e.componentWillMount?n="componentWillMount":"function"==typeof e.UNSAFE_componentWillMount&&(n="UNSAFE_componentWillMount"),"function"==typeof e.componentWillReceiveProps?a="componentWillReceiveProps":"function"==typeof e.UNSAFE_componentWillReceiveProps&&(a="UNSAFE_componentWillReceiveProps"),"function"==typeof e.componentWillUpdate?u="componentWillUpdate":"function"==typeof e.UNSAFE_componentWillUpdate&&(u="UNSAFE_componentWillUpdate"),null!==n||null!==a||null!==u){var s=t.displayName||t.name,l="function"==typeof t.getDerivedStateFromProps?"getDerivedStateFromProps()":"getSnapshotBeforeUpdate()";throw Error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n"+s+" uses "+l+" but also contains the following legacy lifecycles:"+(null!==n?"\n  "+n:"")+(null!==a?"\n  "+a:"")+(null!==u?"\n  "+u:"")+"\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://fb.me/react-async-component-lifecycle-hooks")}if("function"==typeof t.getDerivedStateFromProps&&(e.componentWillMount=r,e.componentWillReceiveProps=i),"function"==typeof e.getSnapshotBeforeUpdate){if("function"!=typeof e.componentDidUpdate)throw new Error("Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype");e.componentWillUpdate=o;var c=e.componentDidUpdate;e.componentDidUpdate=function(t,e,n){var r=this.__reactInternalSnapshotFlag?this.__reactInternalSnapshot:n;c.call(this,t,e,r)}}return t}n.r(e),n.d(e,"polyfill",(function(){return a})),r.__suppressDeprecationWarning=!0,i.__suppressDeprecationWarning=!0,o.__suppressDeprecationWarning=!0},function(t,e,n){"use strict";e.__esModule=!0,e.classNamesShape=e.timeoutsShape=void 0;var r;(r=n(1))&&r.__esModule;e.timeoutsShape=null;e.classNamesShape=null},function(t,e,n){"use strict";e.__esModule=!0,e.default=void 0;var r=u(n(1)),i=u(n(0)),o=n(129),a=n(319);function u(t){return t&&t.__esModule?t:{default:t}}function s(){return(s=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t}).apply(this,arguments)}function l(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}var c=Object.values||function(t){return Object.keys(t).map((function(e){return t[e]}))},f=function(t){var e,n;function r(e,n){var r,i=(r=t.call(this,e,n)||this).handleExited.bind(l(l(r)));return r.state={handleExited:i,firstRender:!0},r}n=t,(e=r).prototype=Object.create(n.prototype),e.prototype.constructor=e,e.__proto__=n;var o=r.prototype;return o.getChildContext=function(){return{transitionGroup:{isMounting:!this.appeared}}},o.componentDidMount=function(){this.appeared=!0,this.mounted=!0},o.componentWillUnmount=function(){this.mounted=!1},r.getDerivedStateFromProps=function(t,e){var n=e.children,r=e.handleExited;return{children:e.firstRender?(0,a.getInitialChildMapping)(t,r):(0,a.getNextChildMapping)(t,n,r),firstRender:!1}},o.handleExited=function(t,e){var n=(0,a.getChildMapping)(this.props.children);t.key in n||(t.props.onExited&&t.props.onExited(e),this.mounted&&this.setState((function(e){var n=s({},e.children);return delete n[t.key],{children:n}})))},o.render=function(){var t=this.props,e=t.component,n=t.childFactory,r=function(t,e){if(null==t)return{};var n,r,i={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,["component","childFactory"]),o=c(this.state.children).map(n);return delete r.appear,delete r.enter,delete r.exit,null===e?o:i.default.createElement(e,r,o)},r}(i.default.Component);f.childContextTypes={transitionGroup:r.default.object.isRequired},f.propTypes={},f.defaultProps={component:"div",childFactory:function(t){return t}};var h=(0,o.polyfill)(f);e.default=h,t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.flip=l;var r,i=n(329),o=(r=i)&&r.__esModule?r:{default:r};function a(t,e){return"MathExpression"===t.type?function(t,e){switch((t=function(t,e){var n=(0,o.default)(t.left,t.right,e),r=a(n.left,e),i=a(n.right,e);"MathExpression"===r.type&&"MathExpression"===i.type&&("/"===r.operator&&"*"===i.operator||"-"===r.operator&&"+"===i.operator||"*"===r.operator&&"/"===i.operator||"+"===r.operator&&"-"===i.operator)&&(u(r.right,i.right)?n=(0,o.default)(r.left,i.left,e):u(r.right,i.left)&&(n=(0,o.default)(r.left,i.right,e)),r=a(n.left,e),i=a(n.right,e));return t.left=r,t.right=i,t}(t,e)).operator){case"+":case"-":return function(t,e){var n=t,r=n.left,i=n.right,o=n.operator;if("CssVariable"===r.type||"CssVariable"===i.type)return t;if(0===i.value)return r;if(0===r.value&&"+"===o)return i;if(0===r.value&&"-"===o)return function t(e){s(e.type)?e.value=-e.value:"MathExpression"==e.type&&(e.left=t(e.left),e.right=t(e.right));return e}(i);r.type===i.type&&s(r.type)&&((t=Object.assign({},r)).value="+"===o?r.value+i.value:r.value-i.value);if(s(r.type)&&("+"===i.operator||"-"===i.operator)&&"MathExpression"===i.type){if(r.type===i.left.type)return(t=Object.assign({},t)).left=a({type:"MathExpression",operator:o,left:r,right:i.left},e),t.right=i.right,t.operator="-"===o?l(i.operator):i.operator,a(t,e);if(r.type===i.right.type)return(t=Object.assign({},t)).left=a({type:"MathExpression",operator:"-"===o?l(i.operator):i.operator,left:r,right:i.right},e),t.right=i.left,a(t,e)}if("MathExpression"===r.type&&("+"===r.operator||"-"===r.operator)&&s(i.type)){if(i.type===r.left.type)return(t=Object.assign({},r)).left=a({type:"MathExpression",operator:o,left:r.left,right:i},e),a(t,e);if(i.type===r.right.type)return t=Object.assign({},r),"-"===r.operator?(t.right=a({type:"MathExpression",operator:"-"===o?"+":"-",left:i,right:r.right},e),t.operator="-"===o?"-":"+"):t.right=a({type:"MathExpression",operator:o,left:r.right,right:i},e),t.right.value<0&&(t.right.value*=-1,t.operator="-"===t.operator?"+":"-"),a(t,e)}return t}(t,e);case"/":return function(t,e){if(!s(t.right.type))return t;if("Value"!==t.right.type)throw new Error('Cannot divide by "'+t.right.unit+'", number expected');if(0===t.right.value)throw new Error("Cannot divide by zero");if("MathExpression"===t.left.type)return s(t.left.left.type)&&s(t.left.right.type)?(t.left.left.value/=t.right.value,t.left.right.value/=t.right.value,a(t.left,e)):t;if(s(t.left.type))return t.left.value/=t.right.value,t.left;return t}(t,e);case"*":return function(t){if("MathExpression"===t.left.type&&"Value"===t.right.type){if(s(t.left.left.type)&&s(t.left.right.type))return t.left.left.value*=t.right.value,t.left.right.value*=t.right.value,t.left}else{if(s(t.left.type)&&"Value"===t.right.type)return t.left.value*=t.right.value,t.left;if("Value"===t.left.type&&"MathExpression"===t.right.type){if(s(t.right.left.type)&&s(t.right.right.type))return t.right.left.value*=t.left.value,t.right.right.value*=t.left.value,t.right}else if("Value"===t.left.type&&s(t.right.type))return t.right.value*=t.left.value,t.right}return t}(t)}return t}(t,e):t}function u(t,e){return t.type===e.type&&t.value===e.value}function s(t){switch(t){case"LengthValue":case"AngleValue":case"TimeValue":case"FrequencyValue":case"ResolutionValue":case"EmValue":case"ExValue":case"ChValue":case"RemValue":case"VhValue":case"VwValue":case"VminValue":case"VmaxValue":case"PercentageValue":case"Value":return!0}return!1}function l(t){return"+"===t?"-":"+"}e.default=a},function(t,e,n){var r;/*! decimal.js-light v2.5.0 https://github.com/MikeMcl/decimal.js-light/LICENCE */!function(i){"use strict";var o,a=1e9,u={precision:20,rounding:4,toExpNeg:-7,toExpPos:21,LN10:"2.302585092994045684017991454684364207601101488628772976033327900967572609677352480235997205089598298341967784042286"},s=!0,l="[DecimalError] ",c=l+"Invalid argument: ",f=l+"Exponent out of range: ",h=Math.floor,p=Math.pow,d=/^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,y=1e7,v=7,g=h(9007199254740991/v),m={};function _(t,e){var n,r,i,o,a,u,l,c,f=t.constructor,h=f.precision;if(!t.s||!e.s)return e.s||(e=new f(t)),s?P(e,h):e;if(l=t.d,c=e.d,a=t.e,i=e.e,l=l.slice(),o=a-i){for(o<0?(r=l,o=-o,u=c.length):(r=c,i=a,u=l.length),o>(u=(a=Math.ceil(h/v))>u?a+1:u+1)&&(o=u,r.length=1),r.reverse();o--;)r.push(0);r.reverse()}for((u=l.length)-(o=c.length)<0&&(o=u,r=c,c=l,l=r),n=0;o;)n=(l[--o]=l[o]+c[o]+n)/y|0,l[o]%=y;for(n&&(l.unshift(n),++i),u=l.length;0==l[--u];)l.pop();return e.d=l,e.e=i,s?P(e,h):e}function x(t,e,n){if(t!==~~t||t<e||t>n)throw Error(c+t)}function b(t){var e,n,r,i=t.length-1,o="",a=t[0];if(i>0){for(o+=a,e=1;e<i;e++)r=t[e]+"",(n=v-r.length)&&(o+=M(n)),o+=r;a=t[e],(n=v-(r=a+"").length)&&(o+=M(n))}else if(0===a)return"0";for(;a%10==0;)a/=10;return o+a}m.absoluteValue=m.abs=function(){var t=new this.constructor(this);return t.s&&(t.s=1),t},m.comparedTo=m.cmp=function(t){var e,n,r,i,o=this;if(t=new o.constructor(t),o.s!==t.s)return o.s||-t.s;if(o.e!==t.e)return o.e>t.e^o.s<0?1:-1;for(e=0,n=(r=o.d.length)<(i=t.d.length)?r:i;e<n;++e)if(o.d[e]!==t.d[e])return o.d[e]>t.d[e]^o.s<0?1:-1;return r===i?0:r>i^o.s<0?1:-1},m.decimalPlaces=m.dp=function(){var t=this,e=t.d.length-1,n=(e-t.e)*v;if(e=t.d[e])for(;e%10==0;e/=10)n--;return n<0?0:n},m.dividedBy=m.div=function(t){return w(this,new this.constructor(t))},m.dividedToIntegerBy=m.idiv=function(t){var e=this.constructor;return P(w(this,new e(t),0,1),e.precision)},m.equals=m.eq=function(t){return!this.cmp(t)},m.exponent=function(){return O(this)},m.greaterThan=m.gt=function(t){return this.cmp(t)>0},m.greaterThanOrEqualTo=m.gte=function(t){return this.cmp(t)>=0},m.isInteger=m.isint=function(){return this.e>this.d.length-2},m.isNegative=m.isneg=function(){return this.s<0},m.isPositive=m.ispos=function(){return this.s>0},m.isZero=function(){return 0===this.s},m.lessThan=m.lt=function(t){return this.cmp(t)<0},m.lessThanOrEqualTo=m.lte=function(t){return this.cmp(t)<1},m.logarithm=m.log=function(t){var e,n=this,r=n.constructor,i=r.precision,a=i+5;if(void 0===t)t=new r(10);else if((t=new r(t)).s<1||t.eq(o))throw Error(l+"NaN");if(n.s<1)throw Error(l+(n.s?"NaN":"-Infinity"));return n.eq(o)?new r(0):(s=!1,e=w(S(n,a),S(t,a),a),s=!0,P(e,i))},m.minus=m.sub=function(t){var e=this;return t=new e.constructor(t),e.s==t.s?N(e,t):_(e,(t.s=-t.s,t))},m.modulo=m.mod=function(t){var e,n=this,r=n.constructor,i=r.precision;if(!(t=new r(t)).s)throw Error(l+"NaN");return n.s?(s=!1,e=w(n,t,0,1).times(t),s=!0,n.minus(e)):P(new r(n),i)},m.naturalExponential=m.exp=function(){return A(this)},m.naturalLogarithm=m.ln=function(){return S(this)},m.negated=m.neg=function(){var t=new this.constructor(this);return t.s=-t.s||0,t},m.plus=m.add=function(t){var e=this;return t=new e.constructor(t),e.s==t.s?_(e,t):N(e,(t.s=-t.s,t))},m.precision=m.sd=function(t){var e,n,r,i=this;if(void 0!==t&&t!==!!t&&1!==t&&0!==t)throw Error(c+t);if(e=O(i)+1,n=(r=i.d.length-1)*v+1,r=i.d[r]){for(;r%10==0;r/=10)n--;for(r=i.d[0];r>=10;r/=10)n++}return t&&e>n?e:n},m.squareRoot=m.sqrt=function(){var t,e,n,r,i,o,a,u=this,c=u.constructor;if(u.s<1){if(!u.s)return new c(0);throw Error(l+"NaN")}for(t=O(u),s=!1,0==(i=Math.sqrt(+u))||i==1/0?(((e=b(u.d)).length+t)%2==0&&(e+="0"),i=Math.sqrt(e),t=h((t+1)/2)-(t<0||t%2),r=new c(e=i==1/0?"1e"+t:(e=i.toExponential()).slice(0,e.indexOf("e")+1)+t)):r=new c(i.toString()),i=a=(n=c.precision)+3;;)if(r=(o=r).plus(w(u,o,a+2)).times(.5),b(o.d).slice(0,a)===(e=b(r.d)).slice(0,a)){if(e=e.slice(a-3,a+1),i==a&&"4999"==e){if(P(o,n+1,0),o.times(o).eq(u)){r=o;break}}else if("9999"!=e)break;a+=4}return s=!0,P(r,n)},m.times=m.mul=function(t){var e,n,r,i,o,a,u,l,c,f=this,h=f.constructor,p=f.d,d=(t=new h(t)).d;if(!f.s||!t.s)return new h(0);for(t.s*=f.s,n=f.e+t.e,(l=p.length)<(c=d.length)&&(o=p,p=d,d=o,a=l,l=c,c=a),o=[],r=a=l+c;r--;)o.push(0);for(r=c;--r>=0;){for(e=0,i=l+r;i>r;)u=o[i]+d[r]*p[i-r-1]+e,o[i--]=u%y|0,e=u/y|0;o[i]=(o[i]+e)%y|0}for(;!o[--a];)o.pop();return e?++n:o.shift(),t.d=o,t.e=n,s?P(t,h.precision):t},m.toDecimalPlaces=m.todp=function(t,e){var n=this,r=n.constructor;return n=new r(n),void 0===t?n:(x(t,0,a),void 0===e?e=r.rounding:x(e,0,8),P(n,t+O(n)+1,e))},m.toExponential=function(t,e){var n,r=this,i=r.constructor;return void 0===t?n=C(r,!0):(x(t,0,a),void 0===e?e=i.rounding:x(e,0,8),n=C(r=P(new i(r),t+1,e),!0,t+1)),n},m.toFixed=function(t,e){var n,r,i=this,o=i.constructor;return void 0===t?C(i):(x(t,0,a),void 0===e?e=o.rounding:x(e,0,8),n=C((r=P(new o(i),t+O(i)+1,e)).abs(),!1,t+O(r)+1),i.isneg()&&!i.isZero()?"-"+n:n)},m.toInteger=m.toint=function(){var t=this,e=t.constructor;return P(new e(t),O(t)+1,e.rounding)},m.toNumber=function(){return+this},m.toPower=m.pow=function(t){var e,n,r,i,a,u,c=this,f=c.constructor,p=+(t=new f(t));if(!t.s)return new f(o);if(!(c=new f(c)).s){if(t.s<1)throw Error(l+"Infinity");return c}if(c.eq(o))return c;if(r=f.precision,t.eq(o))return P(c,r);if(u=(e=t.e)>=(n=t.d.length-1),a=c.s,u){if((n=p<0?-p:p)<=9007199254740991){for(i=new f(o),e=Math.ceil(r/v+4),s=!1;n%2&&T((i=i.times(c)).d,e),0!==(n=h(n/2));)T((c=c.times(c)).d,e);return s=!0,t.s<0?new f(o).div(i):P(i,r)}}else if(a<0)throw Error(l+"NaN");return a=a<0&&1&t.d[Math.max(e,n)]?-1:1,c.s=1,s=!1,i=t.times(S(c,r+12)),s=!0,(i=A(i)).s=a,i},m.toPrecision=function(t,e){var n,r,i=this,o=i.constructor;return void 0===t?r=C(i,(n=O(i))<=o.toExpNeg||n>=o.toExpPos):(x(t,1,a),void 0===e?e=o.rounding:x(e,0,8),r=C(i=P(new o(i),t,e),t<=(n=O(i))||n<=o.toExpNeg,t)),r},m.toSignificantDigits=m.tosd=function(t,e){var n=this.constructor;return void 0===t?(t=n.precision,e=n.rounding):(x(t,1,a),void 0===e?e=n.rounding:x(e,0,8)),P(new n(this),t,e)},m.toString=m.valueOf=m.val=m.toJSON=function(){var t=this,e=O(t),n=t.constructor;return C(t,e<=n.toExpNeg||e>=n.toExpPos)};var w=function(){function t(t,e){var n,r=0,i=t.length;for(t=t.slice();i--;)n=t[i]*e+r,t[i]=n%y|0,r=n/y|0;return r&&t.unshift(r),t}function e(t,e,n,r){var i,o;if(n!=r)o=n>r?1:-1;else for(i=o=0;i<n;i++)if(t[i]!=e[i]){o=t[i]>e[i]?1:-1;break}return o}function n(t,e,n){for(var r=0;n--;)t[n]-=r,r=t[n]<e[n]?1:0,t[n]=r*y+t[n]-e[n];for(;!t[0]&&t.length>1;)t.shift()}return function(r,i,o,a){var u,s,c,f,h,p,d,g,m,_,x,b,w,A,E,M,S,k,N=r.constructor,C=r.s==i.s?1:-1,T=r.d,j=i.d;if(!r.s)return new N(r);if(!i.s)throw Error(l+"Division by zero");for(s=r.e-i.e,S=j.length,E=T.length,g=(d=new N(C)).d=[],c=0;j[c]==(T[c]||0);)++c;if(j[c]>(T[c]||0)&&--s,(b=null==o?o=N.precision:a?o+(O(r)-O(i))+1:o)<0)return new N(0);if(b=b/v+2|0,c=0,1==S)for(f=0,j=j[0],b++;(c<E||f)&&b--;c++)w=f*y+(T[c]||0),g[c]=w/j|0,f=w%j|0;else{for((f=y/(j[0]+1)|0)>1&&(j=t(j,f),T=t(T,f),S=j.length,E=T.length),A=S,_=(m=T.slice(0,S)).length;_<S;)m[_++]=0;(k=j.slice()).unshift(0),M=j[0],j[1]>=y/2&&++M;do{f=0,(u=e(j,m,S,_))<0?(x=m[0],S!=_&&(x=x*y+(m[1]||0)),(f=x/M|0)>1?(f>=y&&(f=y-1),1==(u=e(h=t(j,f),m,p=h.length,_=m.length))&&(f--,n(h,S<p?k:j,p))):(0==f&&(u=f=1),h=j.slice()),(p=h.length)<_&&h.unshift(0),n(m,h,_),-1==u&&(u=e(j,m,S,_=m.length))<1&&(f++,n(m,S<_?k:j,_)),_=m.length):0===u&&(f++,m=[0]),g[c++]=f,u&&m[0]?m[_++]=T[A]||0:(m=[T[A]],_=1)}while((A++<E||void 0!==m[0])&&b--)}return g[0]||g.shift(),d.e=s,P(d,a?o+O(d)+1:o)}}();function A(t,e){var n,r,i,a,u,l=0,c=0,h=t.constructor,d=h.precision;if(O(t)>16)throw Error(f+O(t));if(!t.s)return new h(o);for(null==e?(s=!1,u=d):u=e,a=new h(.03125);t.abs().gte(.1);)t=t.times(a),c+=5;for(u+=Math.log(p(2,c))/Math.LN10*2+5|0,n=r=i=new h(o),h.precision=u;;){if(r=P(r.times(t),u),n=n.times(++l),b((a=i.plus(w(r,n,u))).d).slice(0,u)===b(i.d).slice(0,u)){for(;c--;)i=P(i.times(i),u);return h.precision=d,null==e?(s=!0,P(i,d)):i}i=a}}function O(t){for(var e=t.e*v,n=t.d[0];n>=10;n/=10)e++;return e}function E(t,e,n){if(e>t.LN10.sd())throw s=!0,n&&(t.precision=n),Error(l+"LN10 precision limit exceeded");return P(new t(t.LN10),e)}function M(t){for(var e="";t--;)e+="0";return e}function S(t,e){var n,r,i,a,u,c,f,h,p,d=1,y=t,v=y.d,g=y.constructor,m=g.precision;if(y.s<1)throw Error(l+(y.s?"NaN":"-Infinity"));if(y.eq(o))return new g(0);if(null==e?(s=!1,h=m):h=e,y.eq(10))return null==e&&(s=!0),E(g,h);if(h+=10,g.precision=h,r=(n=b(v)).charAt(0),a=O(y),!(Math.abs(a)<15e14))return f=E(g,h+2,m).times(a+""),y=S(new g(r+"."+n.slice(1)),h-10).plus(f),g.precision=m,null==e?(s=!0,P(y,m)):y;for(;r<7&&1!=r||1==r&&n.charAt(1)>3;)r=(n=b((y=y.times(t)).d)).charAt(0),d++;for(a=O(y),r>1?(y=new g("0."+n),a++):y=new g(r+"."+n.slice(1)),c=u=y=w(y.minus(o),y.plus(o),h),p=P(y.times(y),h),i=3;;){if(u=P(u.times(p),h),b((f=c.plus(w(u,new g(i),h))).d).slice(0,h)===b(c.d).slice(0,h))return c=c.times(2),0!==a&&(c=c.plus(E(g,h+2,m).times(a+""))),c=w(c,new g(d),h),g.precision=m,null==e?(s=!0,P(c,m)):c;c=f,i+=2}}function k(t,e){var n,r,i;for((n=e.indexOf("."))>-1&&(e=e.replace(".","")),(r=e.search(/e/i))>0?(n<0&&(n=r),n+=+e.slice(r+1),e=e.substring(0,r)):n<0&&(n=e.length),r=0;48===e.charCodeAt(r);)++r;for(i=e.length;48===e.charCodeAt(i-1);)--i;if(e=e.slice(r,i)){if(i-=r,n=n-r-1,t.e=h(n/v),t.d=[],r=(n+1)%v,n<0&&(r+=v),r<i){for(r&&t.d.push(+e.slice(0,r)),i-=v;r<i;)t.d.push(+e.slice(r,r+=v));e=e.slice(r),r=v-e.length}else r-=i;for(;r--;)e+="0";if(t.d.push(+e),s&&(t.e>g||t.e<-g))throw Error(f+n)}else t.s=0,t.e=0,t.d=[0];return t}function P(t,e,n){var r,i,o,a,u,l,c,d,m=t.d;for(a=1,o=m[0];o>=10;o/=10)a++;if((r=e-a)<0)r+=v,i=e,c=m[d=0];else{if((d=Math.ceil((r+1)/v))>=(o=m.length))return t;for(c=o=m[d],a=1;o>=10;o/=10)a++;i=(r%=v)-v+a}if(void 0!==n&&(u=c/(o=p(10,a-i-1))%10|0,l=e<0||void 0!==m[d+1]||c%o,l=n<4?(u||l)&&(0==n||n==(t.s<0?3:2)):u>5||5==u&&(4==n||l||6==n&&(r>0?i>0?c/p(10,a-i):0:m[d-1])%10&1||n==(t.s<0?8:7))),e<1||!m[0])return l?(o=O(t),m.length=1,e=e-o-1,m[0]=p(10,(v-e%v)%v),t.e=h(-e/v)||0):(m.length=1,m[0]=t.e=t.s=0),t;if(0==r?(m.length=d,o=1,d--):(m.length=d+1,o=p(10,v-r),m[d]=i>0?(c/p(10,a-i)%p(10,i)|0)*o:0),l)for(;;){if(0==d){(m[0]+=o)==y&&(m[0]=1,++t.e);break}if(m[d]+=o,m[d]!=y)break;m[d--]=0,o=1}for(r=m.length;0===m[--r];)m.pop();if(s&&(t.e>g||t.e<-g))throw Error(f+O(t));return t}function N(t,e){var n,r,i,o,a,u,l,c,f,h,p=t.constructor,d=p.precision;if(!t.s||!e.s)return e.s?e.s=-e.s:e=new p(t),s?P(e,d):e;if(l=t.d,h=e.d,r=e.e,c=t.e,l=l.slice(),a=c-r){for((f=a<0)?(n=l,a=-a,u=h.length):(n=h,r=c,u=l.length),a>(i=Math.max(Math.ceil(d/v),u)+2)&&(a=i,n.length=1),n.reverse(),i=a;i--;)n.push(0);n.reverse()}else{for((f=(i=l.length)<(u=h.length))&&(u=i),i=0;i<u;i++)if(l[i]!=h[i]){f=l[i]<h[i];break}a=0}for(f&&(n=l,l=h,h=n,e.s=-e.s),u=l.length,i=h.length-u;i>0;--i)l[u++]=0;for(i=h.length;i>a;){if(l[--i]<h[i]){for(o=i;o&&0===l[--o];)l[o]=y-1;--l[o],l[i]+=y}l[i]-=h[i]}for(;0===l[--u];)l.pop();for(;0===l[0];l.shift())--r;return l[0]?(e.d=l,e.e=r,s?P(e,d):e):new p(0)}function C(t,e,n){var r,i=O(t),o=b(t.d),a=o.length;return e?(n&&(r=n-a)>0?o=o.charAt(0)+"."+o.slice(1)+M(r):a>1&&(o=o.charAt(0)+"."+o.slice(1)),o=o+(i<0?"e":"e+")+i):i<0?(o="0."+M(-i-1)+o,n&&(r=n-a)>0&&(o+=M(r))):i>=a?(o+=M(i+1-a),n&&(r=n-i-1)>0&&(o=o+"."+M(r))):((r=i+1)<a&&(o=o.slice(0,r)+"."+o.slice(r)),n&&(r=n-a)>0&&(i+1===a&&(o+="."),o+=M(r))),t.s<0?"-"+o:o}function T(t,e){if(t.length>e)return t.length=e,!0}function j(t){if(!t||"object"!=typeof t)throw Error(l+"Object expected");var e,n,r,i=["precision",1,a,"rounding",0,8,"toExpNeg",-1/0,0,"toExpPos",0,1/0];for(e=0;e<i.length;e+=3)if(void 0!==(r=t[n=i[e]])){if(!(h(r)===r&&r>=i[e+1]&&r<=i[e+2]))throw Error(c+n+": "+r);this[n]=r}if(void 0!==(r=t[n="LN10"])){if(r!=Math.LN10)throw Error(c+n+": "+r);this[n]=new this(r)}return this}(u=function t(e){var n,r,i;function o(t){var e=this;if(!(e instanceof o))return new o(t);if(e.constructor=o,t instanceof o)return e.s=t.s,e.e=t.e,void(e.d=(t=t.d)?t.slice():t);if("number"==typeof t){if(0*t!=0)throw Error(c+t);if(t>0)e.s=1;else{if(!(t<0))return e.s=0,e.e=0,void(e.d=[0]);t=-t,e.s=-1}return t===~~t&&t<1e7?(e.e=0,void(e.d=[t])):k(e,t.toString())}if("string"!=typeof t)throw Error(c+t);if(45===t.charCodeAt(0)?(t=t.slice(1),e.s=-1):e.s=1,!d.test(t))throw Error(c+t);k(e,t)}if(o.prototype=m,o.ROUND_UP=0,o.ROUND_DOWN=1,o.ROUND_CEIL=2,o.ROUND_FLOOR=3,o.ROUND_HALF_UP=4,o.ROUND_HALF_DOWN=5,o.ROUND_HALF_EVEN=6,o.ROUND_HALF_CEIL=7,o.ROUND_HALF_FLOOR=8,o.clone=t,o.config=o.set=j,void 0===e&&(e={}),e)for(i=["precision","rounding","toExpNeg","toExpPos","LN10"],n=0;n<i.length;)e.hasOwnProperty(r=i[n++])||(e[r]=this[r]);return o.config(e),o}(u)).default=u.Decimal=u,o=new u(1),void 0===(r=function(){return u}.call(e,n,e,t))||(t.exports=r)}()},function(t,e,n){"use strict";function r(t){return function(t){if(Array.isArray(t)){for(var e=0,n=new Array(t.length);e<t.length;e++)n[e]=t[e];return n}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}Object.defineProperty(e,"__esModule",{value:!0}),e.memoize=e.reverse=e.compose=e.map=e.range=e.curry=e.PLACE_HOLDER=void 0;var i=function(t){return t},o={"@@functional/placeholder":!0};e.PLACE_HOLDER=o;var a=function(t){return t===o},u=function(t){return function e(){return 0===arguments.length||1===arguments.length&&a(arguments.length<=0?void 0:arguments[0])?e:t.apply(void 0,arguments)}},s=function(t){return function t(e,n){return 1===e?n:u((function(){for(var i=arguments.length,s=new Array(i),l=0;l<i;l++)s[l]=arguments[l];var c=s.filter((function(t){return t!==o})).length;return c>=e?n.apply(void 0,s):t(e-c,u((function(){for(var t=arguments.length,e=new Array(t),i=0;i<t;i++)e[i]=arguments[i];var o=s.map((function(t){return a(t)?e.shift():t}));return n.apply(void 0,r(o).concat(e))})))}))}(t.length,t)};e.curry=s;e.range=function(t,e){for(var n=[],r=t;r<e;++r)n[r-t]=r;return n};var l=s((function(t,e){return Array.isArray(e)?e.map(t):Object.keys(e).map((function(t){return e[t]})).map(t)}));e.map=l;e.compose=function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];if(!e.length)return i;var r=e.reverse(),o=r[0],a=r.slice(1);return function(){return a.reduce((function(t,e){return e(t)}),o.apply(void 0,arguments))}};e.reverse=function(t){return Array.isArray(t)?t.reverse():t.split("").reverse.join("")};e.memoize=function(t){var e=null,n=null;return function(){for(var r=arguments.length,i=new Array(r),o=0;o<r;o++)i[o]=arguments[o];return e&&i.every((function(t,n){return t===e[n]}))?n:(e=i,n=t.apply(void 0,i))}}},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e},u=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var s=a(n(0)),l=u(n(4)),c=n(5),f=n(2),h=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.getPath=function(t,e,n,r,i,o){return"M"+t+","+i+"v"+r+"M"+o+","+e+"h"+n},e.prototype.render=function(){var t=this.props,n=t.x,r=t.y,i=t.width,a=t.height,u=t.top,h=t.left,p=t.className;return c.isNumber(n)&&c.isNumber(r)&&c.isNumber(i)&&c.isNumber(a)&&c.isNumber(u)&&c.isNumber(h)?s.default.createElement("path",o({},f.filterProps(this.props,!0),{className:l.default("recharts-cross",p),d:e.getPath(n,r,i,a,u,h)})):null},e.defaultProps={x:0,y:0,top:0,left:0,width:0,height:0},e}(s.PureComponent);e.default=h},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e},u=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var s=a(n(0)),l=u(n(11)),c=u(n(4)),f=u(n(3)),h=u(n(7)),p=u(n(53)),d=u(n(33)),y=u(n(26)),v=u(n(20)),g=u(n(17)),m=u(n(32)),_=n(8),x=n(12),b=n(5),w=n(9),A=n(31),O=n(2),E=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.state={isAnimationFinished:!1},e.id=b.uniqueId("recharts-pie-"),e.cachePrevData=function(t){e.setState({prevSectors:t})},e.handleAnimationEnd=function(){var t=e.props.onAnimationEnd;e.setState({isAnimationFinished:!0}),f.default.isFunction(t)&&t()},e.handleAnimationStart=function(){var t=e.props.onAnimationStart;e.setState({isAnimationFinished:!1}),f.default.isFunction(t)&&t()},e}return i(e,t),e.prototype.UNSAFE_componentWillReceiveProps=function(t){var e=this.props,n=e.animationId,r=e.sectors;t.isAnimationActive!==this.props.isAnimationActive?this.cachePrevData([]):t.animationId!==n&&this.cachePrevData(r)},e.getTextAnchor=function(t,e){return t>e?"start":t<e?"end":"middle"},e.prototype.isActiveIndex=function(t){var e=this.props.activeIndex;return Array.isArray(e)?-1!==e.indexOf(t):t===e},e.renderLabelLineItem=function(t,e){return s.default.isValidElement(t)?s.default.cloneElement(t,e):f.default.isFunction(t)?t(e):s.default.createElement(d.default,o({},e,{type:"linear",className:"recharts-pie-label-line"}))},e.renderLabelItem=function(t,e,n){if(s.default.isValidElement(t))return s.default.cloneElement(t,e);var r=n;return f.default.isFunction(t)&&(r=t(e),s.default.isValidElement(r))?r:s.default.createElement(y.default,o({},e,{alignmentBaseline:"middle",className:"recharts-pie-label-text"}),r)},e.prototype.renderLabels=function(t){if(this.props.isAnimationActive&&!this.state.isAnimationFinished)return null;var n=this.props,r=n.label,i=n.labelLine,a=n.dataKey,u=n.valueKey,l=O.filterProps(this.props),c=O.filterProps(r),p=O.filterProps(i),d=r&&r.offsetRadius||20,y=t.map((function(t,n){var y=(t.startAngle+t.endAngle)/2,v=x.polarToCartesian(t.cx,t.cy,t.outerRadius+d,y),g=o(o(o(o(o(o({},l),t),{stroke:"none"}),c),{index:n,textAnchor:e.getTextAnchor(v.x,t.cx)}),v),m=o(o(o(o(o({},l),t),{fill:"none",stroke:t.fill}),p),{index:n,points:[x.polarToCartesian(t.cx,t.cy,t.outerRadius,y),v],key:"line"}),_=a;return f.default.isNil(a)&&f.default.isNil(u)?_="value":f.default.isNil(a)&&(_=u),s.default.createElement(h.default,{key:"label-"+n},i&&e.renderLabelLineItem(i,m),e.renderLabelItem(r,g,w.getValueByDataKey(t,_)))}));return s.default.createElement(h.default,{className:"recharts-pie-labels"},y)},e.renderSectorItem=function(t,e){return s.default.isValidElement(t)?s.default.cloneElement(t,e):f.default.isFunction(t)?t(e):f.default.isPlainObject(t)?s.default.createElement(p.default,o({},e,t)):s.default.createElement(p.default,o({},e))},e.prototype.renderSectorsStatically=function(t){var n=this,r=this.props,i=r.activeShape,a=r.blendStroke;return t.map((function(t,r){var u=n.isActiveIndex(r)?i:null,l=o(o({},t),{stroke:a?t.fill:t.stroke});return s.default.createElement(h.default,o({className:"recharts-pie-sector"},O.adaptEventsOfChild(n.props,t,r),{key:"sector-"+r}),e.renderSectorItem(u,l))}))},e.prototype.renderSectorsWithAnimation=function(){var t=this,e=this.props,n=e.sectors,r=e.isAnimationActive,i=e.animationBegin,a=e.animationDuration,u=e.animationEasing,c=e.animationId,p=this.state.prevSectors;return s.default.createElement(l.default,{begin:i,duration:a,isActive:r,easing:u,from:{t:0},to:{t:1},key:"pie-"+c,onAnimationStart:this.handleAnimationStart,onAnimationEnd:this.handleAnimationEnd},(function(e){var r=e.t,i=[],a=(n&&n[0]).startAngle;return n.forEach((function(t,e){var n=p&&p[e],u=e>0?f.default.get(t,"paddingAngle",0):0;if(n){var s=b.interpolateNumber(n.endAngle-n.startAngle,t.endAngle-t.startAngle),l=o(o({},t),{startAngle:a+u,endAngle:a+s(r)+u});i.push(l),a=l.endAngle}else{var c=t.endAngle,h=t.startAngle,d=b.interpolateNumber(0,c-h)(r);l=o(o({},t),{startAngle:a+u,endAngle:a+d+u});i.push(l),a=l.endAngle}})),s.default.createElement(h.default,null,t.renderSectorsStatically(i))}))},e.prototype.renderSectors=function(){var t=this.props,e=t.sectors,n=t.isAnimationActive,r=this.state.prevSectors;return!(n&&e&&e.length)||r&&f.default.isEqual(r,e)?this.renderSectorsStatically(e):this.renderSectorsWithAnimation()},e.prototype.render=function(){var t=this.props,e=t.hide,n=t.sectors,r=t.className,i=t.label,o=t.cx,a=t.cy,u=t.innerRadius,l=t.outerRadius,p=t.isAnimationActive,d=this.state.prevSectors;if(e||!n||!n.length||!b.isNumber(o)||!b.isNumber(a)||!b.isNumber(u)||!b.isNumber(l))return null;var y=c.default("recharts-pie",r);return s.default.createElement(h.default,{className:y},this.renderSectors(),i&&this.renderLabels(n),v.default.renderCallByParent(this.props,null,!1),(!p||d&&f.default.isEqual(d,n))&&g.default.renderCallByParent(this.props,n,!1))},e.displayName="Pie",e.defaultProps={stroke:"#fff",fill:"#808080",legendType:"rect",cx:"50%",cy:"50%",startAngle:0,endAngle:360,innerRadius:0,outerRadius:"80%",paddingAngle:0,labelLine:!0,hide:!1,minAngle:0,isAnimationActive:!_.isSsr(),animationBegin:400,animationDuration:1500,animationEasing:"ease",nameKey:"name",blendStroke:!1},e.parseDeltaAngle=function(t,e){return b.mathSign(e-t)*Math.min(Math.abs(e-t),360)},e.getRealPieData=function(t){var e=t.props,n=e.data,r=e.children,i=O.filterProps(t.props),a=_.findAllByType(r,m.default.displayName);return n&&n.length?n.map((function(t,e){return o(o(o({payload:t},i),t),a&&a[e]&&a[e].props)})):a&&a.length?a.map((function(t){return o(o({},i),t.props)})):[]},e.parseCoordinateOfPie=function(t,e){var n=e.top,r=e.left,i=e.width,o=e.height,a=x.getMaxRadius(i,o);return{cx:r+b.getPercentValue(t.props.cx,i,i/2),cy:n+b.getPercentValue(t.props.cy,o,o/2),innerRadius:b.getPercentValue(t.props.innerRadius,a,0),outerRadius:b.getPercentValue(t.props.outerRadius,a,.8*a),maxRadius:t.props.maxRadius||Math.sqrt(i*i+o*o)/2}},e.getComposedData=function(t){var n=t.item,r=t.offset,i=t.onItemMouseLeave,a=t.onItemMouseEnter,u=e.getRealPieData(n);if(!u||!u.length)return null;var s=n.props,l=s.cornerRadius,c=s.startAngle,h=s.endAngle,p=s.paddingAngle,d=s.dataKey,y=s.nameKey,v=s.valueKey,g=s.tooltipType,m=Math.abs(n.props.minAngle),_=e.parseCoordinateOfPie(n,r),O=u.length,E=e.parseDeltaAngle(c,h),M=Math.abs(E),S=M-O*m-(M>=360?O:O-1)*p,k=d;f.default.isNil(d)&&f.default.isNil(v)?(A.warn(!1,'Use "dataKey" to specify the value of pie,\n      the props "valueKey" will be deprecated in 1.1.0'),k="value"):f.default.isNil(d)&&(A.warn(!1,'Use "dataKey" to specify the value of pie,\n      the props "valueKey" will be deprecated in 1.1.0'),k=v);var P,N,C=u.reduce((function(t,e){var n=w.getValueByDataKey(e,k,0);return t+(b.isNumber(n)?n:0)}),0);C>0&&(P=u.map((function(t,e){var n,r=w.getValueByDataKey(t,k,0),i=w.getValueByDataKey(t,y,e),a=(b.isNumber(r)?r:0)/C,u=(n=e?N.endAngle+b.mathSign(E)*p:c)+b.mathSign(E)*(m+a*S),s=(n+u)/2,f=(_.innerRadius+_.outerRadius)/2,h=[{name:i,value:r,payload:t,dataKey:k,type:g}],d=x.polarToCartesian(_.cx,_.cy,f,s);return N=o(o(o({percent:a,cornerRadius:l,name:i,tooltipPayload:h,midAngle:s,middleRadius:f,tooltipPosition:d},t),_),{value:w.getValueByDataKey(t,k),startAngle:n,endAngle:u,payload:t,paddingAngle:b.mathSign(E)*p})})));return o(o({},_),{sectors:P,data:u,onMouseLeave:i,onMouseEnter:a})},e}(s.PureComponent);e.default=E},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e},u=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var s=a(n(0)),l=u(n(11)),c=u(n(4)),f=u(n(3)),h=n(5),p=n(8),d=n(12),y=n(9),v=u(n(54)),g=u(n(27)),m=u(n(7)),_=u(n(17)),x=n(2),b=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.state={isAnimationFinished:!1},e.cachePrevData=function(t){e.setState({prevPoints:t})},e.handleAnimationEnd=function(){var t=e.props.onAnimationEnd;e.setState({isAnimationFinished:!0}),f.default.isFunction(t)&&t()},e.handleAnimationStart=function(){var t=e.props.onAnimationStart;e.setState({isAnimationFinished:!1}),f.default.isFunction(t)&&t()},e.handleMouseEnter=function(t){var n=e.props.onMouseEnter;n&&n(e.props,t)},e.handleMouseLeave=function(t){var n=e.props.onMouseLeave;n&&n(e.props,t)},e}return i(e,t),e.prototype.UNSAFE_componentWillReceiveProps=function(t){var e=this.props,n=e.animationId,r=e.points;t.animationId!==n&&this.cachePrevData(r)},e.renderDotItem=function(t,e){return s.default.isValidElement(t)?s.default.cloneElement(t,e):f.default.isFunction(t)?t(e):s.default.createElement(g.default,o({},e,{className:"recharts-radar-dot"}))},e.prototype.renderDots=function(t){var n=this.props,r=n.dot,i=n.dataKey,a=x.filterProps(this.props),u=x.filterProps(r),l=t.map((function(t,n){var s=o(o(o({key:"dot-"+n,r:3},a),u),{dataKey:i,cx:t.x,cy:t.y,index:n,payload:t});return e.renderDotItem(r,s)}));return s.default.createElement(m.default,{className:"recharts-radar-dots"},l)},e.prototype.renderPolygonStatically=function(t){var e,n=this.props,r=n.shape,i=n.dot;return e=s.default.isValidElement(r)?s.default.cloneElement(r,o(o({},this.props),{points:t})):f.default.isFunction(r)?r(o(o({},this.props),{points:t})):s.default.createElement(v.default,o({},x.filterProps(this.props,!0),{onMouseEnter:this.handleMouseEnter,onMouseLeave:this.handleMouseLeave,points:t})),s.default.createElement(m.default,{className:"recharts-radar-polygon"},e,i?this.renderDots(t):null)},e.prototype.renderPolygonWithAnimation=function(){var t=this,e=this.props,n=e.points,r=e.isAnimationActive,i=e.animationBegin,a=e.animationDuration,u=e.animationEasing,c=e.animationId,f=this.state.prevPoints;return s.default.createElement(l.default,{begin:i,duration:a,isActive:r,easing:u,from:{t:0},to:{t:1},key:"radar-"+c,onAnimationEnd:this.handleAnimationEnd,onAnimationStart:this.handleAnimationStart},(function(e){var r=e.t,i=f&&f.length/n.length,a=n.map((function(t,e){var n=f&&f[Math.floor(e*i)];if(n){var a=h.interpolateNumber(n.x,t.x),u=h.interpolateNumber(n.y,t.y);return o(o({},t),{x:a(r),y:u(r)})}var s=h.interpolateNumber(t.cx,t.x),l=h.interpolateNumber(t.cy,t.y);return o(o({},t),{x:s(r),y:l(r)})}));return t.renderPolygonStatically(a)}))},e.prototype.renderPolygon=function(){var t=this.props,e=t.points,n=t.isAnimationActive,r=this.state.prevPoints;return!(n&&e&&e.length)||r&&f.default.isEqual(r,e)?this.renderPolygonStatically(e):this.renderPolygonWithAnimation()},e.prototype.render=function(){var t=this.props,e=t.hide,n=t.className,r=t.points,i=t.isAnimationActive;if(e||!r||!r.length)return null;var o=this.state.isAnimationFinished,a=c.default("recharts-radar",n);return s.default.createElement(m.default,{className:a},this.renderPolygon(),(!i||o)&&_.default.renderCallByParent(this.props,r))},e.displayName="Radar",e.defaultProps={angleAxisId:0,radiusAxisId:0,hide:!1,activeDot:!0,dot:!1,legendType:"rect",isAnimationActive:!p.isSsr(),animationBegin:0,animationDuration:1500,animationEasing:"ease"},e.getComposedData=function(t){var e=t.radiusAxis,n=t.angleAxis,r=t.displayedData,i=t.dataKey,a=t.bandSize,u=n.cx,s=n.cy;return{points:r.map((function(t,r){var l=y.getValueByDataKey(t,n.dataKey,r),c=y.getValueByDataKey(t,i,0),f=n.scale(l)+(a||0),h=e.scale(c);return o(o({},d.polarToCartesian(u,s,h,f)),{name:l,value:c,cx:u,cy:s,radius:h,angle:f,payload:t})}))}},e}(s.PureComponent);e.default=b},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__rest||function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n},u=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e},s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var l=u(n(0)),c=s(n(4)),f=s(n(11)),h=s(n(3)),p=s(n(53)),d=s(n(7)),y=n(8),v=s(n(17)),g=s(n(32)),m=n(5),_=n(9),x=n(2),b=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.state={isAnimationFinished:!1},e.cachePrevData=function(t){e.setState({prevData:t})},e.handleAnimationEnd=function(){var t=e.props.onAnimationEnd;e.setState({isAnimationFinished:!0}),h.default.isFunction(t)&&t()},e.handleAnimationStart=function(){var t=e.props.onAnimationStart;e.setState({isAnimationFinished:!1}),h.default.isFunction(t)&&t()},e}return i(e,t),e.prototype.UNSAFE_componentWillReceiveProps=function(t){var e=this.props,n=e.animationId,r=e.data;t.animationId!==n&&this.cachePrevData(r)},e.prototype.getDeltaAngle=function(){var t=this.props,e=t.startAngle,n=t.endAngle;return m.mathSign(n-e)*Math.min(Math.abs(n-e),360)},e.renderSectorShape=function(t,e){return l.default.isValidElement(t)?l.default.cloneElement(t,e):h.default.isFunction(t)?t(e):l.default.createElement(p.default,e)},e.prototype.renderSectorsStatically=function(t){var n=this,r=this.props,i=r.shape,u=r.activeShape,s=r.activeIndex,l=r.cornerRadius,c=a(r,["shape","activeShape","activeIndex","cornerRadius"]),f=x.filterProps(c);return t.map((function(t,r){var a=o(o(o(o(o({},f),{cornerRadius:l}),t),x.adaptEventsOfChild(n.props,t,r)),{key:"sector-"+r,className:"recharts-radial-bar-sector",forceCornerRadius:c.forceCornerRadius,cornerIsExternal:c.cornerIsExternal});return e.renderSectorShape(r===s?u:i,a)}))},e.prototype.renderSectorsWithAnimation=function(){var t=this,e=this.props,n=e.data,r=e.isAnimationActive,i=e.animationBegin,a=e.animationDuration,u=e.animationEasing,s=e.animationId,c=this.state.prevData;return l.default.createElement(f.default,{begin:i,duration:a,isActive:r,easing:u,from:{t:0},to:{t:1},key:"radialBar-"+s,onAnimationStart:this.handleAnimationStart,onAnimationEnd:this.handleAnimationEnd},(function(e){var r=e.t,i=n.map((function(t,e){var n=c&&c[e];if(n){var i=m.interpolateNumber(n.startAngle,t.startAngle),a=m.interpolateNumber(n.endAngle,t.endAngle);return o(o({},t),{startAngle:i(r),endAngle:a(r)})}var u=t.endAngle,s=t.startAngle,l=m.interpolateNumber(s,u);return o(o({},t),{endAngle:l(r)})}));return l.default.createElement(d.default,null,t.renderSectorsStatically(i))}))},e.prototype.renderSectors=function(){var t=this.props,e=t.data,n=t.isAnimationActive,r=this.state.prevData;return!(n&&e&&e.length)||r&&h.default.isEqual(r,e)?this.renderSectorsStatically(e):this.renderSectorsWithAnimation()},e.prototype.renderBackground=function(t){var n=this,r=this.props.cornerRadius,i=x.filterProps(this.props.background);return t.map((function(t,u){t.value;var s=t.background,l=a(t,["value","background"]);if(!s)return null;var c=o(o(o(o(o(o({cornerRadius:r},l),{fill:"#eee"}),s),i),x.adaptEventsOfChild(n.props,t,u)),{index:u,key:"sector-"+u,className:"recharts-radial-bar-background-sector"});return e.renderSectorShape(s,c)}))},e.prototype.render=function(){var t=this.props,e=t.hide,n=t.data,r=t.className,i=t.background,a=t.isAnimationActive;if(e||!n||!n.length)return null;var u=this.state.isAnimationFinished,s=c.default("recharts-area",r);return l.default.createElement(d.default,{className:s},i&&l.default.createElement(d.default,{className:"recharts-radial-bar-background"},this.renderBackground(n)),l.default.createElement(d.default,{className:"recharts-radial-bar-sectors"},this.renderSectors()),(!a||u)&&v.default.renderCallByParent(o(o({},this.props),{clockWise:this.getDeltaAngle()<0}),n))},e.displayName="RadialBar",e.defaultProps={angleAxisId:0,radiusAxisId:0,minPointSize:0,hide:!1,legendType:"rect",data:[],isAnimationActive:!y.isSsr(),animationBegin:0,animationDuration:1500,animationEasing:"ease",forceCornerRadius:!1,cornerIsExternal:!1},e.getComposedData=function(t){var e=t.item,n=t.props,r=t.radiusAxis,i=t.radiusAxisTicks,a=t.angleAxis,u=t.angleAxisTicks,s=t.displayedData,l=t.dataKey,c=t.stackedData,f=t.barPosition,p=t.bandSize,d=t.dataStartIndex,v=_.findPositionOfBar(f,e);if(!v)return null;var x=a.cx,b=a.cy,w=n.layout,A=e.props,O=A.children,E=A.minPointSize,M="radial"===w?a:r,S=c?M.scale.domain():null,k=_.getBaseValueOfBar({numericAxis:M}),P=y.findAllByType(O,g.default.displayName);return{data:s.map((function(t,e){var s,f,y,g,A,O;if(c?s=_.truncateByDomain(c[d+e],S):(s=_.getValueByDataKey(t,l),h.default.isArray(s)||(s=[k,s])),"radial"===w){f=_.getCateCoordinateOfBar({axis:r,ticks:i,bandSize:p,offset:v.offset,entry:t,index:e}),A=a.scale(s[1]),g=a.scale(s[0]),y=f+v.size;var M=A-g;if(Math.abs(E)>0&&Math.abs(M)<Math.abs(E))A+=m.mathSign(M||E)*(Math.abs(E)-Math.abs(M));O={background:{cx:x,cy:b,innerRadius:f,outerRadius:y,startAngle:n.startAngle,endAngle:n.endAngle}}}else{f=r.scale(s[0]),y=r.scale(s[1]),A=(g=_.getCateCoordinateOfBar({axis:a,ticks:u,bandSize:p,offset:v.offset,entry:t,index:e}))+v.size;var N=y-f;if(Math.abs(E)>0&&Math.abs(N)<Math.abs(E))y+=m.mathSign(N||E)*(Math.abs(E)-Math.abs(N))}return o(o(o(o({},t),O),{payload:t,value:c?s:s[1],cx:x,cy:b,innerRadius:f,outerRadius:y,startAngle:g,endAngle:A}),P&&P[e]&&P[e].props)})),layout:w}},e}(l.PureComponent);e.default=b},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e},u=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var s=a(n(0)),l=u(n(4)),c=n(146),f=u(n(3)),h=u(n(7)),p=u(n(26)),d=n(9),y=n(5),v=n(337),g=function(t){return t.changedTouches&&!!t.changedTouches.length},m=function(t){function e(e){var n=t.call(this,e)||this;return n.handleDrag=function(t){n.leaveTimer&&(clearTimeout(n.leaveTimer),n.leaveTimer=null),n.state.isTravellerMoving?n.handleTravellerMove(t):n.state.isSlideMoving&&n.handleSlideDrag(t)},n.handleTouchMove=function(t){null!=t.changedTouches&&t.changedTouches.length>0&&n.handleDrag(t.changedTouches[0])},n.handleDragEnd=function(){n.setState({isTravellerMoving:!1,isSlideMoving:!1}),n.detachDragEndListener()},n.handleLeaveWrapper=function(){(n.state.isTravellerMoving||n.state.isSlideMoving)&&(n.leaveTimer=window.setTimeout(n.handleDragEnd,n.props.leaveTimeOut))},n.handleEnterSlideOrTraveller=function(){n.setState({isTextActive:!0})},n.handleLeaveSlideOrTraveller=function(){n.setState({isTextActive:!1})},n.handleSlideDragStart=function(t){var e=g(t)?t.changedTouches[0]:t;n.setState({isTravellerMoving:!1,isSlideMoving:!0,slideMoveStartX:e.pageX}),n.attachDragEndListener()},n.travellerDragStartHandlers={startX:n.handleTravellerDragStart.bind(n,"startX"),endX:n.handleTravellerDragStart.bind(n,"endX")},n.state=e.data&&e.data.length?n.updateScale(e):{},n}return i(e,t),e.prototype.UNSAFE_componentWillReceiveProps=function(t){var e=this,n=this.props,r=n.data,i=n.width,o=n.x,a=n.travellerWidth,u=n.updateId;(t.data!==r||t.updateId!==u)&&t.data&&t.data.length?this.setState(this.updateScale(t)):t.width===i&&t.x===o&&t.travellerWidth===a||(this.scale.range([t.x,t.x+t.width-t.travellerWidth]),this.scaleValues=this.scale.domain().map((function(t){return e.scale(t)})),this.setState({startX:this.scale(t.startIndex),endX:this.scale(t.endIndex)}))},e.prototype.componentWillUnmount=function(){this.scale=null,this.scaleValues=null,this.leaveTimer&&(clearTimeout(this.leaveTimer),this.leaveTimer=null),this.detachDragEndListener()},e.getIndexInRange=function(t,e){for(var n=0,r=t.length-1;r-n>1;){var i=Math.floor((n+r)/2);t[i]>e?r=i:n=i}return e>=t[r]?r:n},e.prototype.getIndex=function(t){var n=t.startX,r=t.endX,i=this.props,o=i.gap,a=i.data.length-1,u=Math.min(n,r),s=Math.max(n,r),l=e.getIndexInRange(this.scaleValues,u),c=e.getIndexInRange(this.scaleValues,s);return{startIndex:l-l%o,endIndex:c===a?a:c-c%o}},e.prototype.getTextOfTick=function(t){var e=this.props,n=e.data,r=e.tickFormatter,i=e.dataKey,o=d.getValueByDataKey(n[t],i,t);return f.default.isFunction(r)?r(o,t):o},e.prototype.attachDragEndListener=function(){window.addEventListener("mouseup",this.handleDragEnd,!0),window.addEventListener("touchend",this.handleDragEnd,!0)},e.prototype.detachDragEndListener=function(){window.removeEventListener("mouseup",this.handleDragEnd,!0),window.removeEventListener("touchend",this.handleDragEnd,!0)},e.prototype.handleSlideDrag=function(t){var e=this.state,n=e.slideMoveStartX,r=e.startX,i=e.endX,o=this.props,a=o.x,u=o.width,s=o.travellerWidth,l=o.startIndex,c=o.endIndex,f=o.onChange,h=t.pageX-n;h>0?h=Math.min(h,a+u-s-i,a+u-s-r):h<0&&(h=Math.max(h,a-r,a-i));var p=this.getIndex({startX:r+h,endX:i+h});p.startIndex===l&&p.endIndex===c||!f||f(p),this.setState({startX:r+h,endX:i+h,slideMoveStartX:t.pageX})},e.prototype.handleTravellerDragStart=function(t,e){var n=g(e)?e.changedTouches[0]:e;this.setState({isSlideMoving:!1,isTravellerMoving:!0,movingTravellerId:t,brushMoveStartX:n.pageX}),this.attachDragEndListener()},e.prototype.handleTravellerMove=function(t){var e,n=this.state,r=n.brushMoveStartX,i=n.movingTravellerId,o=n.endX,a=n.startX,u=this.state[i],s=this.props,l=s.x,c=s.width,f=s.travellerWidth,h=s.onChange,p=s.gap,d=s.data,y={startX:this.state.startX,endX:this.state.endX},v=t.pageX-r;v>0?v=Math.min(v,l+c-f-u):v<0&&(v=Math.max(v,l-u)),y[i]=u+v;var g=this.getIndex(y),m=g.startIndex,_=g.endIndex;this.setState(((e={})[i]=u+v,e.brushMoveStartX=t.pageX,e),(function(){var t;h&&(t=d.length-1,("startX"===i&&(o>a?m%p==0:_%p==0)||o<a&&_===t||"endX"===i&&(o>a?_%p==0:m%p==0)||o>a&&_===t)&&h(g))}))},e.prototype.updateScale=function(t){var e=this,n=t.data,r=t.startIndex,i=t.endIndex,o=t.x,a=t.width,u=t.travellerWidth,s=n.length;return this.scale=c.scalePoint().domain(f.default.range(0,s)).range([o,o+a-u]),this.scaleValues=this.scale.domain().map((function(t){return e.scale(t)})),{isTextActive:!1,isSlideMoving:!1,isTravellerMoving:!1,startX:this.scale(r),endX:this.scale(i)}},e.prototype.renderBackground=function(){var t=this.props,e=t.x,n=t.y,r=t.width,i=t.height,o=t.fill,a=t.stroke;return s.default.createElement("rect",{stroke:a,fill:o,x:e,y:n,width:r,height:i})},e.prototype.renderPanorama=function(){var t=this.props,e=t.x,n=t.y,r=t.width,i=t.height,o=t.data,a=t.children,u=t.padding,l=s.Children.only(a);return l?s.default.cloneElement(l,{x:e,y:n,width:r,height:i,margin:u,compact:!0,data:o}):null},e.prototype.renderTraveller=function(t,e){var n=this.props,r=n.y,i=n.travellerWidth,o=n.height,a=n.stroke,u=Math.floor(r+o/2)-1,l=Math.max(t,this.props.x);return s.default.createElement(h.default,{className:"recharts-brush-traveller",onMouseEnter:this.handleEnterSlideOrTraveller,onMouseLeave:this.handleLeaveSlideOrTraveller,onMouseDown:this.travellerDragStartHandlers[e],onTouchStart:this.travellerDragStartHandlers[e],style:{cursor:"col-resize"}},s.default.createElement("rect",{x:l,y:r,width:i,height:o,fill:a,stroke:"none"}),s.default.createElement("line",{x1:l+1,y1:u,x2:l+i-1,y2:u,fill:"none",stroke:"#fff"}),s.default.createElement("line",{x1:l+1,y1:u+2,x2:l+i-1,y2:u+2,fill:"none",stroke:"#fff"}))},e.prototype.renderSlide=function(t,e){var n=this.props,r=n.y,i=n.height,o=n.stroke;return s.default.createElement("rect",{className:"recharts-brush-slide",onMouseEnter:this.handleEnterSlideOrTraveller,onMouseLeave:this.handleLeaveSlideOrTraveller,onMouseDown:this.handleSlideDragStart,onTouchStart:this.handleSlideDragStart,style:{cursor:"move"},stroke:"none",fill:o,fillOpacity:.2,x:Math.min(t,e),y:r,width:Math.abs(e-t),height:i})},e.prototype.renderText=function(){var t=this.props,e=t.startIndex,n=t.endIndex,r=t.y,i=t.height,a=t.travellerWidth,u=t.stroke,l=this.state,c=l.startX,f=l.endX,d={pointerEvents:"none",fill:u};return s.default.createElement(h.default,{className:"recharts-brush-texts"},s.default.createElement(p.default,o({textAnchor:"end",verticalAnchor:"middle",x:Math.min(c,f)-5,y:r+i/2},d),this.getTextOfTick(e)),s.default.createElement(p.default,o({textAnchor:"start",verticalAnchor:"middle",x:Math.max(c,f)+a+5,y:r+i/2},d),this.getTextOfTick(n)))},e.prototype.render=function(){var t=this.props,e=t.data,n=t.className,r=t.children,i=t.x,o=t.y,a=t.width,u=t.height,c=t.alwaysShowText,f=this.state,p=f.startX,d=f.endX,g=f.isTextActive,m=f.isSlideMoving,_=f.isTravellerMoving;if(!e||!e.length||!y.isNumber(i)||!y.isNumber(o)||!y.isNumber(a)||!y.isNumber(u)||a<=0||u<=0)return null;var x=l.default("recharts-brush",n),b=1===s.default.Children.count(r),w=v.generatePrefixStyle("userSelect","none");return s.default.createElement(h.default,{className:x,onMouseMove:this.handleDrag,onMouseLeave:this.handleLeaveWrapper,onTouchMove:this.handleTouchMove,style:w},this.renderBackground(),b&&this.renderPanorama(),this.renderSlide(p,d),this.renderTraveller(p,"startX"),this.renderTraveller(d,"endX"),(g||m||_||c)&&this.renderText())},e.displayName="Brush",e.defaultProps={height:40,travellerWidth:5,gap:1,fill:"#fff",stroke:"#666",padding:{top:1,right:1,bottom:1,left:1},leaveTimeOut:1e3,alwaysShowText:!1},e}(s.PureComponent);e.default=m},function(t,e,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var o=i(n(0)),a=i(n(3)),u=i(n(4)),s=i(n(7)),l=i(n(20)),c=n(57),f=n(5),h=n(21),p=n(31),d=n(2),y=function(t,e){return o.default.isValidElement(t)?o.default.cloneElement(t,e):a.default.isFunction(t)?t(e):o.default.createElement("line",r({},e,{className:"recharts-reference-line-line"}))},v=function(t,e,n,r,i){var o=i.viewBox,u=o.x,s=o.y,l=o.width,f=o.height,h=i.position;if(n){var p=i.y,d=i.yAxis.orientation,y=t.y.apply(p,{position:h});if(c.ifOverflowMatches(i,"discard")&&!t.y.isInRange(y))return null;var v=[{x:u+l,y:y},{x:u,y:y}];return"left"===d?v.reverse():v}if(e){var g=i.x,m=i.xAxis.orientation;y=t.x.apply(g,{position:h});if(c.ifOverflowMatches(i,"discard")&&!t.x.isInRange(y))return null;v=[{x:y,y:s+f},{x:y,y:s}];return"top"===m?v.reverse():v}if(r){v=i.segment.map((function(e){return t.apply(e,{position:h})}));return c.ifOverflowMatches(i,"discard")&&a.default.some(v,(function(e){return!t.isInRange(e)}))?null:v}return null};function g(t){var e=t.x,n=t.y,i=t.segment,a=t.xAxis,g=t.yAxis,m=t.shape,_=t.className,x=t.alwaysShow,b=t.clipPathId;p.warn(void 0===x,'The alwaysShow prop is deprecated. Please use ifOverflow="extendDomain" instead.');var w=h.createLabeldScales({x:a.scale,y:g.scale}),A=f.isNumOrStr(e),O=f.isNumOrStr(n),E=i&&2===i.length,M=v(w,A,O,E,t);if(!M)return null;var S=M[0],k=S.x,P=S.y,N=M[1],C=N.x,T=N.y,j=c.ifOverflowMatches(t,"hidden")?"url(#"+b+")":void 0,I=r(r({clipPath:j},d.filterProps(t,!0)),{x1:k,y1:P,x2:C,y2:T});return o.default.createElement(s.default,{className:u.default("recharts-reference-line",_)},y(m,I),l.default.renderCallByParent(t,h.rectWithCoords({x1:k,y1:P,x2:C,y2:T})))}g.displayName="ReferenceLine",g.defaultProps={isFront:!1,ifOverflow:"discard",xAxisId:0,yAxisId:0,fill:"none",stroke:"#ccc",fillOpacity:1,strokeWidth:1,position:"middle"},e.default=g},function(t,e,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var o=i(n(0)),a=i(n(3)),u=i(n(4)),s=i(n(7)),l=i(n(27)),c=i(n(20)),f=n(5),h=n(57),p=n(21),d=n(31),y=n(2),v=function(t){var e=t.x,n=t.y,r=t.xAxis,i=t.yAxis,o=p.createLabeldScales({x:r.scale,y:i.scale}),a=o.apply({x:e,y:n},{bandAware:!0});return h.ifOverflowMatches(t,"discard")&&!o.isInRange(a)?null:a};function g(t){var e=t.x,n=t.y,i=t.r,a=t.alwaysShow,l=t.clipPathId,p=f.isNumOrStr(e),m=f.isNumOrStr(n);if(d.warn(void 0===a,'The alwaysShow prop is deprecated. Please use ifOverflow="extendDomain" instead.'),!p||!m)return null;var _=v(t);if(!_)return null;var x=_.x,b=_.y,w=t.shape,A=t.className,O=h.ifOverflowMatches(t,"hidden")?"url(#"+l+")":void 0,E=r(r({clipPath:O},y.filterProps(t,!0)),{cx:x,cy:b});return o.default.createElement(s.default,{className:u.default("recharts-reference-dot",A)},g.renderDot(w,E),c.default.renderCallByParent(t,{x:x-i,y:b-i,width:2*i,height:2*i}))}g.displayName="ReferenceDot",g.defaultProps={isFront:!1,ifOverflow:"discard",xAxisId:0,yAxisId:0,r:10,fill:"#fff",stroke:"#ccc",fillOpacity:1,strokeWidth:1},g.renderDot=function(t,e){return o.default.isValidElement(t)?o.default.cloneElement(t,e):a.default.isFunction(t)?t(e):o.default.createElement(l.default,r({},e,{cx:e.cx,cy:e.cy,className:"recharts-reference-dot-dot"}))},e.default=g},function(t,e,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var o=i(n(0)),a=i(n(3)),u=i(n(4)),s=i(n(7)),l=i(n(20)),c=n(21),f=n(57),h=n(5),p=n(31),d=i(n(34)),y=n(2),v=function(t,e,n,r,i){var o=i.x1,a=i.x2,u=i.y1,s=i.y2,l=i.xAxis,h=i.yAxis,p=c.createLabeldScales({x:l.scale,y:h.scale}),d={x:t?p.x.apply(o,{position:"start"}):p.x.rangeMin,y:n?p.y.apply(u,{position:"start"}):p.y.rangeMin},y={x:e?p.x.apply(a,{position:"end"}):p.x.rangeMax,y:r?p.y.apply(s,{position:"end"}):p.y.rangeMax};return!f.ifOverflowMatches(i,"discard")||p.isInRange(d)&&p.isInRange(y)?c.rectWithPoints(d,y):null};function g(t){var e=t.x1,n=t.x2,i=t.y1,a=t.y2,c=t.className,d=t.alwaysShow,m=t.clipPathId;p.warn(void 0===d,'The alwaysShow prop is deprecated. Please use ifOverflow="extendDomain" instead.');var _=h.isNumOrStr(e),x=h.isNumOrStr(n),b=h.isNumOrStr(i),w=h.isNumOrStr(a),A=t.shape;if(!(_||x||b||w||A))return null;var O=v(_,x,b,w,t);if(!O&&!A)return null;var E=f.ifOverflowMatches(t,"hidden")?"url(#"+m+")":void 0;return o.default.createElement(s.default,{className:u.default("recharts-reference-area",c)},g.renderRect(A,r(r({clipPath:E},y.filterProps(t,!0)),O)),l.default.renderCallByParent(t,O))}g.displayName="ReferenceArea",g.defaultProps={isFront:!1,ifOverflow:"discard",xAxisId:0,yAxisId:0,r:10,fill:"#ccc",fillOpacity:.5,stroke:"none",strokeWidth:1},g.renderRect=function(t,e){return o.default.isValidElement(t)?o.default.cloneElement(t,e):a.default.isFunction(t)?t(e):o.default.createElement(d.default,r({},e,{className:"recharts-reference-area-rect"}))},e.default=g},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__rest||function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n},u=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e},s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var l=u(n(0)),c=s(n(3)),f=s(n(4)),h=n(51),p=n(52),d=s(n(7)),y=s(n(26)),v=s(n(20)),g=n(8),m=n(5),_=n(2),x=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.getTicks=function(t){var n=t.tick,r=t.ticks,i=t.viewBox,o=t.minTickGap,a=t.orientation,u=t.interval,s=t.tickFormatter,l=t.unit;return r&&r.length&&n?m.isNumber(u)||g.isSsr()?e.getNumberIntervalTicks(r,"number"==typeof u&&m.isNumber(u)?u:0):"preserveStartEnd"===u?e.getTicksStart({ticks:r,tickFormatter:s,viewBox:i,orientation:a,minTickGap:o,unit:l},!0):"preserveStart"===u?e.getTicksStart({ticks:r,tickFormatter:s,viewBox:i,orientation:a,minTickGap:o,unit:l}):e.getTicksEnd({ticks:r,tickFormatter:s,viewBox:i,orientation:a,minTickGap:o,unit:l}):[]},e.getNumberIntervalTicks=function(t,e){return t.filter((function(t,n){return n%(e+1)==0}))},e.getTicksStart=function(t,e){var n,r,i=t.ticks,a=t.tickFormatter,u=t.viewBox,s=t.orientation,l=t.minTickGap,f=t.unit,h=u.x,d=u.y,y=u.width,v=u.height,g="top"===s||"bottom"===s?"width":"height",_=(i||[]).slice(),x=f&&"width"===g?p.getStringSize(f)[g]:0,b=_.length,w=b>=2?m.mathSign(_[1].coordinate-_[0].coordinate):1;if(1===w?(n="width"===g?h:d,r="width"===g?h+y:d+v):(n="width"===g?h+y:d+v,r="width"===g?h:d),e){var A=i[b-1],O=c.default.isFunction(a)?a(A.value,b-1):A.value,E=p.getStringSize(O)[g]+x,M=w*(A.coordinate+w*E/2-r);_[b-1]=A=o(o({},A),{tickCoord:M>0?A.coordinate-M*w:A.coordinate}),w*(A.tickCoord-w*E/2-n)>=0&&w*(A.tickCoord+w*E/2-r)<=0&&(r=A.tickCoord-w*(E/2+l),_[b-1]=o(o({},A),{isShow:!0}))}for(var S=e?b-1:b,k=0;k<S;k++){var P=_[k],N=c.default.isFunction(a)?a(P.value,k):P.value,C=p.getStringSize(N)[g]+x;if(0===k){var T=w*(P.coordinate-w*C/2-n);_[k]=P=o(o({},P),{tickCoord:T<0?P.coordinate-T*w:P.coordinate})}else _[k]=P=o(o({},P),{tickCoord:P.coordinate});w*(P.tickCoord-w*C/2-n)>=0&&w*(P.tickCoord+w*C/2-r)<=0&&(n=P.tickCoord+w*(C/2+l),_[k]=o(o({},P),{isShow:!0}))}return _.filter((function(t){return t.isShow}))},e.getTicksEnd=function(t){var e,n,r=t.ticks,i=t.tickFormatter,a=t.viewBox,u=t.orientation,s=t.minTickGap,l=t.unit,f=a.x,h=a.y,d=a.width,y=a.height,v="top"===u||"bottom"===u?"width":"height",g=l&&"width"===v?p.getStringSize(l)[v]:0,_=(r||[]).slice(),x=_.length,b=x>=2?m.mathSign(_[1].coordinate-_[0].coordinate):1;1===b?(e="width"===v?f:h,n="width"===v?f+d:h+y):(e="width"===v?f+d:h+y,n="width"===v?f:h);for(var w=x-1;w>=0;w--){var A=_[w],O=c.default.isFunction(i)?i(A.value,x-w-1):A.value,E=p.getStringSize(O)[v]+g;if(w===x-1){var M=b*(A.coordinate+b*E/2-n);_[w]=A=o(o({},A),{tickCoord:M>0?A.coordinate-M*b:A.coordinate})}else _[w]=A=o(o({},A),{tickCoord:A.coordinate});b*(A.tickCoord-b*E/2-e)>=0&&b*(A.tickCoord+b*E/2-n)<=0&&(n=A.tickCoord-b*(E/2+s),_[w]=o(o({},A),{isShow:!0}))}return _.filter((function(t){return t.isShow}))},e.prototype.shouldComponentUpdate=function(t){var e=t.viewBox,n=a(t,["viewBox"]),r=this.props,i=r.viewBox,o=a(r,["viewBox"]);return!h.shallowEqual(e,i)||!h.shallowEqual(n,o)},e.prototype.getTickLineCoord=function(t){var e,n,r,i,o,a,u=this.props,s=u.x,l=u.y,c=u.width,f=u.height,h=u.orientation,p=u.tickSize,d=u.mirror,y=u.tickMargin,v=d?-1:1,g=t.tickSize||p,_=m.isNumber(t.tickCoord)?t.tickCoord:t.coordinate;switch(h){case"top":e=n=t.coordinate,a=(r=(i=l+ +!d*f)-v*g)-v*y,o=_;break;case"left":r=i=t.coordinate,o=(e=(n=s+ +!d*c)-v*g)-v*y,a=_;break;case"right":r=i=t.coordinate,o=(e=(n=s+ +d*c)+v*g)+v*y,a=_;break;default:e=n=t.coordinate,a=(r=(i=l+ +d*f)+v*g)+v*y,o=_}return{line:{x1:e,y1:r,x2:n,y2:i},tick:{x:o,y:a}}},e.prototype.getTickTextAnchor=function(){var t,e=this.props,n=e.orientation,r=e.mirror;switch(n){case"left":t=r?"start":"end";break;case"right":t=r?"end":"start";break;default:t="middle"}return t},e.prototype.getTickVerticalAnchor=function(){var t=this.props,e=t.orientation,n=t.mirror,r="end";switch(e){case"left":case"right":r="middle";break;case"top":r=n?"start":"end";break;default:r=n?"end":"start"}return r},e.prototype.renderAxisLine=function(){var t=this.props,e=t.x,n=t.y,r=t.width,i=t.height,a=t.orientation,u=t.mirror,s=t.axisLine,h=o(o(o({},_.filterProps(this.props)),_.filterProps(s)),{fill:"none"});if("top"===a||"bottom"===a){var p=+("top"===a&&!u||"bottom"===a&&u);h=o(o({},h),{x1:e,y1:n+p*i,x2:e+r,y2:n+p*i})}else{var d=+("left"===a&&!u||"right"===a&&u);h=o(o({},h),{x1:e+d*r,y1:n,x2:e+d*r,y2:n+i})}return l.default.createElement("line",o({},h,{className:f.default("recharts-cartesian-axis-line",c.default.get(s,"className"))}))},e.renderTickItem=function(t,e,n){return l.default.isValidElement(t)?l.default.cloneElement(t,e):c.default.isFunction(t)?t(e):l.default.createElement(y.default,o({},e,{className:"recharts-cartesian-axis-tick-value"}),n)},e.prototype.renderTicks=function(t){var n=this,r=this.props,i=r.tickLine,a=r.stroke,u=r.tick,s=r.tickFormatter,h=r.unit,p=e.getTicks(o(o({},this.props),{ticks:t})),y=this.getTickTextAnchor(),v=this.getTickVerticalAnchor(),g=_.filterProps(this.props),m=_.filterProps(u),x=o(o(o({},g),{fill:"none"}),_.filterProps(i)),b=p.map((function(t,r){var b=n.getTickLineCoord(t),w=b.line,A=b.tick,O=o(o(o(o(o({textAnchor:y,verticalAnchor:v},g),{stroke:"none",fill:a}),m),A),{index:r,payload:t,visibleTicksCount:p.length});return l.default.createElement(d.default,o({className:"recharts-cartesian-axis-tick",key:"tick-"+r},_.adaptEventsOfChild(n.props,t,r)),i&&l.default.createElement("line",o({},x,w,{className:f.default("recharts-cartesian-axis-tick-line",c.default.get(i,"className"))})),u&&e.renderTickItem(u,O,""+(c.default.isFunction(s)?s(t.value,r):t.value)+(h||"")))}));return l.default.createElement("g",{className:"recharts-cartesian-axis-ticks"},b)},e.prototype.render=function(){var t=this.props,e=t.axisLine,n=t.width,r=t.height,i=t.ticksGenerator,o=t.className;if(t.hide)return null;var u=this.props,s=u.ticks,h=a(u,["ticks"]),p=s;return c.default.isFunction(i)&&(p=s&&s.length>0?i(this.props):i(h)),n<=0||r<=0||!p||!p.length?null:l.default.createElement(d.default,{className:f.default("recharts-cartesian-axis",o)},e&&this.renderAxisLine(),this.renderTicks(p),v.default.renderCallByParent(this.props))},e.displayName="CartesianAxis",e.defaultProps={x:0,y:0,width:0,height:0,viewBox:{x:0,y:0,width:0,height:0},orientation:"bottom",ticks:[],stroke:"#666",tickLine:!0,axisLine:!0,tick:!0,mirror:!1,minTickGap:5,tickSize:6,tickMargin:2,interval:"preserveEnd"},e}(l.Component);e.default=x},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e},u=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var s=a(n(0)),l=u(n(11)),c=u(n(4)),f=u(n(3)),h=u(n(7)),p=u(n(145)),d=u(n(17)),y=u(n(32)),v=n(8),g=n(5),m=n(9),_=n(2),x=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.state={isAnimationFinished:!1},e.cachePrevData=function(t){e.setState({prevTrapezoids:t})},e.handleAnimationEnd=function(){var t=e.props.onAnimationEnd;e.setState({isAnimationFinished:!0}),f.default.isFunction(t)&&t()},e.handleAnimationStart=function(){var t=e.props.onAnimationStart;e.setState({isAnimationFinished:!1}),f.default.isFunction(t)&&t()},e}return i(e,t),e.prototype.UNSAFE_componentWillReceiveProps=function(t){var e=this.props,n=e.animationId,r=e.trapezoids;t.isAnimationActive!==this.props.isAnimationActive?this.cachePrevData([]):t.animationId!==n&&this.cachePrevData(r)},e.prototype.isActiveIndex=function(t){var e=this.props.activeIndex;return Array.isArray(e)?-1!==e.indexOf(t):t===e},e.renderTrapezoidItem=function(t,e){return s.default.isValidElement(t)?s.default.cloneElement(t,e):f.default.isFunction(t)?t(e):f.default.isPlainObject(t)?s.default.createElement(p.default,o({},e,t)):s.default.createElement(p.default,o({},e))},e.prototype.renderTrapezoidsStatically=function(t){var n=this,r=this.props.activeShape;return t.map((function(t,i){var a=n.isActiveIndex(i)?r:null,u=o(o({},t),{stroke:t.stroke});return s.default.createElement(h.default,o({className:"recharts-funnel-trapezoid"},_.adaptEventsOfChild(n.props,t,i),{key:"trapezoid-"+i}),e.renderTrapezoidItem(a,u))}))},e.prototype.renderTrapezoidsWithAnimation=function(){var t=this,e=this.props,n=e.trapezoids,r=e.isAnimationActive,i=e.animationBegin,a=e.animationDuration,u=e.animationEasing,c=e.animationId,f=this.state.prevTrapezoids;return s.default.createElement(l.default,{begin:i,duration:a,isActive:r,easing:u,from:{t:0},to:{t:1},key:"funnel-"+c,onAnimationStart:this.handleAnimationStart,onAnimationEnd:this.handleAnimationEnd},(function(e){var r=e.t,i=n.map((function(t,e){var n=f&&f[e];if(n){var i=g.interpolateNumber(n.x,t.x),a=g.interpolateNumber(n.y,t.y),u=g.interpolateNumber(n.upperWidth,t.upperWidth),s=g.interpolateNumber(n.lowerWidth,t.lowerWidth),l=g.interpolateNumber(n.height,t.height);return o(o({},t),{x:i(r),y:a(r),upperWidth:u(r),lowerWidth:s(r),height:l(r)})}var c=g.interpolateNumber(t.x+t.upperWidth/2,t.x),h=g.interpolateNumber(t.y+t.height/2,t.y),p=g.interpolateNumber(0,t.upperWidth),d=g.interpolateNumber(0,t.lowerWidth),y=g.interpolateNumber(0,t.height);return o(o({},t),{x:c(r),y:h(r),upperWidth:p(r),lowerWidth:d(r),height:y(r)})}));return s.default.createElement(h.default,null,t.renderTrapezoidsStatically(i))}))},e.prototype.renderTrapezoids=function(){var t=this.props,e=t.trapezoids,n=t.isAnimationActive,r=this.state.prevTrapezoids;return!(n&&e&&e.length)||r&&f.default.isEqual(r,e)?this.renderTrapezoidsStatically(e):this.renderTrapezoidsWithAnimation()},e.prototype.render=function(){var t=this.props,e=t.hide,n=t.trapezoids,r=t.className,i=t.isAnimationActive,o=this.state.isAnimationFinished;if(e||!n||!n.length)return null;var a=c.default("recharts-trapezoids",r);return s.default.createElement(h.default,{className:a},this.renderTrapezoids(),(!i||o)&&d.default.renderCallByParent(this.props,n))},e.displayName="Funnel",e.defaultProps={stroke:"#fff",fill:"#808080",legendType:"rect",labelLine:!0,hide:!1,isAnimationActive:!v.isSsr(),animationBegin:400,animationDuration:1500,animationEasing:"ease",nameKey:"name"},e.getRealFunnelData=function(t){var e=t.props,n=e.data,r=e.children,i=_.filterProps(t.props),a=v.findAllByType(r,y.default.displayName);return n&&n.length?n.map((function(t,e){return o(o(o({payload:t},i),t),a&&a[e]&&a[e].props)})):a&&a.length?a.map((function(t){return o(o({},i),t.props)})):[]},e.getRealWidthHeight=function(t,e){var n=t.props.width,r=e.width,i=e.height,o=e.left,a=e.right,u=e.top,s=e.bottom,l=i,c=r;return f.default.isNumber(n)?c=n:f.default.isString(n)&&(c=c*parseFloat(n)/100),{realWidth:c-o-a-50,realHeight:l-s-u,offsetX:(r-c)/2,offsetY:(i-l)/2}},e.getComposedData=function(t){var n=t.item,r=t.offset,i=t.onItemMouseLeave,a=t.onItemMouseEnter,u=e.getRealFunnelData(n),s=n.props,l=s.dataKey,c=s.nameKey,h=s.tooltipType,p=r.left,d=r.top,y=e.getRealWidthHeight(n,r),v=y.realHeight,g=y.realWidth,_=y.offsetX,x=y.offsetY,b=m.getValueByDataKey(u[0],l,0),w=u.length,A=v/w;return{trapezoids:u.map((function(t,e){var n=m.getValueByDataKey(t,l,0),r=m.getValueByDataKey(t,c,e),i=0;e!==w-1&&(i=m.getValueByDataKey(u[e+1],l,0));var a=(b-n)*g/(2*b)+d+25+_,s=v/w*e+p+x,y=n/b*g,O=i/b*g,E=[{name:r,value:n,payload:t,dataKey:l,type:h}],M={x:a+y/2,y:s+A/2};return o(o({x:a,y:s,width:Math.max(y,O),upperWidth:y,lowerWidth:O,height:A,name:r,val:n,tooltipPayload:E,tooltipPosition:M},f.default.omit(t,"width")),{payload:t})})),data:u,onMouseLeave:i,onMouseEnter:a}},e}(s.PureComponent);e.default=x},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e},u=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var s=a(n(0)),l=u(n(4)),c=u(n(11)),f=n(2),h=function(t,e,n,r,i){var o,a=n-r;return o="M "+t+","+e,o+="L "+(t+n)+","+e,o+="L "+(t+n-a/2)+","+(e+i),o+="L "+(t+n-a/2-r)+","+(e+i),o+="L "+t+","+e+" Z"},p=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.state={totalLength:-1},e}return i(e,t),e.prototype.componentDidMount=function(){if(this.node&&this.node.getTotalLength)try{var t=this.node.getTotalLength();t&&this.setState({totalLength:t})}catch(t){}},e.prototype.render=function(){var t=this,e=this.props,n=e.x,r=e.y,i=e.upperWidth,a=e.lowerWidth,u=e.height,p=e.className,d=this.state.totalLength,y=this.props,v=y.animationEasing,g=y.animationDuration,m=y.animationBegin,_=y.isUpdateAnimationActive;if(n!==+n||r!==+r||i!==+i||a!==+a||u!==+u||0===i&&0===a||0===u)return null;var x=l.default("recharts-trapezoid",p);return _?s.default.createElement(c.default,{canBegin:d>0,from:{upperWidth:0,lowerWidth:0,height:u,x:n,y:r},to:{upperWidth:i,lowerWidth:a,height:u,x:n,y:r},duration:g,animationEasing:v,isActive:_},(function(e){var n=e.upperWidth,r=e.lowerWidth,i=e.height,a=e.x,u=e.y;return s.default.createElement(c.default,{canBegin:d>0,from:"0px "+(-1===d?1:d)+"px",to:d+"px 0px",attributeName:"strokeDasharray",begin:m,duration:g,easing:v},s.default.createElement("path",o({},f.filterProps(t.props,!0),{className:x,d:h(a,u,n,r,i),ref:function(e){t.node=e}})))})):s.default.createElement("g",null,s.default.createElement("path",o({},f.filterProps(this.props,!0),{className:x,d:h(n,r,i,a,u)})))},e.defaultProps={x:0,y:0,upperWidth:0,lowerWidth:0,height:0,isUpdateAnimationActive:!1,animationBegin:0,animationDuration:1500,animationEasing:"ease"},e}(s.PureComponent);e.default=p},function(t,e,n){"use strict";n.r(e);var r=function(t,e,n){t=+t,e=+e,n=(i=arguments.length)<2?(e=t,t=0,1):i<3?1:+n;for(var r=-1,i=0|Math.max(0,Math.ceil((e-t)/n)),o=new Array(i);++r<i;)o[r]=t+r*n;return o};function i(t,e){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(e).domain(t)}return this}function o(t,e){switch(arguments.length){case 0:break;case 1:this.interpolator(t);break;default:this.interpolator(e).domain(t)}return this}const a=Symbol("implicit");function u(){var t=new Map,e=[],n=[],r=a;function o(i){var o=i+"",u=t.get(o);if(!u){if(r!==a)return r;t.set(o,u=e.push(i))}return n[(u-1)%n.length]}return o.domain=function(n){if(!arguments.length)return e.slice();e=[],t=new Map;for(const r of n){const n=r+"";t.has(n)||t.set(n,e.push(r))}return o},o.range=function(t){return arguments.length?(n=Array.from(t),o):n.slice()},o.unknown=function(t){return arguments.length?(r=t,o):r},o.copy=function(){return u(e,n).unknown(r)},i.apply(o,arguments),o}function s(){var t,e,n=u().unknown(void 0),o=n.domain,a=n.range,l=0,c=1,f=!1,h=0,p=0,d=.5;function y(){var n=o().length,i=c<l,u=i?c:l,s=i?l:c;t=(s-u)/Math.max(1,n-h+2*p),f&&(t=Math.floor(t)),u+=(s-u-t*(n-h))*d,e=t*(1-h),f&&(u=Math.round(u),e=Math.round(e));var y=r(n).map((function(e){return u+t*e}));return a(i?y.reverse():y)}return delete n.unknown,n.domain=function(t){return arguments.length?(o(t),y()):o()},n.range=function(t){return arguments.length?([l,c]=t,l=+l,c=+c,y()):[l,c]},n.rangeRound=function(t){return[l,c]=t,l=+l,c=+c,f=!0,y()},n.bandwidth=function(){return e},n.step=function(){return t},n.round=function(t){return arguments.length?(f=!!t,y()):f},n.padding=function(t){return arguments.length?(h=Math.min(1,p=+t),y()):h},n.paddingInner=function(t){return arguments.length?(h=Math.min(1,t),y()):h},n.paddingOuter=function(t){return arguments.length?(p=+t,y()):p},n.align=function(t){return arguments.length?(d=Math.max(0,Math.min(1,t)),y()):d},n.copy=function(){return s(o(),[l,c]).round(f).paddingInner(h).paddingOuter(p).align(d)},i.apply(y(),arguments)}function l(){return function t(e){var n=e.copy;return e.padding=e.paddingOuter,delete e.paddingInner,delete e.paddingOuter,e.copy=function(){return t(n())},e}(s.apply(null,arguments).paddingInner(1))}var c=Math.sqrt(50),f=Math.sqrt(10),h=Math.sqrt(2),p=function(t,e,n){var r,i,o,a,u=-1;if(n=+n,(t=+t)===(e=+e)&&n>0)return[t];if((r=e<t)&&(i=t,t=e,e=i),0===(a=d(t,e,n))||!isFinite(a))return[];if(a>0)for(t=Math.ceil(t/a),e=Math.floor(e/a),o=new Array(i=Math.ceil(e-t+1));++u<i;)o[u]=(t+u)*a;else for(t=Math.floor(t*a),e=Math.ceil(e*a),o=new Array(i=Math.ceil(t-e+1));++u<i;)o[u]=(t-u)/a;return r&&o.reverse(),o};function d(t,e,n){var r=(e-t)/Math.max(0,n),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=c?10:o>=f?5:o>=h?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=c?10:o>=f?5:o>=h?2:1)}function y(t,e,n){var r=Math.abs(e-t)/Math.max(0,n),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=c?i*=10:o>=f?i*=5:o>=h&&(i*=2),e<t?-i:i}var v=function(t,e){return t<e?-1:t>e?1:t>=e?0:NaN},g=function(t){var e;return 1===t.length&&(e=t,t=function(t,n){return v(e(t),n)}),{left:function(e,n,r,i){for(null==r&&(r=0),null==i&&(i=e.length);r<i;){var o=r+i>>>1;t(e[o],n)<0?r=o+1:i=o}return r},right:function(e,n,r,i){for(null==r&&(r=0),null==i&&(i=e.length);r<i;){var o=r+i>>>1;t(e[o],n)>0?i=o:r=o+1}return r}}};var m=g(v),_=m.right,x=(m.left,_),b=function(t,e,n){t.prototype=e.prototype=n,n.constructor=t};function w(t,e){var n=Object.create(t.prototype);for(var r in e)n[r]=e[r];return n}function A(){}var O="\\s*([+-]?\\d+)\\s*",E="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",M="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",S=/^#([0-9a-f]{3})$/,k=/^#([0-9a-f]{6})$/,P=new RegExp("^rgb\\("+[O,O,O]+"\\)$"),N=new RegExp("^rgb\\("+[M,M,M]+"\\)$"),C=new RegExp("^rgba\\("+[O,O,O,E]+"\\)$"),T=new RegExp("^rgba\\("+[M,M,M,E]+"\\)$"),j=new RegExp("^hsl\\("+[E,M,M]+"\\)$"),I=new RegExp("^hsla\\("+[E,M,M,E]+"\\)$"),D={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function R(){return this.rgb().formatHex()}function L(){return this.rgb().formatRgb()}function B(t){var e;return t=(t+"").trim().toLowerCase(),(e=S.exec(t))?new U((e=parseInt(e[1],16))>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):(e=k.exec(t))?F(parseInt(e[1],16)):(e=P.exec(t))?new U(e[1],e[2],e[3],1):(e=N.exec(t))?new U(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=C.exec(t))?z(e[1],e[2],e[3],e[4]):(e=T.exec(t))?z(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=j.exec(t))?K(e[1],e[2]/100,e[3]/100,1):(e=I.exec(t))?K(e[1],e[2]/100,e[3]/100,e[4]):D.hasOwnProperty(t)?F(D[t]):"transparent"===t?new U(NaN,NaN,NaN,0):null}function F(t){return new U(t>>16&255,t>>8&255,255&t,1)}function z(t,e,n,r){return r<=0&&(t=e=n=NaN),new U(t,e,n,r)}function W(t){return t instanceof A||(t=B(t)),t?new U((t=t.rgb()).r,t.g,t.b,t.opacity):new U}function V(t,e,n,r){return 1===arguments.length?W(t):new U(t,e,n,null==r?1:r)}function U(t,e,n,r){this.r=+t,this.g=+e,this.b=+n,this.opacity=+r}function q(){return"#"+H(this.r)+H(this.g)+H(this.b)}function G(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function H(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function K(t,e,n,r){return r<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new $(t,e,n,r)}function X(t){if(t instanceof $)return new $(t.h,t.s,t.l,t.opacity);if(t instanceof A||(t=B(t)),!t)return new $;if(t instanceof $)return t;var e=(t=t.rgb()).r/255,n=t.g/255,r=t.b/255,i=Math.min(e,n,r),o=Math.max(e,n,r),a=NaN,u=o-i,s=(o+i)/2;return u?(a=e===o?(n-r)/u+6*(n<r):n===o?(r-e)/u+2:(e-n)/u+4,u/=s<.5?o+i:2-o-i,a*=60):u=s>0&&s<1?0:a,new $(a,u,s,t.opacity)}function Y(t,e,n,r){return 1===arguments.length?X(t):new $(t,e,n,null==r?1:r)}function $(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function Z(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}b(A,B,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:R,formatHex:R,formatHsl:function(){return X(this).formatHsl()},formatRgb:L,toString:L}),b(U,V,w(A,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new U(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new U(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:q,formatHex:q,formatRgb:G,toString:G})),b($,Y,w(A,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new $(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new $(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*e,i=2*n-r;return new U(Z(t>=240?t-240:t+120,i,r),Z(t,i,r),Z(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));var J=Math.PI/180,Q=180/Math.PI,tt=.96422,et=1,nt=.82521,rt=4/29,it=6/29,ot=3*it*it,at=it*it*it;function ut(t){if(t instanceof lt)return new lt(t.l,t.a,t.b,t.opacity);if(t instanceof vt)return gt(t);t instanceof U||(t=W(t));var e,n,r=pt(t.r),i=pt(t.g),o=pt(t.b),a=ct((.2225045*r+.7168786*i+.0606169*o)/et);return r===i&&i===o?e=n=a:(e=ct((.4360747*r+.3850649*i+.1430804*o)/tt),n=ct((.0139322*r+.0971045*i+.7141733*o)/nt)),new lt(116*a-16,500*(e-a),200*(a-n),t.opacity)}function st(t,e,n,r){return 1===arguments.length?ut(t):new lt(t,e,n,null==r?1:r)}function lt(t,e,n,r){this.l=+t,this.a=+e,this.b=+n,this.opacity=+r}function ct(t){return t>at?Math.pow(t,1/3):t/ot+rt}function ft(t){return t>it?t*t*t:ot*(t-rt)}function ht(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function pt(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function dt(t){if(t instanceof vt)return new vt(t.h,t.c,t.l,t.opacity);if(t instanceof lt||(t=ut(t)),0===t.a&&0===t.b)return new vt(NaN,0<t.l&&t.l<100?0:NaN,t.l,t.opacity);var e=Math.atan2(t.b,t.a)*Q;return new vt(e<0?e+360:e,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function yt(t,e,n,r){return 1===arguments.length?dt(t):new vt(t,e,n,null==r?1:r)}function vt(t,e,n,r){this.h=+t,this.c=+e,this.l=+n,this.opacity=+r}function gt(t){if(isNaN(t.h))return new lt(t.l,0,0,t.opacity);var e=t.h*J;return new lt(t.l,Math.cos(e)*t.c,Math.sin(e)*t.c,t.opacity)}b(lt,st,w(A,{brighter:function(t){return new lt(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new lt(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,e=isNaN(this.a)?t:t+this.a/500,n=isNaN(this.b)?t:t-this.b/200;return new U(ht(3.1338561*(e=tt*ft(e))-1.6168667*(t=et*ft(t))-.4906146*(n=nt*ft(n))),ht(-.9787684*e+1.9161415*t+.033454*n),ht(.0719453*e-.2289914*t+1.4052427*n),this.opacity)}})),b(vt,yt,w(A,{brighter:function(t){return new vt(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new vt(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return gt(this).rgb()}}));var mt=-.14861,_t=1.78277,xt=-.29227,bt=-.90649,wt=1.97294,At=wt*bt,Ot=wt*_t,Et=_t*xt-bt*mt;function Mt(t,e,n,r){return 1===arguments.length?function(t){if(t instanceof St)return new St(t.h,t.s,t.l,t.opacity);t instanceof U||(t=W(t));var e=t.r/255,n=t.g/255,r=t.b/255,i=(Et*r+At*e-Ot*n)/(Et+At-Ot),o=r-i,a=(wt*(n-i)-xt*o)/bt,u=Math.sqrt(a*a+o*o)/(wt*i*(1-i)),s=u?Math.atan2(a,o)*Q-120:NaN;return new St(s<0?s+360:s,u,i,t.opacity)}(t):new St(t,e,n,null==r?1:r)}function St(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function kt(t,e,n,r,i){var o=t*t,a=o*t;return((1-3*t+3*o-a)*e+(4-6*o+3*a)*n+(1+3*t+3*o-3*a)*r+a*i)/6}b(St,Mt,w(A,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new St(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new St(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*J,e=+this.l,n=isNaN(this.s)?0:this.s*e*(1-e),r=Math.cos(t),i=Math.sin(t);return new U(255*(e+n*(mt*r+_t*i)),255*(e+n*(xt*r+bt*i)),255*(e+n*(wt*r)),this.opacity)}}));var Pt=function(t){return function(){return t}};function Nt(t,e){return function(n){return t+n*e}}function Ct(t,e){var n=e-t;return n?Nt(t,n>180||n<-180?n-360*Math.round(n/360):n):Pt(isNaN(t)?e:t)}function Tt(t){return 1==(t=+t)?jt:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(r){return Math.pow(t+r*e,n)}}(e,n,t):Pt(isNaN(e)?n:e)}}function jt(t,e){var n=e-t;return n?Nt(t,n):Pt(isNaN(t)?e:t)}var It=function t(e){var n=Tt(e);function r(t,e){var r=n((t=V(t)).r,(e=V(e)).r),i=n(t.g,e.g),o=n(t.b,e.b),a=jt(t.opacity,e.opacity);return function(e){return t.r=r(e),t.g=i(e),t.b=o(e),t.opacity=a(e),t+""}}return r.gamma=t,r}(1);function Dt(t){return function(e){var n,r,i=e.length,o=new Array(i),a=new Array(i),u=new Array(i);for(n=0;n<i;++n)r=V(e[n]),o[n]=r.r||0,a[n]=r.g||0,u[n]=r.b||0;return o=t(o),a=t(a),u=t(u),r.opacity=1,function(t){return r.r=o(t),r.g=a(t),r.b=u(t),r+""}}}Dt((function(t){var e=t.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),i=t[r],o=t[r+1],a=r>0?t[r-1]:2*i-o,u=r<e-1?t[r+2]:2*o-i;return kt((n-r/e)*e,a,i,o,u)}})),Dt((function(t){var e=t.length;return function(n){var r=Math.floor(((n%=1)<0?++n:n)*e),i=t[(r+e-1)%e],o=t[r%e],a=t[(r+1)%e],u=t[(r+2)%e];return kt((n-r/e)*e,i,o,a,u)}}));var Rt=function(t,e){var n,r=e?e.length:0,i=t?Math.min(r,t.length):0,o=new Array(i),a=new Array(r);for(n=0;n<i;++n)o[n]=Kt(t[n],e[n]);for(;n<r;++n)a[n]=e[n];return function(t){for(n=0;n<i;++n)a[n]=o[n](t);return a}},Lt=function(t,e){var n=new Date;return e-=t=+t,function(r){return n.setTime(t+e*r),n}},Bt=function(t,e){return e-=t=+t,function(n){return t+e*n}},Ft=function(t,e){var n,r={},i={};for(n in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)n in t?r[n]=Kt(t[n],e[n]):i[n]=e[n];return function(t){for(n in r)i[n]=r[n](t);return i}},zt=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Wt=new RegExp(zt.source,"g");var Vt,Ut,qt,Gt,Ht=function(t,e){var n,r,i,o=zt.lastIndex=Wt.lastIndex=0,a=-1,u=[],s=[];for(t+="",e+="";(n=zt.exec(t))&&(r=Wt.exec(e));)(i=r.index)>o&&(i=e.slice(o,i),u[a]?u[a]+=i:u[++a]=i),(n=n[0])===(r=r[0])?u[a]?u[a]+=r:u[++a]=r:(u[++a]=null,s.push({i:a,x:Bt(n,r)})),o=Wt.lastIndex;return o<e.length&&(i=e.slice(o),u[a]?u[a]+=i:u[++a]=i),u.length<2?s[0]?function(t){return function(e){return t(e)+""}}(s[0].x):function(t){return function(){return t}}(e):(e=s.length,function(t){for(var n,r=0;r<e;++r)u[(n=s[r]).i]=n.x(t);return u.join("")})},Kt=function(t,e){var n,r=typeof e;return null==e||"boolean"===r?Pt(e):("number"===r?Bt:"string"===r?(n=B(e))?(e=n,It):Ht:e instanceof B?It:e instanceof Date?Lt:Array.isArray(e)?Rt:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?Ft:Bt)(t,e)},Xt=function(t,e){return e-=t=+t,function(n){return Math.round(t+e*n)}},Yt=180/Math.PI,$t={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},Zt=function(t,e,n,r,i,o){var a,u,s;return(a=Math.sqrt(t*t+e*e))&&(t/=a,e/=a),(s=t*n+e*r)&&(n-=t*s,r-=e*s),(u=Math.sqrt(n*n+r*r))&&(n/=u,r/=u,s/=u),t*r<e*n&&(t=-t,e=-e,s=-s,a=-a),{translateX:i,translateY:o,rotate:Math.atan2(e,t)*Yt,skewX:Math.atan(s)*Yt,scaleX:a,scaleY:u}};function Jt(t,e,n,r){function i(t){return t.length?t.pop()+" ":""}return function(o,a){var u=[],s=[];return o=t(o),a=t(a),function(t,r,i,o,a,u){if(t!==i||r!==o){var s=a.push("translate(",null,e,null,n);u.push({i:s-4,x:Bt(t,i)},{i:s-2,x:Bt(r,o)})}else(i||o)&&a.push("translate("+i+e+o+n)}(o.translateX,o.translateY,a.translateX,a.translateY,u,s),function(t,e,n,o){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),o.push({i:n.push(i(n)+"rotate(",null,r)-2,x:Bt(t,e)})):e&&n.push(i(n)+"rotate("+e+r)}(o.rotate,a.rotate,u,s),function(t,e,n,o){t!==e?o.push({i:n.push(i(n)+"skewX(",null,r)-2,x:Bt(t,e)}):e&&n.push(i(n)+"skewX("+e+r)}(o.skewX,a.skewX,u,s),function(t,e,n,r,o,a){if(t!==n||e!==r){var u=o.push(i(o)+"scale(",null,",",null,")");a.push({i:u-4,x:Bt(t,n)},{i:u-2,x:Bt(e,r)})}else 1===n&&1===r||o.push(i(o)+"scale("+n+","+r+")")}(o.scaleX,o.scaleY,a.scaleX,a.scaleY,u,s),o=a=null,function(t){for(var e,n=-1,r=s.length;++n<r;)u[(e=s[n]).i]=e.x(t);return u.join("")}}}Jt((function(t){return"none"===t?$t:(Vt||(Vt=document.createElement("DIV"),Ut=document.documentElement,qt=document.defaultView),Vt.style.transform=t,t=qt.getComputedStyle(Ut.appendChild(Vt),null).getPropertyValue("transform"),Ut.removeChild(Vt),t=t.slice(7,-1).split(","),Zt(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))}),"px, ","px)","deg)"),Jt((function(t){return null==t?$t:(Gt||(Gt=document.createElementNS("http://www.w3.org/2000/svg","g")),Gt.setAttribute("transform",t),(t=Gt.transform.baseVal.consolidate())?(t=t.matrix,Zt(t.a,t.b,t.c,t.d,t.e,t.f)):$t)}),", ",")",")"),Math.SQRT2;function Qt(t){return function(e,n){var r=t((e=Y(e)).h,(n=Y(n)).h),i=jt(e.s,n.s),o=jt(e.l,n.l),a=jt(e.opacity,n.opacity);return function(t){return e.h=r(t),e.s=i(t),e.l=o(t),e.opacity=a(t),e+""}}}Qt(Ct),Qt(jt);function te(t){return function(e,n){var r=t((e=yt(e)).h,(n=yt(n)).h),i=jt(e.c,n.c),o=jt(e.l,n.l),a=jt(e.opacity,n.opacity);return function(t){return e.h=r(t),e.c=i(t),e.l=o(t),e.opacity=a(t),e+""}}}te(Ct),te(jt);function ee(t){return function e(n){function r(e,r){var i=t((e=Mt(e)).h,(r=Mt(r)).h),o=jt(e.s,r.s),a=jt(e.l,r.l),u=jt(e.opacity,r.opacity);return function(t){return e.h=i(t),e.s=o(t),e.l=a(Math.pow(t,n)),e.opacity=u(t),e+""}}return n=+n,r.gamma=e,r}(1)}ee(Ct),ee(jt);var ne=function(t){return function(){return t}},re=function(t){return+t},ie=[0,1];function oe(t){return t}function ae(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:ne(isNaN(e)?NaN:.5)}function ue(t,e,n){var r=t[0],i=t[1],o=e[0],a=e[1];return i<r?(r=ae(i,r),o=n(a,o)):(r=ae(r,i),o=n(o,a)),function(t){return o(r(t))}}function se(t,e,n){var r=Math.min(t.length,e.length)-1,i=new Array(r),o=new Array(r),a=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++a<r;)i[a]=ae(t[a],t[a+1]),o[a]=n(e[a],e[a+1]);return function(e){var n=x(t,e,1,r)-1;return o[n](i[n](e))}}function le(t,e){return e.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function ce(){var t,e,n,r,i,o,a=ie,u=ie,s=Kt,l=oe;function c(){var t,e,n,s=Math.min(a.length,u.length);return l!==oe&&(t=a[0],e=a[s-1],t>e&&(n=t,t=e,e=n),l=function(n){return Math.max(t,Math.min(e,n))}),r=s>2?se:ue,i=o=null,f}function f(e){return isNaN(e=+e)?n:(i||(i=r(a.map(t),u,s)))(t(l(e)))}return f.invert=function(n){return l(e((o||(o=r(u,a.map(t),Bt)))(n)))},f.domain=function(t){return arguments.length?(a=Array.from(t,re),c()):a.slice()},f.range=function(t){return arguments.length?(u=Array.from(t),c()):u.slice()},f.rangeRound=function(t){return u=Array.from(t),s=Xt,c()},f.clamp=function(t){return arguments.length?(l=!!t||oe,c()):l!==oe},f.interpolate=function(t){return arguments.length?(s=t,c()):s},f.unknown=function(t){return arguments.length?(n=t,f):n},function(n,r){return t=n,e=r,c()}}function fe(){return ce()(oe,oe)}var he=function(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,r=t.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+t.slice(n+1)]},pe=function(t){return(t=he(Math.abs(t)))?t[1]:NaN},de=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function ye(t){if(!(e=de.exec(t)))throw new Error("invalid format: "+t);var e;return new ve({fill:e[1],align:e[2],sign:e[3],symbol:e[4],zero:e[5],width:e[6],comma:e[7],precision:e[8]&&e[8].slice(1),trim:e[9],type:e[10]})}function ve(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}ye.prototype=ve.prototype,ve.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var ge,me,_e,xe,be=function(t){t:for(var e,n=t.length,r=1,i=-1;r<n;++r)switch(t[r]){case".":i=e=r;break;case"0":0===i&&(i=r),e=r;break;default:if(i>0){if(!+t[r])break t;i=0}}return i>0?t.slice(0,i)+t.slice(e+1):t},we=function(t,e){var n=he(t,e);if(!n)return t+"";var r=n[0],i=n[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")},Ae={"%":function(t,e){return(100*t).toFixed(e)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,e){return t.toExponential(e)},f:function(t,e){return t.toFixed(e)},g:function(t,e){return t.toPrecision(e)},o:function(t){return Math.round(t).toString(8)},p:function(t,e){return we(100*t,e)},r:we,s:function(t,e){var n=he(t,e);if(!n)return t+"";var r=n[0],i=n[1],o=i-(ge=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,a=r.length;return o===a?r:o>a?r+new Array(o-a+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+he(t,Math.max(0,e+o-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},Oe=function(t){return t},Ee=Array.prototype.map,Me=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];me=function(t){var e,n,r=void 0===t.grouping||void 0===t.thousands?Oe:(e=Ee.call(t.grouping,Number),n=t.thousands+"",function(t,r){for(var i=t.length,o=[],a=0,u=e[0],s=0;i>0&&u>0&&(s+u+1>r&&(u=Math.max(1,r-s)),o.push(t.substring(i-=u,i+u)),!((s+=u+1)>r));)u=e[a=(a+1)%e.length];return o.reverse().join(n)}),i=void 0===t.currency?"":t.currency[0]+"",o=void 0===t.currency?"":t.currency[1]+"",a=void 0===t.decimal?".":t.decimal+"",u=void 0===t.numerals?Oe:function(t){return function(e){return e.replace(/[0-9]/g,(function(e){return t[+e]}))}}(Ee.call(t.numerals,String)),s=void 0===t.percent?"%":t.percent+"",l=void 0===t.minus?"-":t.minus+"",c=void 0===t.nan?"NaN":t.nan+"";function f(t){var e=(t=ye(t)).fill,n=t.align,f=t.sign,h=t.symbol,p=t.zero,d=t.width,y=t.comma,v=t.precision,g=t.trim,m=t.type;"n"===m?(y=!0,m="g"):Ae[m]||(void 0===v&&(v=12),g=!0,m="g"),(p||"0"===e&&"="===n)&&(p=!0,e="0",n="=");var _="$"===h?i:"#"===h&&/[boxX]/.test(m)?"0"+m.toLowerCase():"",x="$"===h?o:/[%p]/.test(m)?s:"",b=Ae[m],w=/[defgprs%]/.test(m);function A(t){var i,o,s,h=_,A=x;if("c"===m)A=b(t)+A,t="";else{var O=(t=+t)<0;if(t=isNaN(t)?c:b(Math.abs(t),v),g&&(t=be(t)),O&&0==+t&&(O=!1),h=(O?"("===f?f:l:"-"===f||"("===f?"":f)+h,A=("s"===m?Me[8+ge/3]:"")+A+(O&&"("===f?")":""),w)for(i=-1,o=t.length;++i<o;)if(48>(s=t.charCodeAt(i))||s>57){A=(46===s?a+t.slice(i+1):t.slice(i))+A,t=t.slice(0,i);break}}y&&!p&&(t=r(t,1/0));var E=h.length+t.length+A.length,M=E<d?new Array(d-E+1).join(e):"";switch(y&&p&&(t=r(M+t,M.length?d-A.length:1/0),M=""),n){case"<":t=h+t+A+M;break;case"=":t=h+M+t+A;break;case"^":t=M.slice(0,E=M.length>>1)+h+t+A+M.slice(E);break;default:t=M+h+t+A}return u(t)}return v=void 0===v?6:/[gprs]/.test(m)?Math.max(1,Math.min(21,v)):Math.max(0,Math.min(20,v)),A.toString=function(){return t+""},A}return{format:f,formatPrefix:function(t,e){var n=f(((t=ye(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(pe(e)/3))),i=Math.pow(10,-r),o=Me[8+r/3];return function(t){return n(i*t)+o}}}}({decimal:".",thousands:",",grouping:[3],currency:["$",""],minus:"-"}),_e=me.format,xe=me.formatPrefix;var Se=function(t,e,n,r){var i,o=y(t,e,n);switch((r=ye(null==r?",f":r)).type){case"s":var a=Math.max(Math.abs(t),Math.abs(e));return null!=r.precision||isNaN(i=function(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(pe(e)/3)))-pe(Math.abs(t)))}(o,a))||(r.precision=i),xe(r,a);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=function(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,pe(e)-pe(t))+1}(o,Math.max(Math.abs(t),Math.abs(e))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=function(t){return Math.max(0,-pe(Math.abs(t)))}(o))||(r.precision=i-2*("%"===r.type))}return _e(r)};function ke(t){var e=t.domain;return t.ticks=function(t){var n=e();return p(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){var r=e();return Se(r[0],r[r.length-1],null==t?10:t,n)},t.nice=function(n){null==n&&(n=10);var r,i=e(),o=0,a=i.length-1,u=i[o],s=i[a];return s<u&&(r=u,u=s,s=r,r=o,o=a,a=r),(r=d(u,s,n))>0?r=d(u=Math.floor(u/r)*r,s=Math.ceil(s/r)*r,n):r<0&&(r=d(u=Math.ceil(u*r)/r,s=Math.floor(s*r)/r,n)),r>0?(i[o]=Math.floor(u/r)*r,i[a]=Math.ceil(s/r)*r,e(i)):r<0&&(i[o]=Math.ceil(u*r)/r,i[a]=Math.floor(s*r)/r,e(i)),t},t}function Pe(){var t=fe();return t.copy=function(){return le(t,Pe())},i.apply(t,arguments),ke(t)}function Ne(t){var e;function n(t){return isNaN(t=+t)?e:t}return n.invert=n,n.domain=n.range=function(e){return arguments.length?(t=Array.from(e,re),n):t.slice()},n.unknown=function(t){return arguments.length?(e=t,n):e},n.copy=function(){return Ne(t).unknown(e)},t=arguments.length?Array.from(t,re):[0,1],ke(n)}var Ce=function(t,e){var n,r=0,i=(t=t.slice()).length-1,o=t[r],a=t[i];return a<o&&(n=r,r=i,i=n,n=o,o=a,a=n),t[r]=e.floor(o),t[i]=e.ceil(a),t};function Te(t){return Math.log(t)}function je(t){return Math.exp(t)}function Ie(t){return-Math.log(-t)}function De(t){return-Math.exp(-t)}function Re(t){return isFinite(t)?+("1e"+t):t<0?0:t}function Le(t){return function(e){return-t(-e)}}function Be(t){var e,n,r=t(Te,je),i=r.domain,o=10;function a(){return e=function(t){return t===Math.E?Math.log:10===t&&Math.log10||2===t&&Math.log2||(t=Math.log(t),function(e){return Math.log(e)/t})}(o),n=function(t){return 10===t?Re:t===Math.E?Math.exp:function(e){return Math.pow(t,e)}}(o),i()[0]<0?(e=Le(e),n=Le(n),t(Ie,De)):t(Te,je),r}return r.base=function(t){return arguments.length?(o=+t,a()):o},r.domain=function(t){return arguments.length?(i(t),a()):i()},r.ticks=function(t){var r,a=i(),u=a[0],s=a[a.length-1];(r=s<u)&&(h=u,u=s,s=h);var l,c,f,h=e(u),d=e(s),y=null==t?10:+t,v=[];if(!(o%1)&&d-h<y){if(h=Math.floor(h),d=Math.ceil(d),u>0){for(;h<=d;++h)for(c=1,l=n(h);c<o;++c)if(!((f=l*c)<u)){if(f>s)break;v.push(f)}}else for(;h<=d;++h)for(c=o-1,l=n(h);c>=1;--c)if(!((f=l*c)<u)){if(f>s)break;v.push(f)}v.length||(v=p(u,s,y))}else v=p(h,d,Math.min(d-h,y)).map(n);return r?v.reverse():v},r.tickFormat=function(t,i){if(null==i&&(i=10===o?".0e":","),"function"!=typeof i&&(i=_e(i)),t===1/0)return i;null==t&&(t=10);var a=Math.max(1,o*t/r.ticks().length);return function(t){var r=t/n(Math.round(e(t)));return r*o<o-.5&&(r*=o),r<=a?i(t):""}},r.nice=function(){return i(Ce(i(),{floor:function(t){return n(Math.floor(e(t)))},ceil:function(t){return n(Math.ceil(e(t)))}}))},r}function Fe(){var t=Be(ce()).domain([1,10]);return t.copy=function(){return le(t,Fe()).base(t.base())},i.apply(t,arguments),t}function ze(t){return function(e){return Math.sign(e)*Math.log1p(Math.abs(e/t))}}function We(t){return function(e){return Math.sign(e)*Math.expm1(Math.abs(e))*t}}function Ve(t){var e=1,n=t(ze(e),We(e));return n.constant=function(n){return arguments.length?t(ze(e=+n),We(e)):e},ke(n)}function Ue(){var t=Ve(ce());return t.copy=function(){return le(t,Ue()).constant(t.constant())},i.apply(t,arguments)}function qe(t){return function(e){return e<0?-Math.pow(-e,t):Math.pow(e,t)}}function Ge(t){return t<0?-Math.sqrt(-t):Math.sqrt(t)}function He(t){return t<0?-t*t:t*t}function Ke(t){var e=t(oe,oe),n=1;function r(){return 1===n?t(oe,oe):.5===n?t(Ge,He):t(qe(n),qe(1/n))}return e.exponent=function(t){return arguments.length?(n=+t,r()):n},ke(e)}function Xe(){var t=Ke(ce());return t.copy=function(){return le(t,Xe()).exponent(t.exponent())},i.apply(t,arguments),t}function Ye(){return Xe.apply(null,arguments).exponent(.5)}function $e(t){return Math.sign(t)*t*t}function Ze(){var t,e=fe(),n=[0,1],r=!1;function o(n){var i=function(t){return Math.sign(t)*Math.sqrt(Math.abs(t))}(e(n));return isNaN(i)?t:r?Math.round(i):i}return o.invert=function(t){return e.invert($e(t))},o.domain=function(t){return arguments.length?(e.domain(t),o):e.domain()},o.range=function(t){return arguments.length?(e.range((n=Array.from(t,re)).map($e)),o):n.slice()},o.rangeRound=function(t){return o.range(t).round(!0)},o.round=function(t){return arguments.length?(r=!!t,o):r},o.clamp=function(t){return arguments.length?(e.clamp(t),o):e.clamp()},o.unknown=function(e){return arguments.length?(t=e,o):t},o.copy=function(){return Ze(e.domain(),n).round(r).clamp(e.clamp()).unknown(t)},i.apply(o,arguments),ke(o)}function Je(t,e){let n;if(void 0===e)for(const e of t)null!=e&&(n<e||void 0===n&&e>=e)&&(n=e);else{let r=-1;for(let i of t)null!=(i=e(i,++r,t))&&(n<i||void 0===n&&i>=i)&&(n=i)}return n}function Qe(t,e){let n;if(void 0===e)for(const e of t)null!=e&&(n>e||void 0===n&&e>=e)&&(n=e);else{let r=-1;for(let i of t)null!=(i=e(i,++r,t))&&(n>i||void 0===n&&i>=i)&&(n=i)}return n}function tn(t,e,n){const r=t[e];t[e]=t[n],t[n]=r}function en(t,e,n){if(r=(t=Float64Array.from(function*(t,e){if(void 0===e)for(let e of t)null!=e&&(e=+e)>=e&&(yield e);else{let n=-1;for(let r of t)null!=(r=e(r,++n,t))&&(r=+r)>=r&&(yield r)}}(t,n))).length){if((e=+e)<=0||r<2)return Qe(t);if(e>=1)return Je(t);var r,i=(r-1)*e,o=Math.floor(i),a=Je(function t(e,n,r=0,i=e.length-1,o=v){for(;i>r;){if(i-r>600){const a=i-r+1,u=n-r+1,s=Math.log(a),l=.5*Math.exp(2*s/3),c=.5*Math.sqrt(s*l*(a-l)/a)*(u-a/2<0?-1:1);t(e,n,Math.max(r,Math.floor(n-u*l/a+c)),Math.min(i,Math.floor(n+(a-u)*l/a+c)),o)}const a=e[n];let u=r,s=i;for(tn(e,r,n),o(e[i],a)>0&&tn(e,r,i);u<s;){for(tn(e,u,s),++u,--s;o(e[u],a)<0;)++u;for(;o(e[s],a)>0;)--s}0===o(e[r],a)?tn(e,r,s):tn(e,++s,i),s<=n&&(r=s+1),n<=s&&(i=s-1)}return e}(t,o).subarray(0,o+1));return a+(Qe(t.subarray(o+1))-a)*(i-o)}}function nn(){var t,e=[],n=[],r=[];function o(){var t=0,i=Math.max(1,n.length);for(r=new Array(i-1);++t<i;)r[t-1]=en(e,t/i);return a}function a(e){return isNaN(e=+e)?t:n[x(r,e)]}return a.invertExtent=function(t){var i=n.indexOf(t);return i<0?[NaN,NaN]:[i>0?r[i-1]:e[0],i<r.length?r[i]:e[e.length-1]]},a.domain=function(t){if(!arguments.length)return e.slice();e=[];for(let n of t)null==n||isNaN(n=+n)||e.push(n);return e.sort(v),o()},a.range=function(t){return arguments.length?(n=Array.from(t),o()):n.slice()},a.unknown=function(e){return arguments.length?(t=e,a):t},a.quantiles=function(){return r.slice()},a.copy=function(){return nn().domain(e).range(n).unknown(t)},i.apply(a,arguments)}function rn(){var t,e=0,n=1,r=1,o=[.5],a=[0,1];function u(e){return e<=e?a[x(o,e,0,r)]:t}function s(){var t=-1;for(o=new Array(r);++t<r;)o[t]=((t+1)*n-(t-r)*e)/(r+1);return u}return u.domain=function(t){return arguments.length?([e,n]=t,e=+e,n=+n,s()):[e,n]},u.range=function(t){return arguments.length?(r=(a=Array.from(t)).length-1,s()):a.slice()},u.invertExtent=function(t){var i=a.indexOf(t);return i<0?[NaN,NaN]:i<1?[e,o[0]]:i>=r?[o[r-1],n]:[o[i-1],o[i]]},u.unknown=function(e){return arguments.length?(t=e,u):u},u.thresholds=function(){return o.slice()},u.copy=function(){return rn().domain([e,n]).range(a).unknown(t)},i.apply(ke(u),arguments)}function on(){var t,e=[.5],n=[0,1],r=1;function o(i){return i<=i?n[x(e,i,0,r)]:t}return o.domain=function(t){return arguments.length?(e=Array.from(t),r=Math.min(e.length,n.length-1),o):e.slice()},o.range=function(t){return arguments.length?(n=Array.from(t),r=Math.min(e.length,n.length-1),o):n.slice()},o.invertExtent=function(t){var r=n.indexOf(t);return[e[r-1],e[r]]},o.unknown=function(e){return arguments.length?(t=e,o):t},o.copy=function(){return on().domain(e).range(n).unknown(t)},i.apply(o,arguments)}var an=new Date,un=new Date;function sn(t,e,n,r){function i(e){return t(e=0===arguments.length?new Date:new Date(+e)),e}return i.floor=function(e){return t(e=new Date(+e)),e},i.ceil=function(n){return t(n=new Date(n-1)),e(n,1),t(n),n},i.round=function(t){var e=i(t),n=i.ceil(t);return t-e<n-t?e:n},i.offset=function(t,n){return e(t=new Date(+t),null==n?1:Math.floor(n)),t},i.range=function(n,r,o){var a,u=[];if(n=i.ceil(n),o=null==o?1:Math.floor(o),!(n<r&&o>0))return u;do{u.push(a=new Date(+n)),e(n,o),t(n)}while(a<n&&n<r);return u},i.filter=function(n){return sn((function(e){if(e>=e)for(;t(e),!n(e);)e.setTime(e-1)}),(function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;e(t,-1),!n(t););else for(;--r>=0;)for(;e(t,1),!n(t););}))},n&&(i.count=function(e,r){return an.setTime(+e),un.setTime(+r),t(an),t(un),Math.floor(n(an,un))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(e){return r(e)%t==0}:function(e){return i.count(0,e)%t==0}):i:null}),i}var ln=sn((function(t){t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,e){t.setFullYear(t.getFullYear()+e)}),(function(t,e){return e.getFullYear()-t.getFullYear()}),(function(t){return t.getFullYear()}));ln.every=function(t){return isFinite(t=Math.floor(t))&&t>0?sn((function(e){e.setFullYear(Math.floor(e.getFullYear()/t)*t),e.setMonth(0,1),e.setHours(0,0,0,0)}),(function(e,n){e.setFullYear(e.getFullYear()+n*t)})):null};var cn=ln,fn=(ln.range,sn((function(t){t.setDate(1),t.setHours(0,0,0,0)}),(function(t,e){t.setMonth(t.getMonth()+e)}),(function(t,e){return e.getMonth()-t.getMonth()+12*(e.getFullYear()-t.getFullYear())}),(function(t){return t.getMonth()}))),hn=fn,pn=(fn.range,6e4),dn=6048e5;function yn(t){return sn((function(e){e.setDate(e.getDate()-(e.getDay()+7-t)%7),e.setHours(0,0,0,0)}),(function(t,e){t.setDate(t.getDate()+7*e)}),(function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*pn)/dn}))}var vn=yn(0),gn=yn(1),mn=yn(2),_n=yn(3),xn=yn(4),bn=yn(5),wn=yn(6),An=(vn.range,gn.range,mn.range,_n.range,xn.range,bn.range,wn.range,sn((function(t){t.setHours(0,0,0,0)}),(function(t,e){t.setDate(t.getDate()+e)}),(function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*pn)/864e5}),(function(t){return t.getDate()-1}))),On=An,En=(An.range,sn((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-t.getMinutes()*pn)}),(function(t,e){t.setTime(+t+36e5*e)}),(function(t,e){return(e-t)/36e5}),(function(t){return t.getHours()}))),Mn=En,Sn=(En.range,sn((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())}),(function(t,e){t.setTime(+t+e*pn)}),(function(t,e){return(e-t)/pn}),(function(t){return t.getMinutes()}))),kn=Sn,Pn=(Sn.range,sn((function(t){t.setTime(t-t.getMilliseconds())}),(function(t,e){t.setTime(+t+1e3*e)}),(function(t,e){return(e-t)/1e3}),(function(t){return t.getUTCSeconds()}))),Nn=Pn,Cn=(Pn.range,sn((function(){}),(function(t,e){t.setTime(+t+e)}),(function(t,e){return e-t})));Cn.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?sn((function(e){e.setTime(Math.floor(e/t)*t)}),(function(e,n){e.setTime(+e+n*t)}),(function(e,n){return(n-e)/t})):Cn:null};var Tn=Cn;Cn.range;function jn(t){return sn((function(e){e.setUTCDate(e.getUTCDate()-(e.getUTCDay()+7-t)%7),e.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCDate(t.getUTCDate()+7*e)}),(function(t,e){return(e-t)/dn}))}var In=jn(0),Dn=jn(1),Rn=jn(2),Ln=jn(3),Bn=jn(4),Fn=jn(5),zn=jn(6),Wn=(In.range,Dn.range,Rn.range,Ln.range,Bn.range,Fn.range,zn.range,sn((function(t){t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCDate(t.getUTCDate()+e)}),(function(t,e){return(e-t)/864e5}),(function(t){return t.getUTCDate()-1}))),Vn=Wn,Un=(Wn.range,sn((function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCFullYear(t.getUTCFullYear()+e)}),(function(t,e){return e.getUTCFullYear()-t.getUTCFullYear()}),(function(t){return t.getUTCFullYear()})));Un.every=function(t){return isFinite(t=Math.floor(t))&&t>0?sn((function(e){e.setUTCFullYear(Math.floor(e.getUTCFullYear()/t)*t),e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)}),(function(e,n){e.setUTCFullYear(e.getUTCFullYear()+n*t)})):null};var qn=Un;Un.range;function Gn(t){if(0<=t.y&&t.y<100){var e=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return e.setFullYear(t.y),e}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function Hn(t){if(0<=t.y&&t.y<100){var e=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return e.setUTCFullYear(t.y),e}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function Kn(t){return{y:t,m:0,d:1,H:0,M:0,S:0,L:0}}var Xn,Yn,$n,Zn,Jn={"-":"",_:" ",0:"0"},Qn=/^\s*\d+/,tr=/^%/,er=/[\\^$*+?|[\]().{}]/g;function nr(t,e,n){var r=t<0?"-":"",i=(r?-t:t)+"",o=i.length;return r+(o<n?new Array(n-o+1).join(e)+i:i)}function rr(t){return t.replace(er,"\\$&")}function ir(t){return new RegExp("^(?:"+t.map(rr).join("|")+")","i")}function or(t){for(var e={},n=-1,r=t.length;++n<r;)e[t[n].toLowerCase()]=n;return e}function ar(t,e,n){var r=Qn.exec(e.slice(n,n+1));return r?(t.w=+r[0],n+r[0].length):-1}function ur(t,e,n){var r=Qn.exec(e.slice(n,n+1));return r?(t.u=+r[0],n+r[0].length):-1}function sr(t,e,n){var r=Qn.exec(e.slice(n,n+2));return r?(t.U=+r[0],n+r[0].length):-1}function lr(t,e,n){var r=Qn.exec(e.slice(n,n+2));return r?(t.V=+r[0],n+r[0].length):-1}function cr(t,e,n){var r=Qn.exec(e.slice(n,n+2));return r?(t.W=+r[0],n+r[0].length):-1}function fr(t,e,n){var r=Qn.exec(e.slice(n,n+4));return r?(t.y=+r[0],n+r[0].length):-1}function hr(t,e,n){var r=Qn.exec(e.slice(n,n+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),n+r[0].length):-1}function pr(t,e,n){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(e.slice(n,n+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),n+r[0].length):-1}function dr(t,e,n){var r=Qn.exec(e.slice(n,n+2));return r?(t.m=r[0]-1,n+r[0].length):-1}function yr(t,e,n){var r=Qn.exec(e.slice(n,n+2));return r?(t.d=+r[0],n+r[0].length):-1}function vr(t,e,n){var r=Qn.exec(e.slice(n,n+3));return r?(t.m=0,t.d=+r[0],n+r[0].length):-1}function gr(t,e,n){var r=Qn.exec(e.slice(n,n+2));return r?(t.H=+r[0],n+r[0].length):-1}function mr(t,e,n){var r=Qn.exec(e.slice(n,n+2));return r?(t.M=+r[0],n+r[0].length):-1}function _r(t,e,n){var r=Qn.exec(e.slice(n,n+2));return r?(t.S=+r[0],n+r[0].length):-1}function xr(t,e,n){var r=Qn.exec(e.slice(n,n+3));return r?(t.L=+r[0],n+r[0].length):-1}function br(t,e,n){var r=Qn.exec(e.slice(n,n+6));return r?(t.L=Math.floor(r[0]/1e3),n+r[0].length):-1}function wr(t,e,n){var r=tr.exec(e.slice(n,n+1));return r?n+r[0].length:-1}function Ar(t,e,n){var r=Qn.exec(e.slice(n));return r?(t.Q=+r[0],n+r[0].length):-1}function Or(t,e,n){var r=Qn.exec(e.slice(n));return r?(t.Q=1e3*+r[0],n+r[0].length):-1}function Er(t,e){return nr(t.getDate(),e,2)}function Mr(t,e){return nr(t.getHours(),e,2)}function Sr(t,e){return nr(t.getHours()%12||12,e,2)}function kr(t,e){return nr(1+On.count(cn(t),t),e,3)}function Pr(t,e){return nr(t.getMilliseconds(),e,3)}function Nr(t,e){return Pr(t,e)+"000"}function Cr(t,e){return nr(t.getMonth()+1,e,2)}function Tr(t,e){return nr(t.getMinutes(),e,2)}function jr(t,e){return nr(t.getSeconds(),e,2)}function Ir(t){var e=t.getDay();return 0===e?7:e}function Dr(t,e){return nr(vn.count(cn(t),t),e,2)}function Rr(t,e){var n=t.getDay();return t=n>=4||0===n?xn(t):xn.ceil(t),nr(xn.count(cn(t),t)+(4===cn(t).getDay()),e,2)}function Lr(t){return t.getDay()}function Br(t,e){return nr(gn.count(cn(t),t),e,2)}function Fr(t,e){return nr(t.getFullYear()%100,e,2)}function zr(t,e){return nr(t.getFullYear()%1e4,e,4)}function Wr(t){var e=t.getTimezoneOffset();return(e>0?"-":(e*=-1,"+"))+nr(e/60|0,"0",2)+nr(e%60,"0",2)}function Vr(t,e){return nr(t.getUTCDate(),e,2)}function Ur(t,e){return nr(t.getUTCHours(),e,2)}function qr(t,e){return nr(t.getUTCHours()%12||12,e,2)}function Gr(t,e){return nr(1+Vn.count(qn(t),t),e,3)}function Hr(t,e){return nr(t.getUTCMilliseconds(),e,3)}function Kr(t,e){return Hr(t,e)+"000"}function Xr(t,e){return nr(t.getUTCMonth()+1,e,2)}function Yr(t,e){return nr(t.getUTCMinutes(),e,2)}function $r(t,e){return nr(t.getUTCSeconds(),e,2)}function Zr(t){var e=t.getUTCDay();return 0===e?7:e}function Jr(t,e){return nr(In.count(qn(t),t),e,2)}function Qr(t,e){var n=t.getUTCDay();return t=n>=4||0===n?Bn(t):Bn.ceil(t),nr(Bn.count(qn(t),t)+(4===qn(t).getUTCDay()),e,2)}function ti(t){return t.getUTCDay()}function ei(t,e){return nr(Dn.count(qn(t),t),e,2)}function ni(t,e){return nr(t.getUTCFullYear()%100,e,2)}function ri(t,e){return nr(t.getUTCFullYear()%1e4,e,4)}function ii(){return"+0000"}function oi(){return"%"}function ai(t){return+t}function ui(t){return Math.floor(+t/1e3)}!function(t){Xn=function(t){var e=t.dateTime,n=t.date,r=t.time,i=t.periods,o=t.days,a=t.shortDays,u=t.months,s=t.shortMonths,l=ir(i),c=or(i),f=ir(o),h=or(o),p=ir(a),d=or(a),y=ir(u),v=or(u),g=ir(s),m=or(s),_={a:function(t){return a[t.getDay()]},A:function(t){return o[t.getDay()]},b:function(t){return s[t.getMonth()]},B:function(t){return u[t.getMonth()]},c:null,d:Er,e:Er,f:Nr,H:Mr,I:Sr,j:kr,L:Pr,m:Cr,M:Tr,p:function(t){return i[+(t.getHours()>=12)]},Q:ai,s:ui,S:jr,u:Ir,U:Dr,V:Rr,w:Lr,W:Br,x:null,X:null,y:Fr,Y:zr,Z:Wr,"%":oi},x={a:function(t){return a[t.getUTCDay()]},A:function(t){return o[t.getUTCDay()]},b:function(t){return s[t.getUTCMonth()]},B:function(t){return u[t.getUTCMonth()]},c:null,d:Vr,e:Vr,f:Kr,H:Ur,I:qr,j:Gr,L:Hr,m:Xr,M:Yr,p:function(t){return i[+(t.getUTCHours()>=12)]},Q:ai,s:ui,S:$r,u:Zr,U:Jr,V:Qr,w:ti,W:ei,x:null,X:null,y:ni,Y:ri,Z:ii,"%":oi},b={a:function(t,e,n){var r=p.exec(e.slice(n));return r?(t.w=d[r[0].toLowerCase()],n+r[0].length):-1},A:function(t,e,n){var r=f.exec(e.slice(n));return r?(t.w=h[r[0].toLowerCase()],n+r[0].length):-1},b:function(t,e,n){var r=g.exec(e.slice(n));return r?(t.m=m[r[0].toLowerCase()],n+r[0].length):-1},B:function(t,e,n){var r=y.exec(e.slice(n));return r?(t.m=v[r[0].toLowerCase()],n+r[0].length):-1},c:function(t,n,r){return O(t,e,n,r)},d:yr,e:yr,f:br,H:gr,I:gr,j:vr,L:xr,m:dr,M:mr,p:function(t,e,n){var r=l.exec(e.slice(n));return r?(t.p=c[r[0].toLowerCase()],n+r[0].length):-1},Q:Ar,s:Or,S:_r,u:ur,U:sr,V:lr,w:ar,W:cr,x:function(t,e,r){return O(t,n,e,r)},X:function(t,e,n){return O(t,r,e,n)},y:hr,Y:fr,Z:pr,"%":wr};function w(t,e){return function(n){var r,i,o,a=[],u=-1,s=0,l=t.length;for(n instanceof Date||(n=new Date(+n));++u<l;)37===t.charCodeAt(u)&&(a.push(t.slice(s,u)),null!=(i=Jn[r=t.charAt(++u)])?r=t.charAt(++u):i="e"===r?" ":"0",(o=e[r])&&(r=o(n,i)),a.push(r),s=u+1);return a.push(t.slice(s,u)),a.join("")}}function A(t,e){return function(n){var r,i,o=Kn(1900);if(O(o,t,n+="",0)!=n.length)return null;if("Q"in o)return new Date(o.Q);if("p"in o&&(o.H=o.H%12+12*o.p),"V"in o){if(o.V<1||o.V>53)return null;"w"in o||(o.w=1),"Z"in o?(i=(r=Hn(Kn(o.y))).getUTCDay(),r=i>4||0===i?Dn.ceil(r):Dn(r),r=Vn.offset(r,7*(o.V-1)),o.y=r.getUTCFullYear(),o.m=r.getUTCMonth(),o.d=r.getUTCDate()+(o.w+6)%7):(i=(r=e(Kn(o.y))).getDay(),r=i>4||0===i?gn.ceil(r):gn(r),r=On.offset(r,7*(o.V-1)),o.y=r.getFullYear(),o.m=r.getMonth(),o.d=r.getDate()+(o.w+6)%7)}else("W"in o||"U"in o)&&("w"in o||(o.w="u"in o?o.u%7:"W"in o?1:0),i="Z"in o?Hn(Kn(o.y)).getUTCDay():e(Kn(o.y)).getDay(),o.m=0,o.d="W"in o?(o.w+6)%7+7*o.W-(i+5)%7:o.w+7*o.U-(i+6)%7);return"Z"in o?(o.H+=o.Z/100|0,o.M+=o.Z%100,Hn(o)):e(o)}}function O(t,e,n,r){for(var i,o,a=0,u=e.length,s=n.length;a<u;){if(r>=s)return-1;if(37===(i=e.charCodeAt(a++))){if(i=e.charAt(a++),!(o=b[i in Jn?e.charAt(a++):i])||(r=o(t,n,r))<0)return-1}else if(i!=n.charCodeAt(r++))return-1}return r}return(_.x=w(n,_),_.X=w(r,_),_.c=w(e,_),x.x=w(n,x),x.X=w(r,x),x.c=w(e,x),{format:function(t){var e=w(t+="",_);return e.toString=function(){return t},e},parse:function(t){var e=A(t+="",Gn);return e.toString=function(){return t},e},utcFormat:function(t){var e=w(t+="",x);return e.toString=function(){return t},e},utcParse:function(t){var e=A(t,Hn);return e.toString=function(){return t},e}})}(t),Yn=Xn.format,Xn.parse,$n=Xn.utcFormat,Zn=Xn.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});Date.prototype.toISOString||$n("%Y-%m-%dT%H:%M:%S.%LZ");+new Date("2000-01-01T00:00:00.000Z")||Zn("%Y-%m-%dT%H:%M:%S.%LZ");var si=1e3,li=60*si,ci=60*li,fi=24*ci,hi=7*fi,pi=30*fi,di=365*fi;function yi(t){return new Date(t)}function vi(t){return t instanceof Date?+t:+new Date(+t)}function gi(t,e,n,r,i,o,a,u,s){var l=fe(),c=l.invert,f=l.domain,h=s(".%L"),p=s(":%S"),d=s("%I:%M"),v=s("%I %p"),m=s("%a %d"),_=s("%b %d"),x=s("%B"),b=s("%Y"),w=[[a,1,si],[a,5,5*si],[a,15,15*si],[a,30,30*si],[o,1,li],[o,5,5*li],[o,15,15*li],[o,30,30*li],[i,1,ci],[i,3,3*ci],[i,6,6*ci],[i,12,12*ci],[r,1,fi],[r,2,2*fi],[n,1,hi],[e,1,pi],[e,3,3*pi],[t,1,di]];function A(u){return(a(u)<u?h:o(u)<u?p:i(u)<u?d:r(u)<u?v:e(u)<u?n(u)<u?m:_:t(u)<u?x:b)(u)}function O(e,n,r){if(null==e&&(e=10),"number"==typeof e){var i,o=Math.abs(r-n)/e,a=g((function(t){return t[2]})).right(w,o);return a===w.length?(i=y(n/di,r/di,e),e=t):a?(i=(a=w[o/w[a-1][2]<w[a][2]/o?a-1:a])[1],e=a[0]):(i=Math.max(y(n,r,e),1),e=u),e.every(i)}return e}return l.invert=function(t){return new Date(c(t))},l.domain=function(t){return arguments.length?f(Array.from(t,vi)):f().map(yi)},l.ticks=function(t){var e,n=f(),r=n[0],i=n[n.length-1],o=i<r;return o&&(e=r,r=i,i=e),e=(e=O(t,r,i))?e.range(r,i+1):[],o?e.reverse():e},l.tickFormat=function(t,e){return null==e?A:s(e)},l.nice=function(t){var e=f();return(t=O(t,e[0],e[e.length-1]))?f(Ce(e,t)):l},l.copy=function(){return le(l,gi(t,e,n,r,i,o,a,u,s))},l}var mi=function(){return i.apply(gi(cn,hn,vn,On,Mn,kn,Nn,Tn,Yn).domain([new Date(2e3,0,1),new Date(2e3,0,2)]),arguments)},_i=sn((function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCMonth(t.getUTCMonth()+e)}),(function(t,e){return e.getUTCMonth()-t.getUTCMonth()+12*(e.getUTCFullYear()-t.getUTCFullYear())}),(function(t){return t.getUTCMonth()})),xi=_i,bi=(_i.range,sn((function(t){t.setUTCMinutes(0,0,0)}),(function(t,e){t.setTime(+t+36e5*e)}),(function(t,e){return(e-t)/36e5}),(function(t){return t.getUTCHours()}))),wi=bi,Ai=(bi.range,sn((function(t){t.setUTCSeconds(0,0)}),(function(t,e){t.setTime(+t+e*pn)}),(function(t,e){return(e-t)/pn}),(function(t){return t.getUTCMinutes()}))),Oi=Ai,Ei=(Ai.range,function(){return i.apply(gi(qn,xi,In,Vn,wi,Oi,Nn,Tn,$n).domain([Date.UTC(2e3,0,1),Date.UTC(2e3,0,2)]),arguments)});function Mi(){var t,e,n,r,i,o=0,a=1,u=oe,s=!1;function l(e){return isNaN(e=+e)?i:u(0===n?.5:(e=(r(e)-t)*n,s?Math.max(0,Math.min(1,e)):e))}return l.domain=function(i){return arguments.length?([o,a]=i,t=r(o=+o),e=r(a=+a),n=t===e?0:1/(e-t),l):[o,a]},l.clamp=function(t){return arguments.length?(s=!!t,l):s},l.interpolator=function(t){return arguments.length?(u=t,l):u},l.range=function(){return[u(0),u(1)]},l.unknown=function(t){return arguments.length?(i=t,l):i},function(i){return r=i,t=i(o),e=i(a),n=t===e?0:1/(e-t),l}}function Si(t,e){return e.domain(t.domain()).interpolator(t.interpolator()).clamp(t.clamp()).unknown(t.unknown())}function ki(){var t=ke(Mi()(oe));return t.copy=function(){return Si(t,ki())},o.apply(t,arguments)}function Pi(){var t=Be(Mi()).domain([1,10]);return t.copy=function(){return Si(t,Pi()).base(t.base())},o.apply(t,arguments)}function Ni(){var t=Ve(Mi());return t.copy=function(){return Si(t,Ni()).constant(t.constant())},o.apply(t,arguments)}function Ci(){var t=Ke(Mi());return t.copy=function(){return Si(t,Ci()).exponent(t.exponent())},o.apply(t,arguments)}function Ti(){return Ci.apply(null,arguments).exponent(.5)}function ji(){var t=[],e=oe;function n(n){if(!isNaN(n=+n))return e((x(t,n,1)-1)/(t.length-1))}return n.domain=function(e){if(!arguments.length)return t.slice();t=[];for(let n of e)null==n||isNaN(n=+n)||t.push(n);return t.sort(v),n},n.interpolator=function(t){return arguments.length?(e=t,n):e},n.range=function(){return t.map((n,r)=>e(r/(t.length-1)))},n.copy=function(){return ji(e).domain(t)},o.apply(n,arguments)}function Ii(){var t,e,n,r,i,o,a,u=0,s=.5,l=1,c=1,f=oe,h=!1;function p(t){return isNaN(t=+t)?a:(t=.5+((t=+o(t))-e)*(c*t<c*e?r:i),f(h?Math.max(0,Math.min(1,t)):t))}return p.domain=function(a){return arguments.length?([u,s,l]=a,t=o(u=+u),e=o(s=+s),n=o(l=+l),r=t===e?0:.5/(e-t),i=e===n?0:.5/(n-e),c=e<t?-1:1,p):[u,s,l]},p.clamp=function(t){return arguments.length?(h=!!t,p):h},p.interpolator=function(t){return arguments.length?(f=t,p):f},p.range=function(){return[f(0),f(.5),f(1)]},p.unknown=function(t){return arguments.length?(a=t,p):a},function(a){return o=a,t=a(u),e=a(s),n=a(l),r=t===e?0:.5/(e-t),i=e===n?0:.5/(n-e),c=e<t?-1:1,p}}function Di(){var t=ke(Ii()(oe));return t.copy=function(){return Si(t,Di())},o.apply(t,arguments)}function Ri(){var t=Be(Ii()).domain([.1,1,10]);return t.copy=function(){return Si(t,Ri()).base(t.base())},o.apply(t,arguments)}function Li(){var t=Ve(Ii());return t.copy=function(){return Si(t,Li()).constant(t.constant())},o.apply(t,arguments)}function Bi(){var t=Ke(Ii());return t.copy=function(){return Si(t,Bi()).exponent(t.exponent())},o.apply(t,arguments)}function Fi(){return Bi.apply(null,arguments).exponent(.5)}n.d(e,"scaleBand",(function(){return s})),n.d(e,"scalePoint",(function(){return l})),n.d(e,"scaleIdentity",(function(){return Ne})),n.d(e,"scaleLinear",(function(){return Pe})),n.d(e,"scaleLog",(function(){return Fe})),n.d(e,"scaleSymlog",(function(){return Ue})),n.d(e,"scaleOrdinal",(function(){return u})),n.d(e,"scaleImplicit",(function(){return a})),n.d(e,"scalePow",(function(){return Xe})),n.d(e,"scaleSqrt",(function(){return Ye})),n.d(e,"scaleRadial",(function(){return Ze})),n.d(e,"scaleQuantile",(function(){return nn})),n.d(e,"scaleQuantize",(function(){return rn})),n.d(e,"scaleThreshold",(function(){return on})),n.d(e,"scaleTime",(function(){return mi})),n.d(e,"scaleUtc",(function(){return Ei})),n.d(e,"scaleSequential",(function(){return ki})),n.d(e,"scaleSequentialLog",(function(){return Pi})),n.d(e,"scaleSequentialPow",(function(){return Ci})),n.d(e,"scaleSequentialSqrt",(function(){return Ti})),n.d(e,"scaleSequentialSymlog",(function(){return Ni})),n.d(e,"scaleSequentialQuantile",(function(){return ji})),n.d(e,"scaleDiverging",(function(){return Di})),n.d(e,"scaleDivergingLog",(function(){return Ri})),n.d(e,"scaleDivergingPow",(function(){return Bi})),n.d(e,"scaleDivergingSqrt",(function(){return Fi})),n.d(e,"scaleDivergingSymlog",(function(){return Li})),n.d(e,"tickFormat",(function(){return Se}))},function(t,e,n){var r=n(77);t.exports=function(t,e){return r(t,e)}},function(t,e,n){var r=n(84),i=n(273),o=n(280),a=n(288),u=o((function(t){var e=r(t,a);return e.length&&e[0]===t[0]?i(e):[]}));t.exports=u},function(t,e,n){var r=n(118),i=n(290),o=n(296),a=n(16);t.exports=function(t,e){return(a(t)?r:i)(t,o(e,3))}},function(t,e,n){"use strict";(function(t){var n=function(){if("undefined"!=typeof Map)return Map;function t(t,e){var n=-1;return t.some((function(t,r){return t[0]===e&&(n=r,!0)})),n}return(function(){function e(){this.__entries__=[]}return Object.defineProperty(e.prototype,"size",{get:function(){return this.__entries__.length},enumerable:!0,configurable:!0}),e.prototype.get=function(e){var n=t(this.__entries__,e),r=this.__entries__[n];return r&&r[1]},e.prototype.set=function(e,n){var r=t(this.__entries__,e);~r?this.__entries__[r][1]=n:this.__entries__.push([e,n])},e.prototype.delete=function(e){var n=this.__entries__,r=t(n,e);~r&&n.splice(r,1)},e.prototype.has=function(e){return!!~t(this.__entries__,e)},e.prototype.clear=function(){this.__entries__.splice(0)},e.prototype.forEach=function(t,e){void 0===e&&(e=null);for(var n=0,r=this.__entries__;n<r.length;n++){var i=r[n];t.call(e,i[1],i[0])}},e}())}(),r="undefined"!=typeof window&&"undefined"!=typeof document&&window.document===document,i=void 0!==t&&t.Math===Math?t:"undefined"!=typeof self&&self.Math===Math?self:"undefined"!=typeof window&&window.Math===Math?window:Function("return this")(),o="function"==typeof requestAnimationFrame?requestAnimationFrame.bind(i):function(t){return setTimeout((function(){return t(Date.now())}),1e3/60)},a=2;var u=20,s=["top","right","bottom","left","width","height","size","weight"],l="undefined"!=typeof MutationObserver,c=function(){function t(){this.connected_=!1,this.mutationEventsAdded_=!1,this.mutationsObserver_=null,this.observers_=[],this.onTransitionEnd_=this.onTransitionEnd_.bind(this),this.refresh=function(t,e){var n=!1,r=!1,i=0;function u(){n&&(n=!1,t()),r&&l()}function s(){o(u)}function l(){var t=Date.now();if(n){if(t-i<a)return;r=!0}else n=!0,r=!1,setTimeout(s,e);i=t}return l}(this.refresh.bind(this),u)}return t.prototype.addObserver=function(t){~this.observers_.indexOf(t)||this.observers_.push(t),this.connected_||this.connect_()},t.prototype.removeObserver=function(t){var e=this.observers_,n=e.indexOf(t);~n&&e.splice(n,1),!e.length&&this.connected_&&this.disconnect_()},t.prototype.refresh=function(){this.updateObservers_()&&this.refresh()},t.prototype.updateObservers_=function(){var t=this.observers_.filter((function(t){return t.gatherActive(),t.hasActive()}));return t.forEach((function(t){return t.broadcastActive()})),t.length>0},t.prototype.connect_=function(){r&&!this.connected_&&(document.addEventListener("transitionend",this.onTransitionEnd_),window.addEventListener("resize",this.refresh),l?(this.mutationsObserver_=new MutationObserver(this.refresh),this.mutationsObserver_.observe(document,{attributes:!0,childList:!0,characterData:!0,subtree:!0})):(document.addEventListener("DOMSubtreeModified",this.refresh),this.mutationEventsAdded_=!0),this.connected_=!0)},t.prototype.disconnect_=function(){r&&this.connected_&&(document.removeEventListener("transitionend",this.onTransitionEnd_),window.removeEventListener("resize",this.refresh),this.mutationsObserver_&&this.mutationsObserver_.disconnect(),this.mutationEventsAdded_&&document.removeEventListener("DOMSubtreeModified",this.refresh),this.mutationsObserver_=null,this.mutationEventsAdded_=!1,this.connected_=!1)},t.prototype.onTransitionEnd_=function(t){var e=t.propertyName,n=void 0===e?"":e;s.some((function(t){return!!~n.indexOf(t)}))&&this.refresh()},t.getInstance=function(){return this.instance_||(this.instance_=new t),this.instance_},t.instance_=null,t}(),f=function(t,e){for(var n=0,r=Object.keys(e);n<r.length;n++){var i=r[n];Object.defineProperty(t,i,{value:e[i],enumerable:!1,writable:!1,configurable:!0})}return t},h=function(t){return t&&t.ownerDocument&&t.ownerDocument.defaultView||i},p=_(0,0,0,0);function d(t){return parseFloat(t)||0}function y(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];return e.reduce((function(e,n){return e+d(t["border-"+n+"-width"])}),0)}function v(t){var e=t.clientWidth,n=t.clientHeight;if(!e&&!n)return p;var r=h(t).getComputedStyle(t),i=function(t){for(var e={},n=0,r=["top","right","bottom","left"];n<r.length;n++){var i=r[n],o=t["padding-"+i];e[i]=d(o)}return e}(r),o=i.left+i.right,a=i.top+i.bottom,u=d(r.width),s=d(r.height);if("border-box"===r.boxSizing&&(Math.round(u+o)!==e&&(u-=y(r,"left","right")+o),Math.round(s+a)!==n&&(s-=y(r,"top","bottom")+a)),!function(t){return t===h(t).document.documentElement}(t)){var l=Math.round(u+o)-e,c=Math.round(s+a)-n;1!==Math.abs(l)&&(u-=l),1!==Math.abs(c)&&(s-=c)}return _(i.left,i.top,u,s)}var g="undefined"!=typeof SVGGraphicsElement?function(t){return t instanceof h(t).SVGGraphicsElement}:function(t){return t instanceof h(t).SVGElement&&"function"==typeof t.getBBox};function m(t){return r?g(t)?function(t){var e=t.getBBox();return _(0,0,e.width,e.height)}(t):v(t):p}function _(t,e,n,r){return{x:t,y:e,width:n,height:r}}var x=function(){function t(t){this.broadcastWidth=0,this.broadcastHeight=0,this.contentRect_=_(0,0,0,0),this.target=t}return t.prototype.isActive=function(){var t=m(this.target);return this.contentRect_=t,t.width!==this.broadcastWidth||t.height!==this.broadcastHeight},t.prototype.broadcastRect=function(){var t=this.contentRect_;return this.broadcastWidth=t.width,this.broadcastHeight=t.height,t},t}(),b=function(t,e){var n,r,i,o,a,u,s,l=(r=(n=e).x,i=n.y,o=n.width,a=n.height,u="undefined"!=typeof DOMRectReadOnly?DOMRectReadOnly:Object,s=Object.create(u.prototype),f(s,{x:r,y:i,width:o,height:a,top:i,right:r+o,bottom:a+i,left:r}),s);f(this,{target:t,contentRect:l})},w=function(){function t(t,e,r){if(this.activeObservations_=[],this.observations_=new n,"function"!=typeof t)throw new TypeError("The callback provided as parameter 1 is not a function.");this.callback_=t,this.controller_=e,this.callbackCtx_=r}return t.prototype.observe=function(t){if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");if("undefined"!=typeof Element&&Element instanceof Object){if(!(t instanceof h(t).Element))throw new TypeError('parameter 1 is not of type "Element".');var e=this.observations_;e.has(t)||(e.set(t,new x(t)),this.controller_.addObserver(this),this.controller_.refresh())}},t.prototype.unobserve=function(t){if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");if("undefined"!=typeof Element&&Element instanceof Object){if(!(t instanceof h(t).Element))throw new TypeError('parameter 1 is not of type "Element".');var e=this.observations_;e.has(t)&&(e.delete(t),e.size||this.controller_.removeObserver(this))}},t.prototype.disconnect=function(){this.clearActive(),this.observations_.clear(),this.controller_.removeObserver(this)},t.prototype.gatherActive=function(){var t=this;this.clearActive(),this.observations_.forEach((function(e){e.isActive()&&t.activeObservations_.push(e)}))},t.prototype.broadcastActive=function(){if(this.hasActive()){var t=this.callbackCtx_,e=this.activeObservations_.map((function(t){return new b(t.target,t.broadcastRect())}));this.callback_.call(t,e,t),this.clearActive()}},t.prototype.clearActive=function(){this.activeObservations_.splice(0)},t.prototype.hasActive=function(){return this.activeObservations_.length>0},t}(),A="undefined"!=typeof WeakMap?new WeakMap:new n,O=function t(e){if(!(this instanceof t))throw new TypeError("Cannot call a class as a function.");if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");var n=c.getInstance(),r=new w(e,n,this);A.set(this,r)};["observe","unobserve","disconnect"].forEach((function(t){O.prototype[t]=function(){var e;return(e=A.get(this))[t].apply(e,arguments)}}));var E=void 0!==i.ResizeObserver?i.ResizeObserver:O;e.a=E}).call(this,n(28))},function(t,e,n){"use strict";(function(t){var n="object"==typeof t&&t&&t.Object===Object&&t;e.a=n}).call(this,n(28))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),n(153);var r=n(39);e.Surface=r.default;var i=n(7);e.Layer=i.default;var o=n(75);e.Legend=o.default;var a=n(44);e.Tooltip=a.default;var u=n(321);e.ResponsiveContainer=u.default;var s=n(32);e.Cell=s.default;var l=n(26);e.Text=l.default;var c=n(20);e.Label=c.default;var f=n(17);e.LabelList=f.default;var h=n(335);e.Customized=h.default;var p=n(53);e.Sector=p.default;var d=n(33);e.Curve=d.default;var y=n(34);e.Rectangle=y.default;var v=n(54);e.Polygon=v.default;var g=n(27);e.Dot=g.default;var m=n(135);e.Cross=m.default;var _=n(76);e.Symbols=_.default;var x=n(336);e.PolarGrid=x.default;var b=n(55);e.PolarRadiusAxis=b.default;var w=n(56);e.PolarAngleAxis=w.default;var A=n(136);e.Pie=A.default;var O=n(137);e.Radar=O.default;var E=n(138);e.RadialBar=E.default;var M=n(139);e.Brush=M.default;var S=n(140);e.ReferenceLine=S.default;var k=n(141);e.ReferenceDot=k.default;var P=n(142);e.ReferenceArea=P.default;var N=n(143);e.CartesianAxis=N.default;var C=n(338);e.CartesianGrid=C.default;var T=n(88);e.Line=T.default;var j=n(89);e.Area=j.default;var I=n(90);e.Bar=I.default;var D=n(91);e.Scatter=D.default;var R=n(35);e.XAxis=R.default;var L=n(36);e.YAxis=L.default;var B=n(59);e.ZAxis=B.default;var F=n(58);e.ErrorBar=F.default;var z=n(339);e.LineChart=z.default;var W=n(343);e.BarChart=W.default;var V=n(344);e.PieChart=V.default;var U=n(345);e.Treemap=U.default;var q=n(347);e.Sankey=q.default;var G=n(348);e.RadarChart=G.default;var H=n(349);e.ScatterChart=H.default;var K=n(350);e.AreaChart=K.default;var X=n(351);e.RadialBarChart=X.default;var Y=n(352);e.ComposedChart=Y.default;var $=n(144);e.Funnel=$.default;var Z=n(353);e.FunnelChart=Z.default;var J=n(145);e.Trapezoid=J.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),n(154),n(189);if(!Object.setPrototypeOf&&!{}.__proto__){var r=Object.getPrototypeOf;Object.getPrototypeOf=function(t){return t.__proto__?t.__proto__:r.call(Object,t)}}},function(t,e,n){n(155),n(168),n(169),n(170),n(171),n(172),n(173),n(174),n(176),n(177),n(178),n(179),n(180),n(181),n(182),n(183),n(184),n(188);var r=n(69);t.exports=r.Math},function(t,e,n){var r=n(6),i=n(106),o=Math.acosh,a=Math.log,u=Math.sqrt,s=Math.LN2;r({target:"Math",stat:!0,forced:!o||710!=Math.floor(o(Number.MAX_VALUE))||o(1/0)!=1/0},{acosh:function(t){return(t=+t)<1?NaN:t>94906265.62425156?a(t)+s:i(t-1+u(t-1)*u(t+1))}})},function(t,e,n){"use strict";var r={}.propertyIsEnumerable,i=Object.getOwnPropertyDescriptor,o=i&&!r.call({1:2},1);e.f=o?function(t){var e=i(this,t);return!!e&&e.enumerable}:r},function(t,e,n){var r=n(13),i=n(64),o="".split;t.exports=r((function(){return!Object("z").propertyIsEnumerable(0)}))?function(t){return"String"==i(t)?o.call(t,""):Object(t)}:Object},function(t,e){t.exports=!1},function(t,e,n){var r=n(10),i=n(67),o=r["__core-js_shared__"]||i("__core-js_shared__",{});t.exports=o},function(t,e,n){var r,i,o,a=n(161),u=n(10),s=n(23),l=n(40),c=n(19),f=n(100),h=n(68),p=u.WeakMap;if(a){var d=new p,y=d.get,v=d.has,g=d.set;r=function(t,e){return g.call(d,t,e),e},i=function(t){return y.call(d,t)||{}},o=function(t){return v.call(d,t)}}else{var m=f("state");h[m]=!0,r=function(t,e){return l(t,m,e),e},i=function(t){return c(t,m)?t[m]:{}},o=function(t){return c(t,m)}}t.exports={set:r,get:i,has:o,enforce:function(t){return o(t)?i(t):r(t,{})},getterFor:function(t){return function(e){var n;if(!s(e)||(n=i(e)).type!==t)throw TypeError("Incompatible receiver, "+t+" required");return n}}}},function(t,e,n){var r=n(10),i=n(99),o=r.WeakMap;t.exports="function"==typeof o&&/native code/.test(i.call(o))},function(t,e,n){var r=n(19),i=n(163),o=n(62),a=n(37);t.exports=function(t,e){for(var n=i(e),u=a.f,s=o.f,l=0;l<n.length;l++){var c=n[l];r(t,c)||u(t,c,s(e,c))}}},function(t,e,n){var r=n(102),i=n(103),o=n(167),a=n(38);t.exports=r("Reflect","ownKeys")||function(t){var e=i.f(a(t)),n=o.f;return n?e.concat(n(t)):e}},function(t,e,n){var r=n(63),i=n(165),o=n(166),a=function(t){return function(e,n,a){var u,s=r(e),l=i(s.length),c=o(a,l);if(t&&n!=n){for(;l>c;)if((u=s[c++])!=u)return!0}else for(;l>c;c++)if((t||c in s)&&s[c]===n)return t||c||0;return!t&&-1}};t.exports={includes:a(!0),indexOf:a(!1)}},function(t,e,n){var r=n(42),i=Math.min;t.exports=function(t){return t>0?i(r(t),9007199254740991):0}},function(t,e,n){var r=n(42),i=Math.max,o=Math.min;t.exports=function(t,e){var n=r(t);return n<0?i(n+e,0):o(n,e)}},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e,n){var r=n(6),i=Math.asinh,o=Math.log,a=Math.sqrt;r({target:"Math",stat:!0,forced:!(i&&1/i(0)>0)},{asinh:function t(e){return isFinite(e=+e)&&0!=e?e<0?-t(-e):o(e+a(e*e+1)):e}})},function(t,e,n){var r=n(6),i=Math.atanh,o=Math.log;r({target:"Math",stat:!0,forced:!(i&&1/i(-0)<0)},{atanh:function(t){return 0==(t=+t)?t:o((1+t)/(1-t))/2}})},function(t,e,n){var r=n(6),i=n(71),o=Math.abs,a=Math.pow;r({target:"Math",stat:!0},{cbrt:function(t){return i(t=+t)*a(o(t),1/3)}})},function(t,e,n){var r=n(6),i=Math.floor,o=Math.log,a=Math.LOG2E;r({target:"Math",stat:!0},{clz32:function(t){return(t>>>=0)?31-i(o(t+.5)*a):32}})},function(t,e,n){var r=n(6),i=n(43),o=Math.cosh,a=Math.abs,u=Math.E;r({target:"Math",stat:!0,forced:!o||o(710)===1/0},{cosh:function(t){var e=i(a(t)-1)+1;return(e+1/(e*u*u))*(u/2)}})},function(t,e,n){var r=n(6),i=n(43);r({target:"Math",stat:!0,forced:i!=Math.expm1},{expm1:i})},function(t,e,n){n(6)({target:"Math",stat:!0},{fround:n(175)})},function(t,e,n){var r=n(71),i=Math.abs,o=Math.pow,a=o(2,-52),u=o(2,-23),s=o(2,127)*(2-u),l=o(2,-126);t.exports=Math.fround||function(t){var e,n,o=i(t),c=r(t);return o<l?c*(o/l/u+1/a-1/a)*l*u:(n=(e=(1+u/a)*o)-(e-o))>s||n!=n?c*(1/0):c*n}},function(t,e,n){var r=n(6),i=Math.hypot,o=Math.abs,a=Math.sqrt;r({target:"Math",stat:!0,forced:!!i&&i(1/0,NaN)!==1/0},{hypot:function(t,e){for(var n,r,i=0,u=0,s=arguments.length,l=0;u<s;)l<(n=o(arguments[u++]))?(i=i*(r=l/n)*r+1,l=n):i+=n>0?(r=n/l)*r:n;return l===1/0?1/0:l*a(i)}})},function(t,e,n){var r=n(6),i=n(13),o=Math.imul;r({target:"Math",stat:!0,forced:i((function(){return-5!=o(4294967295,5)||2!=o.length}))},{imul:function(t,e){var n=+t,r=+e,i=65535&n,o=65535&r;return 0|i*o+((65535&n>>>16)*o+i*(65535&r>>>16)<<16>>>0)}})},function(t,e,n){var r=n(6),i=Math.log,o=Math.LOG10E;r({target:"Math",stat:!0},{log10:function(t){return i(t)*o}})},function(t,e,n){n(6)({target:"Math",stat:!0},{log1p:n(106)})},function(t,e,n){var r=n(6),i=Math.log,o=Math.LN2;r({target:"Math",stat:!0},{log2:function(t){return i(t)/o}})},function(t,e,n){n(6)({target:"Math",stat:!0},{sign:n(71)})},function(t,e,n){var r=n(6),i=n(13),o=n(43),a=Math.abs,u=Math.exp,s=Math.E;r({target:"Math",stat:!0,forced:i((function(){return-2e-17!=Math.sinh(-2e-17)}))},{sinh:function(t){return a(t=+t)<1?(o(t)-o(-t))/2:(u(t-1)-u(-t-1))*(s/2)}})},function(t,e,n){var r=n(6),i=n(43),o=Math.exp;r({target:"Math",stat:!0},{tanh:function(t){var e=i(t=+t),n=i(-t);return e==1/0?1:n==1/0?-1:(e-n)/(o(t)+o(-t))}})},function(t,e,n){n(185)(Math,"Math",!0)},function(t,e,n){var r=n(37).f,i=n(19),o=n(186)("toStringTag");t.exports=function(t,e,n){t&&!i(t=n?t:t.prototype,o)&&r(t,o,{configurable:!0,value:e})}},function(t,e,n){var r=n(10),i=n(41),o=n(19),a=n(101),u=n(107),s=n(187),l=i("wks"),c=r.Symbol,f=s?c:a;t.exports=function(t){return o(l,t)||(u&&o(c,t)?l[t]=c[t]:l[t]=f("Symbol."+t)),l[t]}},function(t,e,n){var r=n(107);t.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol()},function(t,e,n){var r=n(6),i=Math.ceil,o=Math.floor;r({target:"Math",stat:!0},{trunc:function(t){return(t>0?o:i)(t)}})},function(t,e,n){n(190),n(198),n(199),n(201),n(202),n(203),n(204),n(205),n(206),n(208),n(210),n(212);var r=n(69);t.exports=r.Number},function(t,e,n){"use strict";var r=n(29),i=n(10),o=n(105),a=n(98),u=n(19),s=n(64),l=n(191),c=n(66),f=n(13),h=n(194),p=n(103).f,d=n(62).f,y=n(37).f,v=n(72).trim,g=i.Number,m=g.prototype,_="Number"==s(h(m)),x=function(t){var e,n,r,i,o,a,u,s,l=c(t,!1);if("string"==typeof l&&l.length>2)if(43===(e=(l=v(l)).charCodeAt(0))||45===e){if(88===(n=l.charCodeAt(2))||120===n)return NaN}else if(48===e){switch(l.charCodeAt(1)){case 66:case 98:r=2,i=49;break;case 79:case 111:r=8,i=55;break;default:return+l}for(a=(o=l.slice(2)).length,u=0;u<a;u++)if((s=o.charCodeAt(u))<48||s>i)return NaN;return parseInt(o,r)}return+l};if(o("Number",!g(" 0o1")||!g("0b1")||g("+0x1"))){for(var b,w=function(t){var e=arguments.length<1?0:t,n=this;return n instanceof w&&(_?f((function(){m.valueOf.call(n)})):"Number"!=s(n))?l(new g(x(e)),n,w):x(e)},A=r?p(g):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),O=0;A.length>O;O++)u(g,b=A[O])&&!u(w,b)&&y(w,b,d(g,b));w.prototype=m,m.constructor=w,a(i,"Number",w)}},function(t,e,n){var r=n(23),i=n(192);t.exports=function(t,e,n){var o,a;return i&&"function"==typeof(o=e.constructor)&&o!==n&&r(a=o.prototype)&&a!==n.prototype&&i(t,a),t}},function(t,e,n){var r=n(38),i=n(193);t.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var t,e=!1,n={};try{(t=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(n,[]),e=n instanceof Array}catch(t){}return function(n,o){return r(n),i(o),e?t.call(n,o):n.__proto__=o,n}}():void 0)},function(t,e,n){var r=n(23);t.exports=function(t){if(!r(t)&&null!==t)throw TypeError("Can't set "+String(t)+" as a prototype");return t}},function(t,e,n){var r=n(38),i=n(195),o=n(70),a=n(68),u=n(197),s=n(97),l=n(100)("IE_PROTO"),c=function(){},f=function(){var t,e=s("iframe"),n=o.length;for(e.style.display="none",u.appendChild(e),e.src=String("javascript:"),(t=e.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),f=t.F;n--;)delete f.prototype[o[n]];return f()};t.exports=Object.create||function(t,e){var n;return null!==t?(c.prototype=r(t),n=new c,c.prototype=null,n[l]=t):n=f(),void 0===e?n:i(n,e)},a[l]=!0},function(t,e,n){var r=n(29),i=n(37),o=n(38),a=n(196);t.exports=r?Object.defineProperties:function(t,e){o(t);for(var n,r=a(e),u=r.length,s=0;u>s;)i.f(t,n=r[s++],e[n]);return t}},function(t,e,n){var r=n(104),i=n(70);t.exports=Object.keys||function(t){return r(t,i)}},function(t,e,n){var r=n(102);t.exports=r("document","documentElement")},function(t,e,n){n(6)({target:"Number",stat:!0},{EPSILON:Math.pow(2,-52)})},function(t,e,n){n(6)({target:"Number",stat:!0},{isFinite:n(200)})},function(t,e,n){var r=n(10).isFinite;t.exports=Number.isFinite||function(t){return"number"==typeof t&&r(t)}},function(t,e,n){n(6)({target:"Number",stat:!0},{isInteger:n(108)})},function(t,e,n){n(6)({target:"Number",stat:!0},{isNaN:function(t){return t!=t}})},function(t,e,n){var r=n(6),i=n(108),o=Math.abs;r({target:"Number",stat:!0},{isSafeInteger:function(t){return i(t)&&o(t)<=9007199254740991}})},function(t,e,n){n(6)({target:"Number",stat:!0},{MAX_SAFE_INTEGER:9007199254740991})},function(t,e,n){n(6)({target:"Number",stat:!0},{MIN_SAFE_INTEGER:-9007199254740991})},function(t,e,n){var r=n(6),i=n(207);r({target:"Number",stat:!0,forced:Number.parseFloat!=i},{parseFloat:i})},function(t,e,n){var r=n(10),i=n(72).trim,o=n(73),a=r.parseFloat,u=1/a(o+"-0")!=-1/0;t.exports=u?function(t){var e=i(String(t)),n=a(e);return 0===n&&"-"==e.charAt(0)?-0:n}:a},function(t,e,n){var r=n(6),i=n(209);r({target:"Number",stat:!0,forced:Number.parseInt!=i},{parseInt:i})},function(t,e,n){var r=n(10),i=n(72).trim,o=n(73),a=r.parseInt,u=/^[+-]?0[Xx]/,s=8!==a(o+"08")||22!==a(o+"0x16");t.exports=s?function(t,e){var n=i(String(t));return a(n,e>>>0||(u.test(n)?16:10))}:a},function(t,e,n){"use strict";var r=n(6),i=n(42),o=n(109),a=n(211),u=n(13),s=1..toFixed,l=Math.floor,c=function(t,e,n){return 0===e?n:e%2==1?c(t,e-1,n*t):c(t*t,e/2,n)};r({target:"Number",proto:!0,forced:s&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!u((function(){s.call({})}))},{toFixed:function(t){var e,n,r,u,s=o(this),f=i(t),h=[0,0,0,0,0,0],p="",d="0",y=function(t,e){for(var n=-1,r=e;++n<6;)r+=t*h[n],h[n]=r%1e7,r=l(r/1e7)},v=function(t){for(var e=6,n=0;--e>=0;)n+=h[e],h[e]=l(n/t),n=n%t*1e7},g=function(){for(var t=6,e="";--t>=0;)if(""!==e||0===t||0!==h[t]){var n=String(h[t]);e=""===e?n:e+a.call("0",7-n.length)+n}return e};if(f<0||f>20)throw RangeError("Incorrect fraction digits");if(s!=s)return"NaN";if(s<=-1e21||s>=1e21)return String(s);if(s<0&&(p="-",s=-s),s>1e-21)if(n=(e=function(t){for(var e=0,n=t;n>=4096;)e+=12,n/=4096;for(;n>=2;)e+=1,n/=2;return e}(s*c(2,69,1))-69)<0?s*c(2,-e,1):s/c(2,e,1),n*=4503599627370496,(e=52-e)>0){for(y(0,n),r=f;r>=7;)y(1e7,0),r-=7;for(y(c(10,r,1),0),r=e-1;r>=23;)v(1<<23),r-=23;v(1<<r),y(1,1),v(2),d=g()}else y(0,n),y(1<<-e,0),d=g()+a.call("0",f);return d=f>0?p+((u=d.length)<=f?"0."+a.call("0",f-u)+d:d.slice(0,u-f)+"."+d.slice(u-f)):p+d}})},function(t,e,n){"use strict";var r=n(42),i=n(65);t.exports="".repeat||function(t){var e=String(i(this)),n="",o=r(t);if(o<0||o==1/0)throw RangeError("Wrong number of repetitions");for(;o>0;(o>>>=1)&&(e+=e))1&o&&(n+=e);return n}},function(t,e,n){"use strict";var r=n(6),i=n(13),o=n(109),a=1..toPrecision;r({target:"Number",proto:!0,forced:i((function(){return"1"!==a.call(1,void 0)}))||!i((function(){a.call({})}))},{toPrecision:function(t){return void 0===t?a.call(o(this)):a.call(o(this),t)}})},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e},u=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var s=a(n(0)),l=u(n(4)),c=u(n(39)),f=u(n(76)),h=n(2),p=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.renderIcon=function(t){var e=this.props.inactiveColor,n=t.inactive?e:t.color;return"plainline"===t.type?s.default.createElement("line",{strokeWidth:4,fill:"none",stroke:n,strokeDasharray:t.payload.strokeDasharray,x1:0,y1:16,x2:32,y2:16,className:"recharts-legend-icon"}):"line"===t.type?s.default.createElement("path",{strokeWidth:4,fill:"none",stroke:n,d:"M0,16h"+32/3+"\n            A"+32/6+","+32/6+",0,1,1,"+32/3*2+",16\n            H32M"+32/3*2+",16\n            A"+32/6+","+32/6+",0,1,1,"+32/3+",16",className:"recharts-legend-icon"}):"rect"===t.type?s.default.createElement("path",{stroke:"none",fill:n,d:"M0,4h32v24h-32z",className:"recharts-legend-icon"}):s.default.createElement(f.default,{fill:n,cx:16,cy:16,size:32,sizeType:"diameter",type:t.type})},e.prototype.renderItems=function(){var t=this,e=this.props,n=e.payload,r=e.iconSize,i=e.layout,a=e.formatter,u={x:0,y:0,width:32,height:32},f={display:"horizontal"===i?"inline-block":"block",marginRight:10},p={display:"inline-block",verticalAlign:"middle",marginRight:4};return n.map((function(e,n){var i,d=e.formatter||a,y=l.default(((i={"recharts-legend-item":!0})["legend-item-"+n]=!0,i.inactive=e.inactive,i));return"none"===e.type?null:s.default.createElement("li",o({className:y,style:f,key:"legend-item-"+n},h.adaptEventsOfChild(t.props,e,n)),s.default.createElement(c.default,{width:r,height:r,viewBox:u,style:p},t.renderIcon(e)),s.default.createElement("span",{className:"recharts-legend-item-text"},d?d(e.value,e,n):e.value))}))},e.prototype.render=function(){var t=this.props,e=t.payload,n=t.layout,r=t.align;if(!e||!e.length)return null;var i={padding:0,margin:0,textAlign:"horizontal"===n?r:"left"};return s.default.createElement("ul",{className:"recharts-default-legend",style:i},this.renderItems())},e.displayName="Legend",e.defaultProps={iconSize:14,layout:"horizontal",align:"center",verticalAlign:"middle",inactiveColor:"#ccc"},e}(s.PureComponent);e.default=p},function(t,e,n){var r=n(110),i=n(115),o=n(246),a=n(250),u=n(266),s=n(16),l=n(120),c=n(122),f=1,h="[object Arguments]",p="[object Array]",d="[object Object]",y=Object.prototype.hasOwnProperty;t.exports=function(t,e,n,v,g,m){var _=s(t),x=s(e),b=_?p:u(t),w=x?p:u(e),A=(b=b==h?d:b)==d,O=(w=w==h?d:w)==d,E=b==w;if(E&&l(t)){if(!l(e))return!1;_=!0,A=!1}if(E&&!A)return m||(m=new r),_||c(t)?i(t,e,n,v,g,m):o(t,e,b,n,v,g,m);if(!(n&f)){var M=A&&y.call(t,"__wrapped__"),S=O&&y.call(e,"__wrapped__");if(M||S){var k=M?t.value():t,P=S?e.value():e;return m||(m=new r),g(k,P,n,v,m)}}return!!E&&(m||(m=new r),a(t,e,n,v,g,m))}},function(t,e){t.exports=function(){this.__data__=[],this.size=0}},function(t,e,n){var r=n(46),i=Array.prototype.splice;t.exports=function(t){var e=this.__data__,n=r(e,t);return!(n<0)&&(n==e.length-1?e.pop():i.call(e,n,1),--this.size,!0)}},function(t,e,n){var r=n(46);t.exports=function(t){var e=this.__data__,n=r(e,t);return n<0?void 0:e[n][1]}},function(t,e,n){var r=n(46);t.exports=function(t){return r(this.__data__,t)>-1}},function(t,e,n){var r=n(46);t.exports=function(t,e){var n=this.__data__,i=r(n,t);return i<0?(++this.size,n.push([t,e])):n[i][1]=e,this}},function(t,e,n){var r=n(45);t.exports=function(){this.__data__=new r,this.size=0}},function(t,e){t.exports=function(t){var e=this.__data__,n=e.delete(t);return this.size=e.size,n}},function(t,e){t.exports=function(t){return this.__data__.get(t)}},function(t,e){t.exports=function(t){return this.__data__.has(t)}},function(t,e,n){var r=n(45),i=n(78),o=n(80),a=200;t.exports=function(t,e){var n=this.__data__;if(n instanceof r){var u=n.__data__;if(!i||u.length<a-1)return u.push([t,e]),this.size=++n.size,this;n=this.__data__=new o(u)}return n.set(t,e),this.size=n.size,this}},function(t,e,n){var r=n(112),i=n(228),o=n(79),a=n(114),u=/^\[object .+?Constructor\]$/,s=Function.prototype,l=Object.prototype,c=s.toString,f=l.hasOwnProperty,h=RegExp("^"+c.call(f).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");t.exports=function(t){return!(!o(t)||i(t))&&(r(t)?h:u).test(a(t))}},function(t,e,n){var r=n(47),i=Object.prototype,o=i.hasOwnProperty,a=i.toString,u=r?r.toStringTag:void 0;t.exports=function(t){var e=o.call(t,u),n=t[u];try{t[u]=void 0;var r=!0}catch(t){}var i=a.call(t);return r&&(e?t[u]=n:delete t[u]),i}},function(t,e){var n=Object.prototype.toString;t.exports=function(t){return n.call(t)}},function(t,e,n){var r,i=n(229),o=(r=/[^.]+$/.exec(i&&i.keys&&i.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"";t.exports=function(t){return!!o&&o in t}},function(t,e,n){var r=n(15)["__core-js_shared__"];t.exports=r},function(t,e){t.exports=function(t,e){return null==t?void 0:t[e]}},function(t,e,n){var r=n(232),i=n(45),o=n(78);t.exports=function(){this.size=0,this.__data__={hash:new r,map:new(o||i),string:new r}}},function(t,e,n){var r=n(233),i=n(234),o=n(235),a=n(236),u=n(237);function s(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}s.prototype.clear=r,s.prototype.delete=i,s.prototype.get=o,s.prototype.has=a,s.prototype.set=u,t.exports=s},function(t,e,n){var r=n(48);t.exports=function(){this.__data__=r?r(null):{},this.size=0}},function(t,e){t.exports=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e}},function(t,e,n){var r=n(48),i="__lodash_hash_undefined__",o=Object.prototype.hasOwnProperty;t.exports=function(t){var e=this.__data__;if(r){var n=e[t];return n===i?void 0:n}return o.call(e,t)?e[t]:void 0}},function(t,e,n){var r=n(48),i=Object.prototype.hasOwnProperty;t.exports=function(t){var e=this.__data__;return r?void 0!==e[t]:i.call(e,t)}},function(t,e,n){var r=n(48),i="__lodash_hash_undefined__";t.exports=function(t,e){var n=this.__data__;return this.size+=this.has(t)?0:1,n[t]=r&&void 0===e?i:e,this}},function(t,e,n){var r=n(49);t.exports=function(t){var e=r(this,t).delete(t);return this.size-=e?1:0,e}},function(t,e){t.exports=function(t){var e=typeof t;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==t:null===t}},function(t,e,n){var r=n(49);t.exports=function(t){return r(this,t).get(t)}},function(t,e,n){var r=n(49);t.exports=function(t){return r(this,t).has(t)}},function(t,e,n){var r=n(49);t.exports=function(t,e){var n=r(this,t),i=n.size;return n.set(t,e),this.size+=n.size==i?0:1,this}},function(t,e){var n="__lodash_hash_undefined__";t.exports=function(t){return this.__data__.set(t,n),this}},function(t,e){t.exports=function(t){return this.__data__.has(t)}},function(t,e){t.exports=function(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(e(t[n],n,t))return!0;return!1}},function(t,e,n){var r=n(47),i=n(247),o=n(111),a=n(115),u=n(248),s=n(249),l=1,c=2,f="[object Boolean]",h="[object Date]",p="[object Error]",d="[object Map]",y="[object Number]",v="[object RegExp]",g="[object Set]",m="[object String]",_="[object Symbol]",x="[object ArrayBuffer]",b="[object DataView]",w=r?r.prototype:void 0,A=w?w.valueOf:void 0;t.exports=function(t,e,n,r,w,O,E){switch(n){case b:if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case x:return!(t.byteLength!=e.byteLength||!O(new i(t),new i(e)));case f:case h:case y:return o(+t,+e);case p:return t.name==e.name&&t.message==e.message;case v:case m:return t==e+"";case d:var M=u;case g:var S=r&l;if(M||(M=s),t.size!=e.size&&!S)return!1;var k=E.get(t);if(k)return k==e;r|=c,E.set(t,e);var P=a(M(t),M(e),r,w,O,E);return E.delete(t),P;case _:if(A)return A.call(t)==A.call(e)}return!1}},function(t,e,n){var r=n(15).Uint8Array;t.exports=r},function(t,e){t.exports=function(t){var e=-1,n=Array(t.size);return t.forEach((function(t,r){n[++e]=[r,t]})),n}},function(t,e){t.exports=function(t){var e=-1,n=Array(t.size);return t.forEach((function(t){n[++e]=t})),n}},function(t,e,n){var r=n(251),i=1,o=Object.prototype.hasOwnProperty;t.exports=function(t,e,n,a,u,s){var l=n&i,c=r(t),f=c.length;if(f!=r(e).length&&!l)return!1;for(var h=f;h--;){var p=c[h];if(!(l?p in e:o.call(e,p)))return!1}var d=s.get(t);if(d&&s.get(e))return d==e;var y=!0;s.set(t,e),s.set(e,t);for(var v=l;++h<f;){var g=t[p=c[h]],m=e[p];if(a)var _=l?a(m,g,p,e,t,s):a(g,m,p,t,e,s);if(!(void 0===_?g===m||u(g,m,n,a,s):_)){y=!1;break}v||(v="constructor"==p)}if(y&&!v){var x=t.constructor,b=e.constructor;x!=b&&"constructor"in t&&"constructor"in e&&!("function"==typeof x&&x instanceof x&&"function"==typeof b&&b instanceof b)&&(y=!1)}return s.delete(t),s.delete(e),y}},function(t,e,n){var r=n(252),i=n(254),o=n(81);t.exports=function(t){return r(t,o,i)}},function(t,e,n){var r=n(253),i=n(16);t.exports=function(t,e,n){var o=e(t);return i(t)?o:r(o,n(t))}},function(t,e){t.exports=function(t,e){for(var n=-1,r=e.length,i=t.length;++n<r;)t[i+n]=e[n];return t}},function(t,e,n){var r=n(118),i=n(255),o=Object.prototype.propertyIsEnumerable,a=Object.getOwnPropertySymbols,u=a?function(t){return null==t?[]:(t=Object(t),r(a(t),(function(e){return o.call(t,e)})))}:i;t.exports=u},function(t,e){t.exports=function(){return[]}},function(t,e,n){var r=n(257),i=n(119),o=n(16),a=n(120),u=n(121),s=n(122),l=Object.prototype.hasOwnProperty;t.exports=function(t,e){var n=o(t),c=!n&&i(t),f=!n&&!c&&a(t),h=!n&&!c&&!f&&s(t),p=n||c||f||h,d=p?r(t.length,String):[],y=d.length;for(var v in t)!e&&!l.call(t,v)||p&&("length"==v||f&&("offset"==v||"parent"==v)||h&&("buffer"==v||"byteLength"==v||"byteOffset"==v)||u(v,y))||d.push(v);return d}},function(t,e){t.exports=function(t,e){for(var n=-1,r=Array(t);++n<t;)r[n]=e(n);return r}},function(t,e,n){var r=n(30),i=n(25),o="[object Arguments]";t.exports=function(t){return i(t)&&r(t)==o}},function(t,e){t.exports=function(){return!1}},function(t,e,n){var r=n(30),i=n(82),o=n(25),a={};a["[object Float32Array]"]=a["[object Float64Array]"]=a["[object Int8Array]"]=a["[object Int16Array]"]=a["[object Int32Array]"]=a["[object Uint8Array]"]=a["[object Uint8ClampedArray]"]=a["[object Uint16Array]"]=a["[object Uint32Array]"]=!0,a["[object Arguments]"]=a["[object Array]"]=a["[object ArrayBuffer]"]=a["[object Boolean]"]=a["[object DataView]"]=a["[object Date]"]=a["[object Error]"]=a["[object Function]"]=a["[object Map]"]=a["[object Number]"]=a["[object Object]"]=a["[object RegExp]"]=a["[object Set]"]=a["[object String]"]=a["[object WeakMap]"]=!1,t.exports=function(t){return o(t)&&i(t.length)&&!!a[r(t)]}},function(t,e,n){(function(t){var r=n(113),i=e&&!e.nodeType&&e,o=i&&"object"==typeof t&&t&&!t.nodeType&&t,a=o&&o.exports===i&&r.process,u=function(){try{var t=o&&o.require&&o.require("util").types;return t||a&&a.binding&&a.binding("util")}catch(t){}}();t.exports=u}).call(this,n(74)(t))},function(t,e,n){var r=n(263),i=n(264),o=Object.prototype.hasOwnProperty;t.exports=function(t){if(!r(t))return i(t);var e=[];for(var n in Object(t))o.call(t,n)&&"constructor"!=n&&e.push(n);return e}},function(t,e){var n=Object.prototype;t.exports=function(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||n)}},function(t,e,n){var r=n(265)(Object.keys,Object);t.exports=r},function(t,e){t.exports=function(t,e){return function(n){return t(e(n))}}},function(t,e,n){var r=n(267),i=n(78),o=n(268),a=n(269),u=n(270),s=n(30),l=n(114),c=l(r),f=l(i),h=l(o),p=l(a),d=l(u),y=s;(r&&"[object DataView]"!=y(new r(new ArrayBuffer(1)))||i&&"[object Map]"!=y(new i)||o&&"[object Promise]"!=y(o.resolve())||a&&"[object Set]"!=y(new a)||u&&"[object WeakMap]"!=y(new u))&&(y=function(t){var e=s(t),n="[object Object]"==e?t.constructor:void 0,r=n?l(n):"";if(r)switch(r){case c:return"[object DataView]";case f:return"[object Map]";case h:return"[object Promise]";case p:return"[object Set]";case d:return"[object WeakMap]"}return e}),t.exports=y},function(t,e,n){var r=n(24)(n(15),"DataView");t.exports=r},function(t,e,n){var r=n(24)(n(15),"Promise");t.exports=r},function(t,e,n){var r=n(24)(n(15),"Set");t.exports=r},function(t,e,n){var r=n(24)(n(15),"WeakMap");t.exports=r},function(t,e,n){(function(e){(function(){var n,r,i,o,a,u;"undefined"!=typeof performance&&null!==performance&&performance.now?t.exports=function(){return performance.now()}:null!=e&&e.hrtime?(t.exports=function(){return(n()-a)/1e6},r=e.hrtime,o=(n=function(){var t;return 1e9*(t=r())[0]+t[1]})(),u=1e9*e.uptime(),a=o-u):Date.now?(t.exports=function(){return Date.now()-i},i=Date.now()):(t.exports=function(){return(new Date).getTime()-i},i=(new Date).getTime())}).call(this)}).call(this,n(272))},function(t,e){var n,r,i=t.exports={};function o(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function u(t){if(n===setTimeout)return setTimeout(t,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(t){n=o}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(t){r=a}}();var s,l=[],c=!1,f=-1;function h(){c&&s&&(c=!1,s.length?l=s.concat(l):f=-1,l.length&&p())}function p(){if(!c){var t=u(h);c=!0;for(var e=l.length;e;){for(s=l,l=[];++f<e;)s&&s[f].run();f=-1,e=l.length}s=null,c=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function d(t,e){this.fun=t,this.array=e}function y(){}i.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];l.push(new d(t,e)),1!==l.length||c||u(p)},d.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=y,i.addListener=y,i.once=y,i.off=y,i.removeListener=y,i.removeAllListeners=y,i.emit=y,i.prependListener=y,i.prependOnceListener=y,i.listeners=function(t){return[]},i.binding=function(t){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(t){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(t,e,n){var r=n(116),i=n(274),o=n(279),a=n(84),u=n(123),s=n(117),l=Math.min;t.exports=function(t,e,n){for(var c=n?o:i,f=t[0].length,h=t.length,p=h,d=Array(h),y=1/0,v=[];p--;){var g=t[p];p&&e&&(g=a(g,u(e))),y=l(g.length,y),d[p]=!n&&(e||f>=120&&g.length>=120)?new r(p&&g):void 0}g=t[0];var m=-1,_=d[0];t:for(;++m<f&&v.length<y;){var x=g[m],b=e?e(x):x;if(x=n||0!==x?x:0,!(_?s(_,b):c(v,b,n))){for(p=h;--p;){var w=d[p];if(!(w?s(w,b):c(t[p],b,n)))continue t}_&&_.push(b),v.push(x)}}return v}},function(t,e,n){var r=n(275);t.exports=function(t,e){return!!(null==t?0:t.length)&&r(t,e,0)>-1}},function(t,e,n){var r=n(276),i=n(277),o=n(278);t.exports=function(t,e,n){return e==e?o(t,e,n):r(t,i,n)}},function(t,e){t.exports=function(t,e,n,r){for(var i=t.length,o=n+(r?1:-1);r?o--:++o<i;)if(e(t[o],o,t))return o;return-1}},function(t,e){t.exports=function(t){return t!=t}},function(t,e){t.exports=function(t,e,n){for(var r=n-1,i=t.length;++r<i;)if(t[r]===e)return r;return-1}},function(t,e){t.exports=function(t,e,n){for(var r=-1,i=null==t?0:t.length;++r<i;)if(n(e,t[r]))return!0;return!1}},function(t,e,n){var r=n(85),i=n(281),o=n(283);t.exports=function(t,e){return o(i(t,e,r),t+"")}},function(t,e,n){var r=n(282),i=Math.max;t.exports=function(t,e,n){return e=i(void 0===e?t.length-1:e,0),function(){for(var o=arguments,a=-1,u=i(o.length-e,0),s=Array(u);++a<u;)s[a]=o[e+a];a=-1;for(var l=Array(e+1);++a<e;)l[a]=o[a];return l[e]=n(s),r(t,this,l)}}},function(t,e){t.exports=function(t,e,n){switch(n.length){case 0:return t.call(e);case 1:return t.call(e,n[0]);case 2:return t.call(e,n[0],n[1]);case 3:return t.call(e,n[0],n[1],n[2])}return t.apply(e,n)}},function(t,e,n){var r=n(284),i=n(287)(r);t.exports=i},function(t,e,n){var r=n(285),i=n(286),o=n(85),a=i?function(t,e){return i(t,"toString",{configurable:!0,enumerable:!1,value:r(e),writable:!0})}:o;t.exports=a},function(t,e){t.exports=function(t){return function(){return t}}},function(t,e,n){var r=n(24),i=function(){try{var t=r(Object,"defineProperty");return t({},"",{}),t}catch(t){}}();t.exports=i},function(t,e){var n=800,r=16,i=Date.now;t.exports=function(t){var e=0,o=0;return function(){var a=i(),u=r-(a-o);if(o=a,u>0){if(++e>=n)return arguments[0]}else e=0;return t.apply(void 0,arguments)}}},function(t,e,n){var r=n(289);t.exports=function(t){return r(t)?t:[]}},function(t,e,n){var r=n(83),i=n(25);t.exports=function(t){return i(t)&&r(t)}},function(t,e,n){var r=n(291);t.exports=function(t,e){var n=[];return r(t,(function(t,r,i){e(t,r,i)&&n.push(t)})),n}},function(t,e,n){var r=n(292),i=n(295)(r);t.exports=i},function(t,e,n){var r=n(293),i=n(81);t.exports=function(t,e){return t&&r(t,e,i)}},function(t,e,n){var r=n(294)();t.exports=r},function(t,e){t.exports=function(t){return function(e,n,r){for(var i=-1,o=Object(e),a=r(e),u=a.length;u--;){var s=a[t?u:++i];if(!1===n(o[s],s,o))break}return e}}},function(t,e,n){var r=n(83);t.exports=function(t,e){return function(n,i){if(null==n)return n;if(!r(n))return t(n,i);for(var o=n.length,a=e?o:-1,u=Object(n);(e?a--:++a<o)&&!1!==i(u[a],a,u););return n}}},function(t,e,n){var r=n(297),i=n(300),o=n(85),a=n(16),u=n(310);t.exports=function(t){return"function"==typeof t?t:null==t?o:"object"==typeof t?a(t)?i(t[0],t[1]):r(t):u(t)}},function(t,e,n){var r=n(298),i=n(299),o=n(125);t.exports=function(t){var e=i(t);return 1==e.length&&e[0][2]?o(e[0][0],e[0][1]):function(n){return n===t||r(n,t,e)}}},function(t,e,n){var r=n(110),i=n(77),o=1,a=2;t.exports=function(t,e,n,u){var s=n.length,l=s,c=!u;if(null==t)return!l;for(t=Object(t);s--;){var f=n[s];if(c&&f[2]?f[1]!==t[f[0]]:!(f[0]in t))return!1}for(;++s<l;){var h=(f=n[s])[0],p=t[h],d=f[1];if(c&&f[2]){if(void 0===p&&!(h in t))return!1}else{var y=new r;if(u)var v=u(p,d,h,t,e,y);if(!(void 0===v?i(d,p,o|a,u,y):v))return!1}}return!0}},function(t,e,n){var r=n(124),i=n(81);t.exports=function(t){for(var e=i(t),n=e.length;n--;){var o=e[n],a=t[o];e[n]=[o,a,r(a)]}return e}},function(t,e,n){var r=n(77),i=n(301),o=n(307),a=n(86),u=n(124),s=n(125),l=n(50),c=1,f=2;t.exports=function(t,e){return a(t)&&u(e)?s(l(t),e):function(n){var a=i(n,t);return void 0===a&&a===e?o(n,t):r(e,a,c|f)}}},function(t,e,n){var r=n(126);t.exports=function(t,e,n){var i=null==t?void 0:r(t,e);return void 0===i?n:i}},function(t,e,n){var r=n(303),i=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,o=/\\(\\)?/g,a=r((function(t){var e=[];return 46===t.charCodeAt(0)&&e.push(""),t.replace(i,(function(t,n,r,i){e.push(r?i.replace(o,"$1"):n||t)})),e}));t.exports=a},function(t,e,n){var r=n(304),i=500;t.exports=function(t){var e=r(t,(function(t){return n.size===i&&n.clear(),t})),n=e.cache;return e}},function(t,e,n){var r=n(80),i="Expected a function";function o(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new TypeError(i);var n=function(){var r=arguments,i=e?e.apply(this,r):r[0],o=n.cache;if(o.has(i))return o.get(i);var a=t.apply(this,r);return n.cache=o.set(i,a)||o,a};return n.cache=new(o.Cache||r),n}o.Cache=r,t.exports=o},function(t,e,n){var r=n(306);t.exports=function(t){return null==t?"":r(t)}},function(t,e,n){var r=n(47),i=n(84),o=n(16),a=n(87),u=1/0,s=r?r.prototype:void 0,l=s?s.toString:void 0;t.exports=function t(e){if("string"==typeof e)return e;if(o(e))return i(e,t)+"";if(a(e))return l?l.call(e):"";var n=e+"";return"0"==n&&1/e==-u?"-0":n}},function(t,e,n){var r=n(308),i=n(309);t.exports=function(t,e){return null!=t&&i(t,e,r)}},function(t,e){t.exports=function(t,e){return null!=t&&e in Object(t)}},function(t,e,n){var r=n(127),i=n(119),o=n(16),a=n(121),u=n(82),s=n(50);t.exports=function(t,e,n){for(var l=-1,c=(e=r(e,t)).length,f=!1;++l<c;){var h=s(e[l]);if(!(f=null!=t&&n(t,h)))break;t=t[h]}return f||++l!=c?f:!!(c=null==t?0:t.length)&&u(c)&&a(h,c)&&(o(t)||i(t))}},function(t,e,n){var r=n(311),i=n(312),o=n(86),a=n(50);t.exports=function(t){return o(t)?r(a(t)):i(t)}},function(t,e){t.exports=function(t){return function(e){return null==e?void 0:e[t]}}},function(t,e,n){var r=n(126);t.exports=function(t){return function(e){return r(e,t)}}},function(t,e,n){"use strict";e.__esModule=!0,e.default=void 0;!function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)if(Object.prototype.hasOwnProperty.call(t,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(t,n):{};r.get||r.set?Object.defineProperty(e,n,r):e[n]=t[n]}e.default=t}(n(1));var r=u(n(314)),i=u(n(317)),o=u(n(0)),a=u(n(128));n(130);function u(t){return t&&t.__esModule?t:{default:t}}function s(){return(s=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t}).apply(this,arguments)}var l=function(t,e){return t&&e&&e.split(" ").forEach((function(e){return(0,r.default)(t,e)}))},c=function(t,e){return t&&e&&e.split(" ").forEach((function(e){return(0,i.default)(t,e)}))},f=function(t){var e,n;function r(){for(var e,n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];return(e=t.call.apply(t,[this].concat(r))||this).onEnter=function(t,n){var r=e.getClassNames(n?"appear":"enter").className;e.removeClasses(t,"exit"),l(t,r),e.props.onEnter&&e.props.onEnter(t,n)},e.onEntering=function(t,n){var r=e.getClassNames(n?"appear":"enter").activeClassName;e.reflowAndAddClass(t,r),e.props.onEntering&&e.props.onEntering(t,n)},e.onEntered=function(t,n){var r=e.getClassNames("appear").doneClassName,i=e.getClassNames("enter").doneClassName,o=n?r+" "+i:i;e.removeClasses(t,n?"appear":"enter"),l(t,o),e.props.onEntered&&e.props.onEntered(t,n)},e.onExit=function(t){var n=e.getClassNames("exit").className;e.removeClasses(t,"appear"),e.removeClasses(t,"enter"),l(t,n),e.props.onExit&&e.props.onExit(t)},e.onExiting=function(t){var n=e.getClassNames("exit").activeClassName;e.reflowAndAddClass(t,n),e.props.onExiting&&e.props.onExiting(t)},e.onExited=function(t){var n=e.getClassNames("exit").doneClassName;e.removeClasses(t,"exit"),l(t,n),e.props.onExited&&e.props.onExited(t)},e.getClassNames=function(t){var n=e.props.classNames,r="string"==typeof n,i=r?(r&&n?n+"-":"")+t:n[t];return{className:i,activeClassName:r?i+"-active":n[t+"Active"],doneClassName:r?i+"-done":n[t+"Done"]}},e}n=t,(e=r).prototype=Object.create(n.prototype),e.prototype.constructor=e,e.__proto__=n;var i=r.prototype;return i.removeClasses=function(t,e){var n=this.getClassNames(e),r=n.className,i=n.activeClassName,o=n.doneClassName;r&&c(t,r),i&&c(t,i),o&&c(t,o)},i.reflowAndAddClass=function(t,e){e&&(t&&t.scrollTop,l(t,e))},i.render=function(){var t=s({},this.props);return delete t.classNames,o.default.createElement(a.default,s({},t,{onEnter:this.onEnter,onEntered:this.onEntered,onEntering:this.onEntering,onExit:this.onExit,onExiting:this.onExiting,onExited:this.onExited}))},r}(o.default.Component);f.defaultProps={classNames:""},f.propTypes={};var h=f;e.default=h,t.exports=e.default},function(t,e,n){"use strict";var r=n(315);e.__esModule=!0,e.default=function(t,e){t.classList?t.classList.add(e):(0,i.default)(t,e)||("string"==typeof t.className?t.className=t.className+" "+e:t.setAttribute("class",(t.className&&t.className.baseVal||"")+" "+e))};var i=r(n(316));t.exports=e.default},function(t,e){t.exports=function(t){return t&&t.__esModule?t:{default:t}}},function(t,e,n){"use strict";e.__esModule=!0,e.default=function(t,e){return t.classList?!!e&&t.classList.contains(e):-1!==(" "+(t.className.baseVal||t.className)+" ").indexOf(" "+e+" ")},t.exports=e.default},function(t,e,n){"use strict";function r(t,e){return t.replace(new RegExp("(^|\\s)"+e+"(?:\\s|$)","g"),"$1").replace(/\s+/g," ").replace(/^\s*|\s*$/g,"")}t.exports=function(t,e){t.classList?t.classList.remove(e):"string"==typeof t.className?t.className=r(t.className,e):t.setAttribute("class",r(t.className&&t.className.baseVal||"",e))}},function(t,e,n){"use strict";e.__esModule=!0,e.default=void 0;a(n(1));var r=a(n(0)),i=n(60),o=a(n(131));function a(t){return t&&t.__esModule?t:{default:t}}var u=function(t){var e,n;function a(){for(var e,n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];return(e=t.call.apply(t,[this].concat(r))||this).handleEnter=function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return e.handleLifecycle("onEnter",0,n)},e.handleEntering=function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return e.handleLifecycle("onEntering",0,n)},e.handleEntered=function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return e.handleLifecycle("onEntered",0,n)},e.handleExit=function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return e.handleLifecycle("onExit",1,n)},e.handleExiting=function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return e.handleLifecycle("onExiting",1,n)},e.handleExited=function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return e.handleLifecycle("onExited",1,n)},e}n=t,(e=a).prototype=Object.create(n.prototype),e.prototype.constructor=e,e.__proto__=n;var u=a.prototype;return u.handleLifecycle=function(t,e,n){var o,a=this.props.children,u=r.default.Children.toArray(a)[e];u.props[t]&&(o=u.props)[t].apply(o,n),this.props[t]&&this.props[t]((0,i.findDOMNode)(this))},u.render=function(){var t=this.props,e=t.children,n=t.in,i=function(t,e){if(null==t)return{};var n,r,i={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,["children","in"]),a=r.default.Children.toArray(e),u=a[0],s=a[1];return delete i.onEnter,delete i.onEntering,delete i.onEntered,delete i.onExit,delete i.onExiting,delete i.onExited,r.default.createElement(o.default,i,n?r.default.cloneElement(u,{key:"first",onEnter:this.handleEnter,onEntering:this.handleEntering,onEntered:this.handleEntered}):r.default.cloneElement(s,{key:"second",onEnter:this.handleExit,onEntering:this.handleExiting,onEntered:this.handleExited}))},a}(r.default.Component);u.propTypes={};var s=u;e.default=s,t.exports=e.default},function(t,e,n){"use strict";e.__esModule=!0,e.getChildMapping=i,e.mergeChildMappings=o,e.getInitialChildMapping=function(t,e){return i(t.children,(function(n){return(0,r.cloneElement)(n,{onExited:e.bind(null,n),in:!0,appear:a(n,"appear",t),enter:a(n,"enter",t),exit:a(n,"exit",t)})}))},e.getNextChildMapping=function(t,e,n){var u=i(t.children),s=o(e,u);return Object.keys(s).forEach((function(i){var o=s[i];if((0,r.isValidElement)(o)){var l=i in e,c=i in u,f=e[i],h=(0,r.isValidElement)(f)&&!f.props.in;!c||l&&!h?c||!l||h?c&&l&&(0,r.isValidElement)(f)&&(s[i]=(0,r.cloneElement)(o,{onExited:n.bind(null,o),in:f.props.in,exit:a(o,"exit",t),enter:a(o,"enter",t)})):s[i]=(0,r.cloneElement)(o,{in:!1}):s[i]=(0,r.cloneElement)(o,{onExited:n.bind(null,o),in:!0,exit:a(o,"exit",t),enter:a(o,"enter",t)})}})),s};var r=n(0);function i(t,e){var n=Object.create(null);return t&&r.Children.map(t,(function(t){return t})).forEach((function(t){n[t.key]=function(t){return e&&(0,r.isValidElement)(t)?e(t):t}(t)})),n}function o(t,e){function n(n){return n in e?e[n]:t[n]}t=t||{},e=e||{};var r,i=Object.create(null),o=[];for(var a in t)a in e?o.length&&(i[a]=o,o=[]):o.push(a);var u={};for(var s in e){if(i[s])for(r=0;r<i[s].length;r++){var l=i[s][r];u[i[s][r]]=n(l)}u[s]=n(s)}for(r=0;r<o.length;r++)u[o[r]]=n(o[r]);return u}function a(t,e,n){return null!=n[e]?n[e]:t.props[e]}},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}},u=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e};Object.defineProperty(e,"__esModule",{value:!0});var s=a(n(3)),l=u(n(0)),c=a(n(4)),f=n(5);function h(t){return s.default.isArray(t)&&f.isNumOrStr(t[0])&&f.isNumOrStr(t[1])?t.join(" ~ "):t}var p=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.renderContent=function(){var t=this.props,e=t.payload,n=t.separator,r=t.formatter,i=t.itemStyle,a=t.itemSorter;if(e&&e.length){var u=(a?s.default.sortBy(e,a):e).map((function(t,e){if("none"===t.type)return null;var a=o({display:"block",paddingTop:4,paddingBottom:4,color:t.color||"#000"},i),u=t.formatter||r||h,s=t.name,c=t.value;if(u){var p=u(c,s,t,e);Array.isArray(p)?(c=p[0],s=p[1]):c=p}return l.default.createElement("li",{className:"recharts-tooltip-item",key:"tooltip-item-"+e,style:a},f.isNumOrStr(s)?l.default.createElement("span",{className:"recharts-tooltip-item-name"},s):null,f.isNumOrStr(s)?l.default.createElement("span",{className:"recharts-tooltip-item-separator"},n):null,l.default.createElement("span",{className:"recharts-tooltip-item-value"},c),l.default.createElement("span",{className:"recharts-tooltip-item-unit"},t.unit||""))}));return l.default.createElement("ul",{className:"recharts-tooltip-item-list",style:{padding:0,margin:0}},u)}return null},e.prototype.render=function(){var t=this.props,e=t.wrapperClassName,n=t.contentStyle,r=t.labelClassName,i=t.labelStyle,a=t.label,u=t.labelFormatter,s=o({margin:0,padding:10,backgroundColor:"#fff",border:"1px solid #ccc",whiteSpace:"nowrap"},n),h=o({margin:0},i),p=f.isNumOrStr(a),d=p?a:"",y=c.default("recharts-default-tooltip",e),v=c.default("recharts-tooltip-label",r);return p&&u&&(d=u(a)),l.default.createElement("div",{className:y,style:s},l.default.createElement("p",{className:v,style:h},d),this.renderContent())},e.displayName="DefaultTooltipContent",e.defaultProps={separator:" : ",contentStyle:{},itemStyle:{},labelStyle:{}},e}(l.PureComponent);e.default=p},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e},a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var u=o(n(0)),s=a(n(4)),l=a(n(354)),c=a(n(3)),f=n(5),h=n(31),p=function(t){function e(e){var n=t.call(this,e)||this;return n.updateDimensionsImmediate=function(){if(n.mounted){var t=n.getContainerSize();if(t){var e=n.state,r=e.containerWidth,i=e.containerHeight,o=t.containerWidth,a=t.containerHeight;o===r&&a===i||n.setState({containerWidth:o,containerHeight:a})}}},n.state={containerWidth:-1,containerHeight:-1},n.handleResize=e.debounce>0?c.default.debounce(n.updateDimensionsImmediate,e.debounce):n.updateDimensionsImmediate,n}return i(e,t),e.prototype.componentDidMount=function(){this.mounted=!0;var t=this.getContainerSize();t&&this.setState(t)},e.prototype.componentWillUnmount=function(){this.mounted=!1},e.prototype.getContainerSize=function(){return this.container?{containerWidth:this.container.clientWidth,containerHeight:this.container.clientHeight}:null},e.prototype.renderChart=function(){var t=this.state,e=t.containerWidth,n=t.containerHeight;if(e<0||n<0)return null;var r=this.props,i=r.aspect,o=r.width,a=r.height,s=r.minWidth,l=r.minHeight,c=r.maxHeight,p=r.children;h.warn(f.isPercent(o)||f.isPercent(a),"The width(%s) and height(%s) are both fixed numbers,\n       maybe you don't need to use a ResponsiveContainer.",o,a),h.warn(!i||i>0,"The aspect(%s) must be greater than zero.",i);var d=f.isPercent(o)?e:o,y=f.isPercent(a)?n:a;return i&&i>0&&(d?y=d/i:y&&(d=y*i),c&&y>c&&(y=c)),h.warn(d>0||y>0,"The width(%s) and height(%s) of chart should be greater than 0,\n       please check the style of container, or the props width(%s) and height(%s),\n       or add a minWidth(%s) or minHeight(%s) or use aspect(%s) to control the\n       height and width.",d,y,o,a,s,l,i),u.default.cloneElement(p,{width:d,height:y})},e.prototype.render=function(){var t=this,e=this.props,n=e.minWidth,r=e.minHeight,i=e.width,o=e.height,a=e.maxHeight,c=e.id,f=e.className,h={width:i,height:o,minWidth:n,minHeight:r,maxHeight:a};return u.default.createElement("div",{id:""+c,className:s.default("recharts-responsive-container",f),style:h,ref:function(e){t.container=e}},this.renderChart(),u.default.createElement(l.default,{handleWidth:!0,handleHeight:!0,onResize:this.handleResize}))},e.defaultProps={width:"100%",height:"100%",debounce:0},e}(u.Component);e.default=p},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=u(n(323)),i=n(328),o=u(n(132)),a=u(n(331));function u(t){return t&&t.__esModule?t:{default:t}}var s=/((?:\-[a-z]+\-)?calc)/;e.default=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:5;return(0,r.default)(t).walk((function(t){if("function"===t.type&&s.test(t.value)){var n=r.default.stringify(t.nodes);if(!(n.indexOf("constant")>=0||n.indexOf("env")>=0)){var u=i.parser.parse(n),l=(0,o.default)(u,e);t.type="word",t.value=(0,a.default)(t.value,l,e)}}}),!0).toString()},t.exports=e.default},function(t,e,n){var r=n(324),i=n(325),o=n(326);function a(t){return this instanceof a?(this.nodes=r(t),this):new a(t)}a.prototype.toString=function(){return Array.isArray(this.nodes)?o(this.nodes):""},a.prototype.walk=function(t,e){return i(this.nodes,t,e),this},a.unit=n(327),a.walk=i,a.stringify=o,t.exports=a},function(t,e){var n="(".charCodeAt(0),r=")".charCodeAt(0),i="'".charCodeAt(0),o='"'.charCodeAt(0),a="\\".charCodeAt(0),u="/".charCodeAt(0),s=",".charCodeAt(0),l=":".charCodeAt(0),c="*".charCodeAt(0);t.exports=function(t){for(var e,f,h,p,d,y,v,g,m=[],_=t,x=0,b=_.charCodeAt(x),w=_.length,A=[{nodes:m}],O=0,E="",M="",S="";x<w;)if(b<=32){e=x;do{e+=1,b=_.charCodeAt(e)}while(b<=32);p=_.slice(x,e),h=m[m.length-1],b===r&&O?S=p:h&&"div"===h.type?h.after=p:b===s||b===l||b===u&&_.charCodeAt(e+1)!==c?M=p:m.push({type:"space",sourceIndex:x,value:p}),x=e}else if(b===i||b===o){e=x,p={type:"string",sourceIndex:x,quote:f=b===i?"'":'"'};do{if(d=!1,~(e=_.indexOf(f,e+1)))for(y=e;_.charCodeAt(y-1)===a;)y-=1,d=!d;else e=(_+=f).length-1,p.unclosed=!0}while(d);p.value=_.slice(x+1,e),m.push(p),x=e+1,b=_.charCodeAt(x)}else if(b===u&&_.charCodeAt(x+1)===c)p={type:"comment",sourceIndex:x},-1===(e=_.indexOf("*/",x))&&(p.unclosed=!0,e=_.length),p.value=_.slice(x+2,e),m.push(p),x=e+2,b=_.charCodeAt(x);else if(b===u||b===s||b===l)p=_[x],m.push({type:"div",sourceIndex:x-M.length,value:p,before:M,after:""}),M="",x+=1,b=_.charCodeAt(x);else if(n===b){e=x;do{e+=1,b=_.charCodeAt(e)}while(b<=32);if(p={type:"function",sourceIndex:x-E.length,value:E,before:_.slice(x+1,e)},x=e,"url"===E&&b!==i&&b!==o){e-=1;do{if(d=!1,~(e=_.indexOf(")",e+1)))for(y=e;_.charCodeAt(y-1)===a;)y-=1,d=!d;else e=(_+=")").length-1,p.unclosed=!0}while(d);v=e;do{v-=1,b=_.charCodeAt(v)}while(b<=32);p.nodes=x!==v+1?[{type:"word",sourceIndex:x,value:_.slice(x,v+1)}]:[],p.unclosed&&v+1!==e?(p.after="",p.nodes.push({type:"space",sourceIndex:v+1,value:_.slice(v+1,e)})):p.after=_.slice(v+1,e),x=e+1,b=_.charCodeAt(x),m.push(p)}else O+=1,p.after="",m.push(p),A.push(p),m=p.nodes=[],g=p;E=""}else if(r===b&&O)x+=1,b=_.charCodeAt(x),g.after=S,S="",O-=1,A.pop(),m=(g=A[O]).nodes;else{e=x;do{b===a&&(e+=1),e+=1,b=_.charCodeAt(e)}while(e<w&&!(b<=32||b===i||b===o||b===s||b===l||b===u||b===n||b===r&&O));p=_.slice(x,e),n===b?E=p:m.push({type:"word",sourceIndex:x,value:p}),x=e}for(x=A.length-1;x;x-=1)A[x].unclosed=!0;return A[0].nodes}},function(t,e){t.exports=function t(e,n,r){var i,o,a,u;for(i=0,o=e.length;i<o;i+=1)a=e[i],r||(u=n(a,i,e)),!1!==u&&"function"===a.type&&Array.isArray(a.nodes)&&t(a.nodes,n,r),r&&n(a,i,e)}},function(t,e){function n(t,e){var n,i,o=t.type,a=t.value;return e&&void 0!==(i=e(t))?i:"word"===o||"space"===o?a:"string"===o?(n=t.quote||"")+a+(t.unclosed?"":n):"comment"===o?"/*"+a+(t.unclosed?"":"*/"):"div"===o?(t.before||"")+a+(t.after||""):Array.isArray(t.nodes)?(n=r(t.nodes),"function"!==o?n:a+"("+(t.before||"")+n+(t.after||"")+(t.unclosed?"":")")):a}function r(t,e){var r,i;if(Array.isArray(t)){for(r="",i=t.length-1;~i;i-=1)r=n(t[i],e)+r;return r}return n(t,e)}t.exports=r},function(t,e){var n="-".charCodeAt(0),r="+".charCodeAt(0),i=".".charCodeAt(0),o="e".charCodeAt(0),a="E".charCodeAt(0);t.exports=function(t){for(var e,u=0,s=t.length,l=!1,c=-1,f=!1;u<s;){if((e=t.charCodeAt(u))>=48&&e<=57)f=!0;else if(e===o||e===a){if(c>-1)break;c=u}else if(e===i){if(l)break;l=!0}else{if(e!==r&&e!==n)break;if(0!==u)break}u+=1}return c+1===u&&u--,!!f&&{number:t.slice(0,u),unit:t.slice(u)}}},function(t,e,n){var r=function(){function t(t,e){var n;if(Object.defineProperty(this,"name",{enumerable:!1,writable:!1,value:"JisonParserError"}),null==t&&(t="???"),Object.defineProperty(this,"message",{enumerable:!1,writable:!0,value:t}),this.hash=e,e&&e.exception instanceof Error){var r=e.exception;this.message=r.message||t,n=r.stack}n||(Error.hasOwnProperty("captureStackTrace")?Error.captureStackTrace(this,this.constructor):n=new Error(t).stack),n&&Object.defineProperty(this,"stack",{enumerable:!1,writable:!1,value:n})}function e(t,e,n){n=n||0;for(var r=0;r<e;r++)this.push(t),t+=n}function n(t,e){for(e+=t=this.length-t;t<e;t++)this.push(this[t])}function r(t){for(var e=[],n=0,r=t.length;n<r;n++){var i=t[n];"function"==typeof i?(n++,i.apply(e,t[n])):e.push(i)}return e}"function"==typeof Object.setPrototypeOf?Object.setPrototypeOf(t.prototype,Error.prototype):t.prototype=Object.create(Error.prototype),t.prototype.constructor=t,t.prototype.name="JisonParserError";var i={trace:function(){},JisonParserError:t,yy:{},options:{type:"lalr",hasPartialLrUpgradeOnConflict:!0,errorRecoveryTokenDiscardCount:3},symbols_:{$accept:0,$end:1,ADD:3,ANGLE:14,CHS:20,CSS_VAR:12,DIV:6,EMS:18,EOF:1,EXS:19,FREQ:16,LENGTH:13,LPAREN:7,MUL:5,NESTED_CALC:9,NUMBER:11,PERCENTAGE:26,PREFIX:10,REMS:21,RES:17,RPAREN:8,SUB:4,TIME:15,VHS:22,VMAXS:25,VMINS:24,VWS:23,css_value:31,css_variable:30,error:2,expression:27,math_expression:28,value:29},terminals_:{1:"EOF",2:"error",3:"ADD",4:"SUB",5:"MUL",6:"DIV",7:"LPAREN",8:"RPAREN",9:"NESTED_CALC",10:"PREFIX",11:"NUMBER",12:"CSS_VAR",13:"LENGTH",14:"ANGLE",15:"TIME",16:"FREQ",17:"RES",18:"EMS",19:"EXS",20:"CHS",21:"REMS",22:"VHS",23:"VWS",24:"VMINS",25:"VMAXS",26:"PERCENTAGE"},TERROR:2,EOF:1,originalQuoteName:null,originalParseError:null,cleanupAfterParse:null,constructParseErrorInfo:null,yyMergeLocationInfo:null,__reentrant_call_depth:0,__error_infos:[],__error_recovery_infos:[],quoteName:function(t){return'"'+t+'"'},getSymbolName:function(t){if(this.terminals_[t])return this.terminals_[t];var e=this.symbols_;for(var n in e)if(e[n]===t)return n;return null},describeSymbol:function(t){if(t!==this.EOF&&this.terminal_descriptions_&&this.terminal_descriptions_[t])return this.terminal_descriptions_[t];if(t===this.EOF)return"end of input";var e=this.getSymbolName(t);return e?this.quoteName(e):null},collect_expected_token_set:function(t,e){var n=this.TERROR,r=[],i={};if(!e&&this.state_descriptions_&&this.state_descriptions_[t])return[this.state_descriptions_[t]];for(var o in this.table[t])if((o=+o)!==n){var a=e?o:this.describeSymbol(o);a&&!i[a]&&(r.push(a),i[a]=!0)}return r},productions_:function(t){for(var e=[],n=t.pop,r=t.rule,i=0,o=n.length;i<o;i++)e.push([n[i],r[i]]);return e}({pop:r([27,e,[28,10],29,29,30,e,[31,15]]),rule:r([2,e,[3,5],4,7,e,[1,4],2,e,[1,15],2])}),performAction:function(t,e,n){var r=this.yy;r.parser,r.lexer;switch(t){case 0:
/*! Production::    $accept : expression $end */
this.$=n[e-1];break;case 1:
/*! Production::    expression : math_expression EOF */
return this.$=n[e-1],n[e-1];case 2:
/*! Production::    math_expression : math_expression ADD math_expression */case 3:
/*! Production::    math_expression : math_expression SUB math_expression */case 4:
/*! Production::    math_expression : math_expression MUL math_expression */case 5:
/*! Production::    math_expression : math_expression DIV math_expression */
this.$={type:"MathExpression",operator:n[e-1],left:n[e-2],right:n[e]};break;case 6:
/*! Production::    math_expression : LPAREN math_expression RPAREN */case 7:
/*! Production::    math_expression : NESTED_CALC LPAREN math_expression RPAREN */case 8:
/*! Production::    math_expression : SUB PREFIX SUB NESTED_CALC LPAREN math_expression RPAREN */
this.$=n[e-1];break;case 9:
/*! Production::    math_expression : css_variable */case 10:
/*! Production::    math_expression : css_value */case 11:
/*! Production::    math_expression : value */
this.$=n[e];break;case 12:
/*! Production::    value : NUMBER */
this.$={type:"Value",value:parseFloat(n[e])};break;case 13:
/*! Production::    value : SUB NUMBER */
this.$={type:"Value",value:-1*parseFloat(n[e])};break;case 14:
/*! Production::    css_variable : CSS_VAR */
this.$={type:"CssVariable",value:n[e]};break;case 15:
/*! Production::    css_value : LENGTH */
this.$={type:"LengthValue",value:parseFloat(n[e]),unit:/[a-z]+/.exec(n[e])[0]};break;case 16:
/*! Production::    css_value : ANGLE */
this.$={type:"AngleValue",value:parseFloat(n[e]),unit:/[a-z]+/.exec(n[e])[0]};break;case 17:
/*! Production::    css_value : TIME */
this.$={type:"TimeValue",value:parseFloat(n[e]),unit:/[a-z]+/.exec(n[e])[0]};break;case 18:
/*! Production::    css_value : FREQ */
this.$={type:"FrequencyValue",value:parseFloat(n[e]),unit:/[a-z]+/.exec(n[e])[0]};break;case 19:
/*! Production::    css_value : RES */
this.$={type:"ResolutionValue",value:parseFloat(n[e]),unit:/[a-z]+/.exec(n[e])[0]};break;case 20:
/*! Production::    css_value : EMS */
this.$={type:"EmValue",value:parseFloat(n[e]),unit:"em"};break;case 21:
/*! Production::    css_value : EXS */
this.$={type:"ExValue",value:parseFloat(n[e]),unit:"ex"};break;case 22:
/*! Production::    css_value : CHS */
this.$={type:"ChValue",value:parseFloat(n[e]),unit:"ch"};break;case 23:
/*! Production::    css_value : REMS */
this.$={type:"RemValue",value:parseFloat(n[e]),unit:"rem"};break;case 24:
/*! Production::    css_value : VHS */
this.$={type:"VhValue",value:parseFloat(n[e]),unit:"vh"};break;case 25:
/*! Production::    css_value : VWS */
this.$={type:"VwValue",value:parseFloat(n[e]),unit:"vw"};break;case 26:
/*! Production::    css_value : VMINS */
this.$={type:"VminValue",value:parseFloat(n[e]),unit:"vmin"};break;case 27:
/*! Production::    css_value : VMAXS */
this.$={type:"VmaxValue",value:parseFloat(n[e]),unit:"vmax"};break;case 28:
/*! Production::    css_value : PERCENTAGE */
this.$={type:"PercentageValue",value:parseFloat(n[e]),unit:"%"};break;case 29:
/*! Production::    css_value : SUB css_value */
var i=n[e];i.value*=-1,this.$=i}},table:function(t){for(var e=[],n=t.len,r=t.symbol,i=t.type,o=t.state,a=t.mode,u=t.goto,s=0,l=n.length;s<l;s++){for(var c=n[s],f={},h=0;h<c;h++){var p=r.shift();switch(i.shift()){case 2:f[p]=[a.shift(),u.shift()];break;case 0:f[p]=o.shift();break;default:f[p]=[3]}}e.push(f)}return e}({len:r([24,1,5,23,1,18,e,[0,20],e,[23,4],n,[28,3],0,0,16,6,6,e,[0,3],5,1,0,1,23,5,0]),symbol:r([4,7,9,e,[11,21,1],1,1,e,[3,4,1],n,[30,19],n,[29,4],7,4,10,11,n,[22,14],31,n,[42,23],n,[23,69],n,[138,4],8,n,[51,24],4,n,[137,15],n,[184,5],8,n,[6,6],n,[5,5],9,7,n,[87,28]]),type:r([e,[2,19],e,[0,5],1,e,[2,24],e,[0,4],n,[22,19],n,[42,41],n,[23,70],n,[28,25],n,[45,25],n,[59,23]]),state:r([1,2,8,6,7,30,n,[4,3],33,36,n,[5,3],37,n,[4,3],38,n,[4,3],39,n,[4,3],41,n,[21,4],46,n,[5,3]]),mode:r([e,[1,177],e,[2,3],n,[5,5],n,[6,4],e,[1,31]]),goto:r([5,3,4,24,e,[9,15,1],e,[25,5,1],n,[24,19],31,35,32,34,n,[18,14],n,[37,19],n,[19,57],n,[117,4],40,n,[24,19],42,35,n,[16,14],e,[2,3],28,29,2,e,[3,3],28,29,3,n,[52,4],43,44,45,n,[78,23],47])}),defaultActions:function(t){for(var e={},n=t.idx,r=t.goto,i=0,o=n.length;i<o;i++){e[n[i]]=r[i]}return e}({idx:r([e,[6,20,1],33,34,38,39,40,43,47]),goto:r([9,10,11,e,[14,15,1],12,1,29,13,e,[4,5,1]])}),parseError:function(t,e,n){if(!e.recoverable)throw"function"==typeof this.trace&&this.trace(t),n||(n=this.JisonParserError),new n(t,e);"function"==typeof this.trace&&this.trace(t),e.destroy()},parse:function(t){var e,n=this,r=new Array(128),i=new Array(128),o=new Array(128),a=this.table,u=0,s=0,l=(this.TERROR,this.EOF),c=(this.options.errorRecoveryTokenDiscardCount,[0,48]);e=this.__lexer__?this.__lexer__:this.__lexer__=Object.create(this.lexer);var f={parseError:void 0,quoteName:void 0,lexer:void 0,parser:void 0,pre_parse:void 0,post_parse:void 0,pre_lex:void 0,post_lex:void 0};function h(){var t=e.fastLex();return"number"!=typeof t&&(t=n.symbols_[t]||t),t||l}"function"!=typeof assert||assert,this.yyGetSharedState=function(){return f},function(t,e){for(var n in e)void 0===t[n]&&Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])}(f,this.yy),f.lexer=e,f.parser=this,"function"==typeof f.parseError?this.parseError=function(t,e,n){return n||(n=this.JisonParserError),f.parseError.call(this,t,e,n)}:this.parseError=this.originalParseError,"function"==typeof f.quoteName?this.quoteName=function(t){return f.quoteName.call(this,t)}:this.quoteName=this.originalQuoteName,this.cleanupAfterParse=function(t,n,a){var s,l;n&&((f.post_parse||this.post_parse)&&(l=this.constructParseErrorInfo(null,null,null,!1)),f.post_parse&&void 0!==(s=f.post_parse.call(this,f,t,l))&&(t=s),this.post_parse&&void 0!==(s=this.post_parse.call(this,f,t,l))&&(t=s),l&&l.destroy&&l.destroy());if(this.__reentrant_call_depth>1)return t;if(e.cleanupAfterLex&&e.cleanupAfterLex(a),f&&(f.lexer=void 0,f.parser=void 0,e.yy===f&&(e.yy=void 0)),f=void 0,this.parseError=this.originalParseError,this.quoteName=this.originalQuoteName,r.length=0,i.length=0,o.length=0,u=0,!a){for(var c=this.__error_infos.length-1;c>=0;c--){var h=this.__error_infos[c];h&&"function"==typeof h.destroy&&h.destroy()}this.__error_infos.length=0}return t},this.constructParseErrorInfo=function(t,n,a,l){var c={errStr:t,exception:n,text:e.match,value:e.yytext,token:this.describeSymbol(s)||s,token_id:s,line:e.yylineno,expected:a,recoverable:l,state:p,action:d,new_state:x,symbol_stack:r,state_stack:i,value_stack:o,stack_pointer:u,yy:f,lexer:e,parser:this,destroy:function(){var t=!!this.recoverable;for(var e in this)this.hasOwnProperty(e)&&"object"==typeof e&&(this[e]=void 0);this.recoverable=t}};return this.__error_infos.push(c),c};var p,d,y,v,g,m,_,x,b=function(){var t=e.lex();return"number"!=typeof t&&(t=n.symbols_[t]||t),t||l},w={$:!0,_$:void 0,yy:f},A=!1;try{if(this.__reentrant_call_depth++,e.setInput(t,f),"function"==typeof e.canIUse)e.canIUse().fastLex&&(b=h);for(o[u]=null,i[u]=0,r[u]=0,++u,this.pre_parse&&this.pre_parse.call(this,f),f.pre_parse&&f.pre_parse.call(this,f),x=i[u-1];;){if(p=x,this.defaultActions[p])d=2,x=this.defaultActions[p];else if(s||(s=b()),v=a[p]&&a[p][s]||c,x=v[1],!(d=v[0])){var O,E=this.describeSymbol(s)||s,M=this.collect_expected_token_set(p);O="number"==typeof e.yylineno?"Parse error on line "+(e.yylineno+1)+": ":"Parse error: ","function"==typeof e.showPosition&&(O+="\n"+e.showPosition(69,10)+"\n"),M.length?O+="Expecting "+M.join(", ")+", got unexpected "+E:O+="Unexpected "+E,g=this.constructParseErrorInfo(O,null,M,!1),void 0!==(y=this.parseError(g.errStr,g,this.JisonParserError))&&(A=y);break}switch(d){default:if(d instanceof Array){g=this.constructParseErrorInfo("Parse Error: multiple actions possible at state: "+p+", token: "+s,null,null,!1),void 0!==(y=this.parseError(g.errStr,g,this.JisonParserError))&&(A=y);break}g=this.constructParseErrorInfo("Parsing halted. No viable error recovery approach available due to internal system failure.",null,null,!1),void 0!==(y=this.parseError(g.errStr,g,this.JisonParserError))&&(A=y);break;case 1:r[u]=s,o[u]=e.yytext,i[u]=x,++u,s=0;continue;case 2:if(m=(_=this.productions_[x-1])[1],void 0!==(y=this.performAction.call(w,x,u-1,o))){A=y;break}u-=m;var S=_[0];r[u]=S,o[u]=w.$,x=a[i[u-1]][S],i[u]=x,++u;continue;case 3:-2!==u&&(A=!0,void 0!==o[--u]&&(A=o[u]))}break}}catch(t){if(t instanceof this.JisonParserError)throw t;if(e&&"function"==typeof e.JisonLexerError&&t instanceof e.JisonLexerError)throw t;g=this.constructParseErrorInfo("Parsing aborted due to exception.",t,null,!1),A=!1,void 0!==(y=this.parseError(g.errStr,g,this.JisonParserError))&&(A=y)}finally{A=this.cleanupAfterParse(A,!0,!0),this.__reentrant_call_depth--}return A}};i.originalParseError=i.parseError,i.originalQuoteName=i.quoteName;var o=function(){function t(t,e){var n;if(Object.defineProperty(this,"name",{enumerable:!1,writable:!1,value:"JisonLexerError"}),null==t&&(t="???"),Object.defineProperty(this,"message",{enumerable:!1,writable:!0,value:t}),this.hash=e,e&&e.exception instanceof Error){var r=e.exception;this.message=r.message||t,n=r.stack}n||(Error.hasOwnProperty("captureStackTrace")?Error.captureStackTrace(this,this.constructor):n=new Error(t).stack),n&&Object.defineProperty(this,"stack",{enumerable:!1,writable:!1,value:n})}return"function"==typeof Object.setPrototypeOf?Object.setPrototypeOf(t.prototype,Error.prototype):t.prototype=Object.create(Error.prototype),t.prototype.constructor=t,t.prototype.name="JisonLexerError",{EOF:1,ERROR:2,__currentRuleSet__:null,__error_infos:[],__decompressed:!1,done:!1,_backtrack:!1,_input:"",_more:!1,_signaled_error_token:!1,conditionStack:[],match:"",matched:"",matches:!1,yytext:"",offset:0,yyleng:0,yylineno:0,yylloc:null,constructLexErrorInfo:function(t,e,n){if(t=""+t,null==n&&(n=!(t.indexOf("\n")>0&&t.indexOf("^")>0)),this.yylloc&&n)if("function"==typeof this.prettyPrintRange){this.prettyPrintRange(this.yylloc);/\n\s*$/.test(t)||(t+="\n"),t+="\n  Erroneous area:\n"+this.prettyPrintRange(this.yylloc)}else if("function"==typeof this.showPosition){var r=this.showPosition();r&&(t.length&&"\n"!==t[t.length-1]&&"\n"!==r[0]?t+="\n"+r:t+=r)}var i={errStr:t,recoverable:!!e,text:this.match,token:null,line:this.yylineno,loc:this.yylloc,yy:this.yy,lexer:this,destroy:function(){var t=!!this.recoverable;for(var e in this)this.hasOwnProperty(e)&&"object"==typeof e&&(this[e]=void 0);this.recoverable=t}};return this.__error_infos.push(i),i},parseError:function(t,e,n){if(n||(n=this.JisonLexerError),this.yy){if(this.yy.parser&&"function"==typeof this.yy.parser.parseError)return this.yy.parser.parseError.call(this,t,e,n)||this.ERROR;if("function"==typeof this.yy.parseError)return this.yy.parseError.call(this,t,e,n)||this.ERROR}throw new n(t,e)},yyerror:function(t){var e="";this.yylloc&&(e=" on line "+(this.yylineno+1));var n=this.constructLexErrorInfo("Lexical error"+e+": "+t,this.options.lexerErrorsAreRecoverable),r=Array.prototype.slice.call(arguments,1);return r.length&&(n.extra_error_attributes=r),this.parseError(n.errStr,n,this.JisonLexerError)||this.ERROR},cleanupAfterLex:function(t){if(this.setInput("",{}),!t){for(var e=this.__error_infos.length-1;e>=0;e--){var n=this.__error_infos[e];n&&"function"==typeof n.destroy&&n.destroy()}this.__error_infos.length=0}return this},clear:function(){this.yytext="",this.yyleng=0,this.match="",this.matches=!1,this._more=!1,this._backtrack=!1;var t=this.yylloc?this.yylloc.last_column:0;this.yylloc={first_line:this.yylineno+1,first_column:t,last_line:this.yylineno+1,last_column:t,range:[this.offset,this.offset]}},setInput:function(t,e){if(this.yy=e||this.yy||{},!this.__decompressed){for(var n=this.rules,r=0,i=n.length;r<i;r++){"number"==typeof(h=n[r])&&(n[r]=n[h])}var o=this.conditions;for(var a in o){var u=o[a],s=u.rules,l=(i=s.length,new Array(i+1)),c=new Array(i+1);for(r=0;r<i;r++){var f=s[r],h=n[f];l[r+1]=h,c[r+1]=f}u.rules=c,u.__rule_regexes=l,u.__rule_count=i}this.__decompressed=!0}return this._input=t||"",this.clear(),this._signaled_error_token=!1,this.done=!1,this.yylineno=0,this.matched="",this.conditionStack=["INITIAL"],this.__currentRuleSet__=null,this.yylloc={first_line:1,first_column:0,last_line:1,last_column:0,range:[0,0]},this.offset=0,this},editRemainingInput:function(t,e){var n=t.call(this,this._input,e);return"string"!=typeof n?n&&(this._input=""+n):this._input=n,this},input:function(){if(!this._input)return null;var t=this._input[0];this.yytext+=t,this.yyleng++,this.offset++,this.match+=t,this.matched+=t;var e=1,n=!1;if("\n"===t)n=!0;else if("\r"===t){n=!0;var r=this._input[1];"\n"===r&&(e++,t+=r,this.yytext+=r,this.yyleng++,this.offset++,this.match+=r,this.matched+=r,this.yylloc.range[1]++)}return n?(this.yylineno++,this.yylloc.last_line++,this.yylloc.last_column=0):this.yylloc.last_column++,this.yylloc.range[1]++,this._input=this._input.slice(e),t},unput:function(t){var e=t.length,n=t.split(/(?:\r\n?|\n)/g);if(this._input=t+this._input,this.yytext=this.yytext.substr(0,this.yytext.length-e),this.yyleng=this.yytext.length,this.offset-=e,this.match=this.match.substr(0,this.match.length-e),this.matched=this.matched.substr(0,this.matched.length-e),n.length>1){this.yylineno-=n.length-1,this.yylloc.last_line=this.yylineno+1;var r=this.match,i=r.split(/(?:\r\n?|\n)/g);1===i.length&&(i=(r=this.matched).split(/(?:\r\n?|\n)/g)),this.yylloc.last_column=i[i.length-1].length}else this.yylloc.last_column-=e;return this.yylloc.range[1]=this.yylloc.range[0]+this.yyleng,this.done=!1,this},more:function(){return this._more=!0,this},reject:function(){if(this.options.backtrack_lexer)this._backtrack=!0;else{var t="";this.yylloc&&(t=" on line "+(this.yylineno+1));var e=this.constructLexErrorInfo("Lexical error"+t+": You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).",!1);this._signaled_error_token=this.parseError(e.errStr,e,this.JisonLexerError)||this.ERROR}return this},less:function(t){return this.unput(this.match.slice(t))},pastInput:function(t,e){var n=this.matched.substring(0,this.matched.length-this.match.length);t<0?t=n.length:t||(t=20),e<0?e=n.length:e||(e=1);var r=(n=n.substr(2*-t-2)).replace(/\r\n|\r/g,"\n").split("\n");return(n=(r=r.slice(-e)).join("\n")).length>t&&(n="..."+n.substr(-t)),n},upcomingInput:function(t,e){var n=this.match;t<0?t=n.length+this._input.length:t||(t=20),e<0?e=t:e||(e=1),n.length<2*t+2&&(n+=this._input.substring(0,2*t+2));var r=n.replace(/\r\n|\r/g,"\n").split("\n");return(n=(r=r.slice(0,e)).join("\n")).length>t&&(n=n.substring(0,t)+"..."),n},showPosition:function(t,e){var n=this.pastInput(t).replace(/\s/g," "),r=new Array(n.length+1).join("-");return n+this.upcomingInput(e).replace(/\s/g," ")+"\n"+r+"^"},deriveLocationInfo:function(t,e,n,r){var i={first_line:1,first_column:0,last_line:1,last_column:0,range:[0,0]};return t&&(i.first_line=0|t.first_line,i.last_line=0|t.last_line,i.first_column=0|t.first_column,i.last_column=0|t.last_column,t.range&&(i.range[0]=0|t.range[0],i.range[1]=0|t.range[1])),(i.first_line<=0||i.last_line<i.first_line)&&(i.first_line<=0&&e&&(i.first_line=0|e.last_line,i.first_column=0|e.last_column,e.range&&(i.range[0]=0|t.range[1])),(i.last_line<=0||i.last_line<i.first_line)&&n&&(i.last_line=0|n.first_line,i.last_column=0|n.first_column,n.range&&(i.range[1]=0|t.range[0])),i.first_line<=0&&r&&(i.last_line<=0||r.last_line<=i.last_line)&&(i.first_line=0|r.first_line,i.first_column=0|r.first_column,r.range&&(i.range[0]=0|r.range[0])),i.last_line<=0&&r&&(i.first_line<=0||r.first_line>=i.first_line)&&(i.last_line=0|r.last_line,i.last_column=0|r.last_column,r.range&&(i.range[1]=0|r.range[1]))),i.last_line<=0&&(i.first_line<=0?(i.first_line=this.yylloc.first_line,i.last_line=this.yylloc.last_line,i.first_column=this.yylloc.first_column,i.last_column=this.yylloc.last_column,i.range[0]=this.yylloc.range[0],i.range[1]=this.yylloc.range[1]):(i.last_line=this.yylloc.last_line,i.last_column=this.yylloc.last_column,i.range[1]=this.yylloc.range[1])),i.first_line<=0&&(i.first_line=i.last_line,i.first_column=0,i.range[1]=i.range[0]),i.first_column<0&&(i.first_column=0),i.last_column<0&&(i.last_column=i.first_column>0?i.first_column:80),i},prettyPrintRange:function(t,e,n){t=this.deriveLocationInfo(t,e,n);var r=(this.matched+this._input).split("\n"),i=Math.max(1,e?e.first_line:t.first_line-3),o=Math.max(1,n?n.last_line:t.last_line+1),a=1+Math.log10(1|o)|0,u=new Array(a).join(" "),s=[],l=r.slice(i-1,o+1).map((function(e,n){var r=n+i,o=(u+r).substr(-a)+": "+e,l=new Array(a+1).join("^"),c=3,f=0;(r===t.first_line?(c+=t.first_column,f=Math.max(2,(r===t.last_line?t.last_column:e.length)-t.first_column+1)):r===t.last_line?f=Math.max(2,t.last_column+1):r>t.first_line&&r<t.last_line&&(f=Math.max(2,e.length+1)),f)&&(o+="\n"+l+new Array(c).join(".")+new Array(f).join("^"),e.trim().length>0&&s.push(n));return o=o.replace(/\t/g," ")}));if(s.length>4){var c=s[1]+1,f=s[s.length-2]-1,h=new Array(a+1).join(" ")+"  (...continued...)";h+="\n"+new Array(a+1).join("-")+"  (---------------)",l.splice(c,f-c+1,h)}return l.join("\n")},describeYYLLOC:function(t,e){var n,r=t.first_line,i=t.last_line,o=t.first_column,a=t.last_column;if(0===i-r?(n="line "+r+", ",n+=a-o<=1?"column "+o:"columns "+o+" .. "+a):n="lines "+r+"(column "+o+") .. "+i+"(column "+a+")",t.range&&e){var u=t.range[0],s=t.range[1]-1;n+=s<=u?" {String Offset: "+u+"}":" {String Offset range: "+u+" .. "+s+"}"}return n},test_match:function(t,e){var n,r,i,o,a;if(this.options.backtrack_lexer&&(i={yylineno:this.yylineno,yylloc:{first_line:this.yylloc.first_line,last_line:this.yylloc.last_line,first_column:this.yylloc.first_column,last_column:this.yylloc.last_column,range:this.yylloc.range.slice(0)},yytext:this.yytext,match:this.match,matches:this.matches,matched:this.matched,yyleng:this.yyleng,offset:this.offset,_more:this._more,_input:this._input,yy:this.yy,conditionStack:this.conditionStack.slice(0),done:this.done}),a=(o=t[0]).length,(r=o.split(/(?:\r\n?|\n)/g)).length>1?(this.yylineno+=r.length-1,this.yylloc.last_line=this.yylineno+1,this.yylloc.last_column=r[r.length-1].length):this.yylloc.last_column+=a,this.yytext+=o,this.match+=o,this.matched+=o,this.matches=t,this.yyleng=this.yytext.length,this.yylloc.range[1]+=a,this.offset+=a,this._more=!1,this._backtrack=!1,this._input=this._input.slice(a),n=this.performAction.call(this,this.yy,e,this.conditionStack[this.conditionStack.length-1]),this.done&&this._input&&(this.done=!1),n)return n;if(this._backtrack){for(var u in i)this[u]=i[u];return this.__currentRuleSet__=null,!1}return!!this._signaled_error_token&&(n=this._signaled_error_token,this._signaled_error_token=!1,n)},next:function(){if(this.done)return this.clear(),this.EOF;var t,e,n,r;this._input||(this.done=!0),this._more||this.clear();var i=this.__currentRuleSet__;if(!(i||(i=this.__currentRuleSet__=this._currentRules())&&i.rules)){var o="";this.options.trackPosition&&(o=" on line "+(this.yylineno+1));var a=this.constructLexErrorInfo("Internal lexer engine error"+o+': The lex grammar programmer pushed a non-existing condition name "'+this.topState()+'"; this is a fatal error and should be reported to the application programmer team!',!1);return this.parseError(a.errStr,a,this.JisonLexerError)||this.ERROR}for(var u=i.rules,s=i.__rule_regexes,l=i.__rule_count,c=1;c<=l;c++)if((n=this._input.match(s[c]))&&(!e||n[0].length>e[0].length)){if(e=n,r=c,this.options.backtrack_lexer){if(!1!==(t=this.test_match(n,u[c])))return t;if(this._backtrack){e=void 0;continue}return!1}if(!this.options.flex)break}if(e)return!1!==(t=this.test_match(e,u[r]))&&t;if(this._input){o="";this.options.trackPosition&&(o=" on line "+(this.yylineno+1));a=this.constructLexErrorInfo("Lexical error"+o+": Unrecognized text.",this.options.lexerErrorsAreRecoverable);var f=this._input,h=this.topState(),p=this.conditionStack.length;return(t=this.parseError(a.errStr,a,this.JisonLexerError)||this.ERROR)===this.ERROR&&(this.matches||f!==this._input||h!==this.topState()||p!==this.conditionStack.length||this.input()),t}return this.done=!0,this.clear(),this.EOF},lex:function(){var t;for("function"==typeof this.pre_lex&&(t=this.pre_lex.call(this,0)),"function"==typeof this.options.pre_lex&&(t=this.options.pre_lex.call(this,t)||t),this.yy&&"function"==typeof this.yy.pre_lex&&(t=this.yy.pre_lex.call(this,t)||t);!t;)t=this.next();return this.yy&&"function"==typeof this.yy.post_lex&&(t=this.yy.post_lex.call(this,t)||t),"function"==typeof this.options.post_lex&&(t=this.options.post_lex.call(this,t)||t),"function"==typeof this.post_lex&&(t=this.post_lex.call(this,t)||t),t},fastLex:function(){for(var t;!t;)t=this.next();return t},canIUse:function(){return{fastLex:!("function"==typeof this.pre_lex||"function"==typeof this.options.pre_lex||this.yy&&"function"==typeof this.yy.pre_lex||this.yy&&"function"==typeof this.yy.post_lex||"function"==typeof this.options.post_lex||"function"==typeof this.post_lex)&&"function"==typeof this.fastLex}},begin:function(t){return this.pushState(t)},pushState:function(t){return this.conditionStack.push(t),this.__currentRuleSet__=null,this},popState:function(){return this.conditionStack.length-1>0?(this.__currentRuleSet__=null,this.conditionStack.pop()):this.conditionStack[0]},topState:function(t){return(t=this.conditionStack.length-1-Math.abs(t||0))>=0?this.conditionStack[t]:"INITIAL"},_currentRules:function(){return this.conditionStack.length&&this.conditionStack[this.conditionStack.length-1]?this.conditions[this.conditionStack[this.conditionStack.length-1]]:this.conditions.INITIAL},stateStackSize:function(){return this.conditionStack.length},options:{trackPosition:!0},JisonLexerError:t,performAction:function(t,e,n){switch(e){case 0:
/*! Conditions:: INITIAL */
/*! Rule::       \s+ */
break;default:return this.simpleCaseActionClusters[e]}},simpleCaseActionClusters:{
/*! Conditions:: INITIAL */
/*! Rule::       \* */
1:5,
/*! Conditions:: INITIAL */
/*! Rule::       \/ */
2:6,
/*! Conditions:: INITIAL */
/*! Rule::       \+ */
3:3,
/*! Conditions:: INITIAL */
/*! Rule::       - */
4:4,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)px\b */
5:13,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)cm\b */
6:13,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)mm\b */
7:13,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)in\b */
8:13,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)pt\b */
9:13,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)pc\b */
10:13,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)deg\b */
11:14,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)grad\b */
12:14,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)rad\b */
13:14,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)turn\b */
14:14,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)s\b */
15:15,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)ms\b */
16:15,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)Hz\b */
17:16,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)kHz\b */
18:16,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)dpi\b */
19:17,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)dpcm\b */
20:17,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)dppx\b */
21:17,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)em\b */
22:18,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)ex\b */
23:19,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)ch\b */
24:20,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)rem\b */
25:21,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)vw\b */
26:23,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)vh\b */
27:22,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)vmin\b */
28:24,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)vmax\b */
29:25,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)% */
30:26,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)\b */
31:11,
/*! Conditions:: INITIAL */
/*! Rule::       (calc) */
32:9,
/*! Conditions:: INITIAL */
/*! Rule::       (var\([^\)]*\)) */
33:12,
/*! Conditions:: INITIAL */
/*! Rule::       ([a-z]+) */
34:10,
/*! Conditions:: INITIAL */
/*! Rule::       \( */
35:7,
/*! Conditions:: INITIAL */
/*! Rule::       \) */
36:8,
/*! Conditions:: INITIAL */
/*! Rule::       $ */
37:1},rules:[/^(?:\s+)/,/^(?:\*)/,/^(?:\/)/,/^(?:\+)/,/^(?:-)/,/^(?:(\d+(\.\d*)?|\.\d+)px\b)/,/^(?:(\d+(\.\d*)?|\.\d+)cm\b)/,/^(?:(\d+(\.\d*)?|\.\d+)mm\b)/,/^(?:(\d+(\.\d*)?|\.\d+)in\b)/,/^(?:(\d+(\.\d*)?|\.\d+)pt\b)/,/^(?:(\d+(\.\d*)?|\.\d+)pc\b)/,/^(?:(\d+(\.\d*)?|\.\d+)deg\b)/,/^(?:(\d+(\.\d*)?|\.\d+)grad\b)/,/^(?:(\d+(\.\d*)?|\.\d+)rad\b)/,/^(?:(\d+(\.\d*)?|\.\d+)turn\b)/,/^(?:(\d+(\.\d*)?|\.\d+)s\b)/,/^(?:(\d+(\.\d*)?|\.\d+)ms\b)/,/^(?:(\d+(\.\d*)?|\.\d+)Hz\b)/,/^(?:(\d+(\.\d*)?|\.\d+)kHz\b)/,/^(?:(\d+(\.\d*)?|\.\d+)dpi\b)/,/^(?:(\d+(\.\d*)?|\.\d+)dpcm\b)/,/^(?:(\d+(\.\d*)?|\.\d+)dppx\b)/,/^(?:(\d+(\.\d*)?|\.\d+)em\b)/,/^(?:(\d+(\.\d*)?|\.\d+)ex\b)/,/^(?:(\d+(\.\d*)?|\.\d+)ch\b)/,/^(?:(\d+(\.\d*)?|\.\d+)rem\b)/,/^(?:(\d+(\.\d*)?|\.\d+)vw\b)/,/^(?:(\d+(\.\d*)?|\.\d+)vh\b)/,/^(?:(\d+(\.\d*)?|\.\d+)vmin\b)/,/^(?:(\d+(\.\d*)?|\.\d+)vmax\b)/,/^(?:(\d+(\.\d*)?|\.\d+)%)/,/^(?:(\d+(\.\d*)?|\.\d+)\b)/,/^(?:(calc))/,/^(?:(var\([^)]*\)))/,/^(?:([a-z]+))/,/^(?:\()/,/^(?:\))/,/^(?:$)/],conditions:{INITIAL:{rules:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37],inclusive:!0}}}}();function a(){this.yy={}}return i.lexer=o,a.prototype=i,i.Parser=a,new a}();e.parser=r,e.Parser=r.Parser,e.parse=function(){return r.parse.apply(r,arguments)}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,i=n(330),o=(r=i)&&r.__esModule?r:{default:r};e.default=function(t,e,n){switch(t.type){case"LengthValue":case"AngleValue":case"TimeValue":case"FrequencyValue":case"ResolutionValue":return function(t,e,n){e.type===t.type&&(e={type:t.type,value:(0,o.default)(e.value,e.unit,t.unit,n),unit:t.unit});return{left:t,right:e}}(t,e,n);default:return{left:t,right:e}}},t.exports=e.default},function(t,e){var n={px:{px:1,cm:96/2.54,mm:96/25.4,in:96,pt:96/72,pc:16},cm:{px:2.54/96,cm:1,mm:.1,in:2.54,pt:2.54/72,pc:2.54/6},mm:{px:25.4/96,cm:10,mm:1,in:25.4,pt:25.4/72,pc:25.4/6},in:{px:1/96,cm:1/2.54,mm:1/25.4,in:1,pt:1/72,pc:1/6},pt:{px:.75,cm:72/2.54,mm:72/25.4,in:72,pt:1,pc:12},pc:{px:6/96,cm:6/2.54,mm:6/25.4,in:6,pt:6/72,pc:1},deg:{deg:1,grad:.9,rad:180/Math.PI,turn:360},grad:{deg:400/360,grad:1,rad:200/Math.PI,turn:400},rad:{deg:Math.PI/180,grad:Math.PI/200,rad:1,turn:2*Math.PI},turn:{deg:1/360,grad:.0025,rad:.5/Math.PI,turn:1},s:{s:1,ms:.001},ms:{s:1e3,ms:1},Hz:{Hz:1,kHz:1e3},kHz:{Hz:.001,kHz:1},dpi:{dpi:1,dpcm:1/2.54,dppx:1/96},dpcm:{dpi:2.54,dpcm:1,dppx:2.54/96},dppx:{dpi:96,dpcm:96/2.54,dppx:1}};t.exports=function(t,e,r,i){if(!n.hasOwnProperty(r))throw new Error("Cannot convert to "+r);if(!n[r].hasOwnProperty(e))throw new Error("Cannot convert from "+e+" to "+r);return i=Math.pow(10,parseInt(i)||5),Math.round(n[r][e]*t*i)/i}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e,n){var a=function t(e,n){switch(e.type){case"MathExpression":var a=e.left,u=e.right,s=e.operator,l="";return"MathExpression"===a.type&&i[s]<i[a.operator]?l+="("+t(a,n)+")":l+=t(a,n),l+=" "+e.operator+" ","MathExpression"===u.type&&i[s]<i[u.operator]?l+="("+t(u,n)+")":"MathExpression"===u.type&&"-"===s&&["+","-"].includes(u.operator)?(u.operator=(0,r.flip)(u.operator),l+=t(u,n)):l+=t(u,n),l;case"Value":return o(e.value,n);case"CssVariable":return e.value;default:return o(e.value,n)+e.unit}}(e,n);return"MathExpression"===e.type&&(a=t+"("+a+")"),a};var r=n(132),i={"*":0,"/":0,"+":1,"-":1};function o(t,e){if(!1!==e){var n=Math.pow(10,e);return Math.round(t*n)/n}return t}t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"getTickValues",{enumerable:!0,get:function(){return r.getTickValues}}),Object.defineProperty(e,"getNiceTickValues",{enumerable:!0,get:function(){return r.getNiceTickValues}}),Object.defineProperty(e,"getTickValuesFixedDomain",{enumerable:!0,get:function(){return r.getTickValuesFixedDomain}});var r=n(333)},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.getTickValuesFixedDomain=e.getTickValues=e.getNiceTickValues=void 0;var r=a(n(133)),i=n(134),o=a(n(334));function a(t){return t&&t.__esModule?t:{default:t}}function u(t){return function(t){if(Array.isArray(t)){for(var e=0,n=new Array(t.length);e<t.length;e++)n[e]=t[e];return n}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function s(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=[],r=!0,i=!1,o=void 0;try{for(var a,u=t[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){i=!0,o=t}finally{try{r||null==u.return||u.return()}finally{if(i)throw o}}return n}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function l(t){var e=s(t,2),n=e[0],r=e[1],i=n,o=r;return n>r&&(i=r,o=n),[i,o]}function c(t,e,n){if(t.lte(0))return new r.default(0);var i=o.default.getDigitCount(t.toNumber()),a=new r.default(10).pow(i),u=t.div(a),s=1!==i?.05:.1,l=new r.default(Math.ceil(u.div(s).toNumber())).add(n).mul(s).mul(a);return e?l:new r.default(Math.ceil(l))}function f(t,e,n){var a=1,u=new r.default(t);if(!u.isint()&&n){var s=Math.abs(t);s<1?(a=new r.default(10).pow(o.default.getDigitCount(t)-1),u=new r.default(Math.floor(u.div(a).toNumber())).mul(a)):s>1&&(u=new r.default(Math.floor(t)))}else 0===t?u=new r.default(Math.floor((e-1)/2)):n||(u=new r.default(Math.floor(t)));var l=Math.floor((e-1)/2);return(0,i.compose)((0,i.map)((function(t){return u.add(new r.default(t-l).mul(a)).toNumber()})),i.range)(0,e)}var h=(0,i.memoize)((function(t){var e=s(t,2),n=e[0],a=e[1],h=arguments.length>1&&void 0!==arguments[1]?arguments[1]:6,p=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],d=Math.max(h,2),y=s(l([n,a]),2),v=y[0],g=y[1];if(v===-1/0||g===1/0){var m=g===1/0?[v].concat(u((0,i.range)(0,h-1).map((function(){return 1/0})))):u((0,i.range)(0,h-1).map((function(){return-1/0}))).concat([g]);return n>a?(0,i.reverse)(m):m}if(v===g)return f(v,h,p);var _=function t(e,n,i,o){var a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0;if(!Number.isFinite((n-e)/(i-1)))return{step:new r.default(0),tickMin:new r.default(0),tickMax:new r.default(0)};var u,s=c(new r.default(n).sub(e).div(i-1),o,a);u=e<=0&&n>=0?new r.default(0):(u=new r.default(e).add(n).div(2)).sub(new r.default(u).mod(s));var l=Math.ceil(u.sub(e).div(s).toNumber()),f=Math.ceil(new r.default(n).sub(u).div(s).toNumber()),h=l+f+1;return h>i?t(e,n,i,o,a+1):(h<i&&(f=n>0?f+(i-h):f,l=n>0?l:l+(i-h)),{step:s,tickMin:u.sub(new r.default(l).mul(s)),tickMax:u.add(new r.default(f).mul(s))})}(v,g,d,p),x=_.step,b=_.tickMin,w=_.tickMax,A=o.default.rangeStep(b,w.add(new r.default(.1).mul(x)),x);return n>a?(0,i.reverse)(A):A}));e.getNiceTickValues=h;var p=(0,i.memoize)((function(t){var e=s(t,2),n=e[0],o=e[1],a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:6,u=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],h=Math.max(a,2),p=s(l([n,o]),2),d=p[0],y=p[1];if(d===-1/0||y===1/0)return[n,o];if(d===y)return f(d,a,u);var v=c(new r.default(y).sub(d).div(h-1),u,0),g=(0,i.compose)((0,i.map)((function(t){return new r.default(d).add(new r.default(t).mul(v)).toNumber()})),i.range)(0,h).filter((function(t){return t>=d&&t<=y}));return n>o?(0,i.reverse)(g):g}));e.getTickValues=p;var d=(0,i.memoize)((function(t,e){var n=s(t,2),a=n[0],f=n[1],h=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],p=s(l([a,f]),2),d=p[0],y=p[1];if(d===-1/0||y===1/0)return[a,f];if(d===y)return[d];var v=Math.max(e,2),g=c(new r.default(y).sub(d).div(v-1),h,0),m=u(o.default.rangeStep(new r.default(d),new r.default(y).sub(new r.default(.99).mul(g)),g)).concat([y]);return a>f?(0,i.reverse)(m):m}));e.getTickValuesFixedDomain=d},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r,i=(r=n(133))&&r.__esModule?r:{default:r},o=n(134);var a={rangeStep:function(t,e,n){for(var r=new i.default(t),o=[];r.lt(e);)o.push(r.toNumber()),r=r.add(n);return o},getDigitCount:function(t){return 0===t?1:Math.floor(new i.default(t).abs().log(10).toNumber())+1},interpolateNumber:(0,o.curry)((function(t,e,n){var r=+t;return r+n*(+e-r)})),uninterpolateNumber:(0,o.curry)((function(t,e,n){var r=e-+t;return(n-t)/(r=r||1/0)})),uninterpolateTruncation:(0,o.curry)((function(t,e,n){var r=e-+t;return r=r||1/0,Math.max(0,Math.min(1,(n-t)/r))}))};e.default=a},function(t,e,n){"use strict";function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var i=this&&this.__rest||function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n},o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e},a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var u=o(n(0)),s=a(n(3)),l=a(n(7)),c=n(31);function f(t){var e,n=t.component,o=i(t,["component"]);return u.isValidElement(n)?e=u.cloneElement(n,o):s.default.isFunction(n)?e=u.createElement(n,o):c.warn(!1,"Customized's props `component` must be React.element or Function, but got %s.",r(n)),u.default.createElement(l.default,{className:"recharts-customized-wrapper"},e)}e.default=f,f.displayName="Customized"},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e};Object.defineProperty(e,"__esModule",{value:!0});var u=a(n(0)),s=n(12),l=n(2),c=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.getPolygonPath=function(t){var e=this.props,n=e.cx,r=e.cy,i=e.polarAngles,o="";return i.forEach((function(e,i){var a=s.polarToCartesian(n,r,t,e);o+=i?"L "+a.x+","+a.y:"M "+a.x+","+a.y})),o+="Z"},e.prototype.renderPolarAngles=function(){var t=this.props,e=t.cx,n=t.cy,r=t.innerRadius,i=t.outerRadius,a=t.polarAngles;if(!a||!a.length)return null;var c=o({stroke:"#ccc"},l.filterProps(this.props));return u.default.createElement("g",{className:"recharts-polar-grid-angle"},a.map((function(t,a){var l=s.polarToCartesian(e,n,r,t),f=s.polarToCartesian(e,n,i,t);return u.default.createElement("line",o({},c,{key:"line-"+a,x1:l.x,y1:l.y,x2:f.x,y2:f.y}))})))},e.prototype.renderConcentricCircle=function(t,e,n){var r=this.props,i=r.cx,a=r.cy,s=o(o(o({stroke:"#ccc"},l.filterProps(this.props)),{fill:"none"}),n);return u.default.createElement("circle",o({},s,{className:"recharts-polar-grid-concentric-circle",key:"circle-"+e,cx:i,cy:a,r:t}))},e.prototype.renderConcentricPolygon=function(t,e,n){var r=o(o(o({stroke:"#ccc"},l.filterProps(this.props)),{fill:"none"}),n);return u.default.createElement("path",o({},r,{className:"recharts-polar-grid-concentric-polygon",key:"path-"+e,d:this.getPolygonPath(t)}))},e.prototype.renderConcentricPath=function(){var t=this,e=this.props,n=e.polarRadius,r=e.gridType;return n&&n.length?u.default.createElement("g",{className:"recharts-polar-grid-concentric"},n.map((function(e,n){return"circle"===r?t.renderConcentricCircle(e,n):t.renderConcentricPolygon(e,n)}))):null},e.prototype.render=function(){return this.props.outerRadius<=0?null:u.default.createElement("g",{className:"recharts-polar-grid"},this.renderPolarAngles(),this.renderConcentricPath())},e.displayName="PolarGrid",e.defaultProps={cx:0,cy:0,innerRadius:0,outerRadius:0,gridType:"polygon"},e}(u.PureComponent);e.default=c},function(t,e,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)};Object.defineProperty(e,"__esModule",{value:!0});var i=["Webkit","Moz","O","ms"];e.generatePrefixStyle=function(t,e){if(!t)return null;var n=t.replace(/(\w)/,(function(t){return t.toUpperCase()})),o=i.reduce((function(t,i){var o;return r(r({},t),((o={})[i+n]=e,o))}),{});return o[t]=e,o}},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__rest||function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n},u=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e},s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var l=u(n(0)),c=s(n(3)),f=n(5),h=n(2),p=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.renderLineItem=function(t,e){var n;if(l.default.isValidElement(t))n=l.default.cloneElement(t,e);else if(c.default.isFunction(t))n=t(e);else{var r=e.x1,i=e.y1,u=e.x2,s=e.y2,f=e.key,p=a(e,["x1","y1","x2","y2","key"]);n=l.default.createElement("line",o({},h.filterProps(p),{x1:r,y1:i,x2:u,y2:s,fill:"none",key:f}))}return n},e.prototype.renderHorizontal=function(t){var n=this,r=this.props,i=r.x,a=r.width,u=r.horizontal;if(!t||!t.length)return null;var s=t.map((function(t,r){var s=o(o({},n.props),{x1:i,y1:t,x2:i+a,y2:t,key:"line-"+r,index:r});return e.renderLineItem(u,s)}));return l.default.createElement("g",{className:"recharts-cartesian-grid-horizontal"},s)},e.prototype.renderVertical=function(t){var n=this,r=this.props,i=r.y,a=r.height,u=r.vertical;if(!t||!t.length)return null;var s=t.map((function(t,r){var s=o(o({},n.props),{x1:t,y1:i,x2:t,y2:i+a,key:"line-"+r,index:r});return e.renderLineItem(u,s)}));return l.default.createElement("g",{className:"recharts-cartesian-grid-vertical"},s)},e.prototype.renderVerticalStripes=function(t){var e=this.props.verticalFill;if(!e||!e.length)return null;var n=this.props,r=n.fillOpacity,i=n.x,o=n.y,a=n.width,u=n.height,s=t.slice().sort((function(t,e){return t-e}));i!==s[0]&&s.unshift(0);var c=s.map((function(t,n){var c=s[n+1]?s[n+1]-t:i+a-t;if(c<=0)return null;var f=n%e.length;return l.default.createElement("rect",{key:"react-"+n,x:Math.round(t+i-i),y:o,width:c,height:u,stroke:"none",fill:e[f],fillOpacity:r,className:"recharts-cartesian-grid-bg"})}));return l.default.createElement("g",{className:"recharts-cartesian-gridstripes-vertical"},c)},e.prototype.renderHorizontalStripes=function(t){var e=this.props.horizontalFill;if(!e||!e.length)return null;var n=this.props,r=n.fillOpacity,i=n.x,o=n.y,a=n.width,u=n.height,s=t.slice().sort((function(t,e){return t-e}));o!==s[0]&&s.unshift(0);var c=s.map((function(t,n){var c=s[n+1]?s[n+1]-t:o+u-t;if(c<=0)return null;var f=n%e.length;return l.default.createElement("rect",{key:"react-"+n,y:Math.round(t+o-o),x:i,height:c,width:a,stroke:"none",fill:e[f],fillOpacity:r,className:"recharts-cartesian-grid-bg"})}));return l.default.createElement("g",{className:"recharts-cartesian-gridstripes-horizontal"},c)},e.prototype.renderBackground=function(){var t=this.props.fill;if(!t||"none"===t)return null;var e=this.props,n=e.fillOpacity,r=e.x,i=e.y,o=e.width,a=e.height;return l.default.createElement("rect",{x:r,y:i,width:o,height:a,stroke:"none",fill:t,fillOpacity:n,className:"recharts-cartesian-grid-bg"})},e.prototype.render=function(){var t=this.props,e=t.x,n=t.y,r=t.width,i=t.height,o=t.horizontal,a=t.vertical,u=t.horizontalCoordinatesGenerator,s=t.verticalCoordinatesGenerator,h=t.xAxis,p=t.yAxis,d=t.offset,y=t.chartWidth,v=t.chartHeight;if(!f.isNumber(r)||r<=0||!f.isNumber(i)||i<=0||!f.isNumber(e)||e!==+e||!f.isNumber(n)||n!==+n)return null;var g=this.props,m=g.horizontalPoints,_=g.verticalPoints;return m&&m.length||!c.default.isFunction(u)||(m=u({yAxis:p,width:y,height:v,offset:d})),_&&_.length||!c.default.isFunction(s)||(_=s({xAxis:h,width:y,height:v,offset:d})),l.default.createElement("g",{className:"recharts-cartesian-grid"},this.renderBackground(),o&&this.renderHorizontal(m),a&&this.renderVertical(_),o&&this.renderHorizontalStripes(m),a&&this.renderVerticalStripes(_))},e.displayName="CartesianGrid",e.defaultProps={horizontal:!0,vertical:!0,horizontalPoints:[],verticalPoints:[],stroke:"#ccc",fill:"none",verticalFill:[],horizontalFill:[]},e}(l.PureComponent);e.default=p},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var i=r(n(18)),o=r(n(88)),a=r(n(35)),u=r(n(36)),s=n(21);e.default=i.default({chartName:"LineChart",GraphicalChild:o.default,axisComponents:[{axisType:"xAxis",AxisComp:a.default},{axisType:"yAxis",AxisComp:u.default}],formatAxisMap:s.formatAxisMap})},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var i=r(n(141)),o=r(n(140)),a=r(n(142)),u=n(57),s=n(8),l=n(5);e.detectReferenceElementsDomain=function(t,e,n,r,c){var f=s.findAllByType(t,o.default.displayName),h=s.findAllByType(t,i.default.displayName),p=f.concat(h),d=s.findAllByType(t,a.default.displayName),y=r+"Id",v=r[0],g=e;if(p.length&&(g=p.reduce((function(t,e){if(e.props[y]===n&&u.ifOverflowMatches(e.props,"extendDomain")&&l.isNumber(e.props[v])){var r=e.props[v];return[Math.min(t[0],r),Math.max(t[1],r)]}return t}),g)),d.length){var m=v+"1",_=v+"2";g=d.reduce((function(t,e){if(e.props[y]===n&&u.ifOverflowMatches(e.props,"extendDomain")&&l.isNumber(e.props[m])&&l.isNumber(e.props[_])){var r=e.props[m],i=e.props[_];return[Math.min(t[0],r,i),Math.max(t[1],r,i)]}return t}),g)}return c&&c.length&&(g=c.reduce((function(t,e){return l.isNumber(e)?[Math.min(t[0],e),Math.max(t[1],e)]:t}),g)),g}},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var i=new(r(n(342)).default);e.eventCenter=i,i.setMaxListeners&&i.setMaxListeners(10),e.SYNC_EVENT="recharts.syncMouseEvents"},function(t,e,n){"use strict";var r,i="object"==typeof Reflect?Reflect:null,o=i&&"function"==typeof i.apply?i.apply:function(t,e,n){return Function.prototype.apply.call(t,e,n)};r=i&&"function"==typeof i.ownKeys?i.ownKeys:Object.getOwnPropertySymbols?function(t){return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t))}:function(t){return Object.getOwnPropertyNames(t)};var a=Number.isNaN||function(t){return t!=t};function u(){u.init.call(this)}t.exports=u,u.EventEmitter=u,u.prototype._events=void 0,u.prototype._eventsCount=0,u.prototype._maxListeners=void 0;var s=10;function l(t){return void 0===t._maxListeners?u.defaultMaxListeners:t._maxListeners}function c(t,e,n,r){var i,o,a,u;if("function"!=typeof n)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof n);if(void 0===(o=t._events)?(o=t._events=Object.create(null),t._eventsCount=0):(void 0!==o.newListener&&(t.emit("newListener",e,n.listener?n.listener:n),o=t._events),a=o[e]),void 0===a)a=o[e]=n,++t._eventsCount;else if("function"==typeof a?a=o[e]=r?[n,a]:[a,n]:r?a.unshift(n):a.push(n),(i=l(t))>0&&a.length>i&&!a.warned){a.warned=!0;var s=new Error("Possible EventEmitter memory leak detected. "+a.length+" "+String(e)+" listeners added. Use emitter.setMaxListeners() to increase limit");s.name="MaxListenersExceededWarning",s.emitter=t,s.type=e,s.count=a.length,u=s,console&&console.warn&&console.warn(u)}return t}function f(){for(var t=[],e=0;e<arguments.length;e++)t.push(arguments[e]);this.fired||(this.target.removeListener(this.type,this.wrapFn),this.fired=!0,o(this.listener,this.target,t))}function h(t,e,n){var r={fired:!1,wrapFn:void 0,target:t,type:e,listener:n},i=f.bind(r);return i.listener=n,r.wrapFn=i,i}function p(t,e,n){var r=t._events;if(void 0===r)return[];var i=r[e];return void 0===i?[]:"function"==typeof i?n?[i.listener||i]:[i]:n?function(t){for(var e=new Array(t.length),n=0;n<e.length;++n)e[n]=t[n].listener||t[n];return e}(i):y(i,i.length)}function d(t){var e=this._events;if(void 0!==e){var n=e[t];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function y(t,e){for(var n=new Array(e),r=0;r<e;++r)n[r]=t[r];return n}Object.defineProperty(u,"defaultMaxListeners",{enumerable:!0,get:function(){return s},set:function(t){if("number"!=typeof t||t<0||a(t))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+t+".");s=t}}),u.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},u.prototype.setMaxListeners=function(t){if("number"!=typeof t||t<0||a(t))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+t+".");return this._maxListeners=t,this},u.prototype.getMaxListeners=function(){return l(this)},u.prototype.emit=function(t){for(var e=[],n=1;n<arguments.length;n++)e.push(arguments[n]);var r="error"===t,i=this._events;if(void 0!==i)r=r&&void 0===i.error;else if(!r)return!1;if(r){var a;if(e.length>0&&(a=e[0]),a instanceof Error)throw a;var u=new Error("Unhandled error."+(a?" ("+a.message+")":""));throw u.context=a,u}var s=i[t];if(void 0===s)return!1;if("function"==typeof s)o(s,this,e);else{var l=s.length,c=y(s,l);for(n=0;n<l;++n)o(c[n],this,e)}return!0},u.prototype.addListener=function(t,e){return c(this,t,e,!1)},u.prototype.on=u.prototype.addListener,u.prototype.prependListener=function(t,e){return c(this,t,e,!0)},u.prototype.once=function(t,e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e);return this.on(t,h(this,t,e)),this},u.prototype.prependOnceListener=function(t,e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e);return this.prependListener(t,h(this,t,e)),this},u.prototype.removeListener=function(t,e){var n,r,i,o,a;if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e);if(void 0===(r=this._events))return this;if(void 0===(n=r[t]))return this;if(n===e||n.listener===e)0==--this._eventsCount?this._events=Object.create(null):(delete r[t],r.removeListener&&this.emit("removeListener",t,n.listener||e));else if("function"!=typeof n){for(i=-1,o=n.length-1;o>=0;o--)if(n[o]===e||n[o].listener===e){a=n[o].listener,i=o;break}if(i<0)return this;0===i?n.shift():function(t,e){for(;e+1<t.length;e++)t[e]=t[e+1];t.pop()}(n,i),1===n.length&&(r[t]=n[0]),void 0!==r.removeListener&&this.emit("removeListener",t,a||e)}return this},u.prototype.off=u.prototype.removeListener,u.prototype.removeAllListeners=function(t){var e,n,r;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[t]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[t]),this;if(0===arguments.length){var i,o=Object.keys(n);for(r=0;r<o.length;++r)"removeListener"!==(i=o[r])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(e=n[t]))this.removeListener(t,e);else if(void 0!==e)for(r=e.length-1;r>=0;r--)this.removeListener(t,e[r]);return this},u.prototype.listeners=function(t){return p(this,t,!0)},u.prototype.rawListeners=function(t){return p(this,t,!1)},u.listenerCount=function(t,e){return"function"==typeof t.listenerCount?t.listenerCount(e):d.call(t,e)},u.prototype.listenerCount=d,u.prototype.eventNames=function(){return this._eventsCount>0?r(this._events):[]}},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var i=r(n(18)),o=r(n(90)),a=r(n(35)),u=r(n(36)),s=n(21);e.default=i.default({chartName:"BarChart",GraphicalChild:o.default,axisComponents:[{axisType:"xAxis",AxisComp:a.default},{axisType:"yAxis",AxisComp:u.default}],formatAxisMap:s.formatAxisMap})},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var i=r(n(18)),o=r(n(56)),a=r(n(55)),u=n(12),s=r(n(136));e.default=i.default({chartName:"PieChart",GraphicalChild:s.default,eventType:"item",legendContent:"children",axisComponents:[{axisType:"angleAxis",AxisComp:o.default},{axisType:"radiusAxis",AxisComp:a.default}],formatAxisMap:u.formatAxisMap,defaultProps:{layout:"centric",startAngle:0,endAngle:360,cx:"50%",cy:"50%",innerRadius:0,outerRadius:"80%"}})},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__rest||function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n},u=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e},s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var l=u(n(0)),c=s(n(11)),f=s(n(4)),h=s(n(3)),p=s(n(39)),d=s(n(7)),y=s(n(34)),v=n(8),g=s(n(44)),m=s(n(54)),_=n(9),x=n(346),b=n(52),w=n(5),A=n(2),O=function t(e){var n,r=e.depth,i=e.node,a=e.index,u=e.valueKey,s=i.children,l=r+1,c=s&&s.length?s.map((function(e,n){return t({depth:l,node:e,index:n,valueKey:u})})):null;return n=s&&s.length?c.reduce((function(t,e){return t+e.value}),0):h.default.isNaN(i[u])||i[u]<=0?0:i[u],o(o({},i),{children:c,value:n,depth:r,index:a})},E=function(t,e,n){var r=e*e,i=t.area*t.area,o=t.reduce((function(t,e){return{min:Math.min(t.min,e.area),max:Math.max(t.max,e.area)}}),{min:1/0,max:0}),a=o.min,u=o.max;return i?Math.max(r*u*n/i,i/(r*a*n)):1/0},M=function(t,e,n,r){return e===n.width?function(t,e,n,r){var i=e?Math.round(t.area/e):0;(r||i>n.height)&&(i=n.height);for(var a,u=n.x,s=0,l=t.length;s<l;s++)(a=t[s]).x=u,a.y=n.y,a.height=i,a.width=Math.min(i?Math.round(a.area/i):0,n.x+n.width-u),u+=a.width;return a.z=!0,a.width+=n.x+n.width-u,o(o({},n),{y:n.y+i,height:n.height-i})}(t,e,n,r):function(t,e,n,r){var i=e?Math.round(t.area/e):0;(r||i>n.width)&&(i=n.width);for(var a,u=n.y,s=0,l=t.length;s<l;s++)(a=t[s]).x=n.x,a.y=u,a.width=i,a.height=Math.min(i?Math.round(a.area/i):0,n.y+n.height-u),u+=a.height;return a&&(a.z=!1,a.height+=n.y+n.height-u),o(o({},n),{x:n.x+i,width:n.width-i})}(t,e,n,r)},S=function t(e,n){var r=e.children;if(r&&r.length){var i=function(t){return{x:t.x,y:t.y,width:t.width,height:t.height}}(e),a=[],u=1/0,s=void 0,l=void 0,c=Math.min(i.width,i.height),f=function(t,e){var n=e<0?0:e;return t.map((function(t){var e=t.value*n;return o(o({},t),{area:h.default.isNaN(e)||e<=0?0:e})}))}(r,i.width*i.height/e.value),p=f.slice();for(a.area=0;p.length>0;)a.push(s=p[0]),a.area+=s.area,(l=E(a,c,n))<=u?(p.shift(),u=l):(a.area-=a.pop().area,i=M(a,c,i,!1),c=Math.min(i.width,i.height),a.length=a.area=0,u=1/0);return a.length&&(i=M(a,c,i,!0),a.length=a.area=0),o(o({},e),{children:f.map((function(e){return t(e,n)}))})}return e},k={isTooltipActive:!1,isAnimationFinished:!1,activeNode:null,formatRoot:null,currentRoot:null,nestIndex:[]},P=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.state=o({},k),e.handleAnimationEnd=function(){var t=e.props.onAnimationEnd;e.setState({isAnimationFinished:!0}),h.default.isFunction(t)&&t()},e.handleAnimationStart=function(){var t=e.props.onAnimationStart;e.setState({isAnimationFinished:!1}),h.default.isFunction(t)&&t()},e}return i(e,t),e.prototype.componentDidMount=function(){var t=this.props,e=t.type,n=t.width,r=t.height,i=t.data,o=t.dataKey,a=t.aspectRatio,u=this.computeRoot({type:e,width:n,height:r,data:i,dataKey:o,aspectRatio:a}),s=u.formatRoot,l=u.currentRoot,c=u.nestIndex;this.setState({formatRoot:s,currentRoot:l,nestIndex:c})},e.prototype.computeRoot=function(t){var e=t.type,n=t.width,r=t.height,i=t.data,o=t.dataKey,a=t.aspectRatio,u=O({depth:0,node:{children:i,x:0,y:0,width:n,height:r},index:0,valueKey:o}),s=S(u,a),l=this.state.nestIndex;return"nest"===e&&l.push(u),{formatRoot:s,currentRoot:u,nestIndex:l}},e.prototype.UNSAFE_componentWillReceiveProps=function(t){var e=t.type,n=t.width,r=t.height,i=t.data,a=t.dataKey,u=t.aspectRatio;if(i!==this.props.data||e!==this.props.type||n!==this.props.width||r!==this.props.height||a!==this.props.dataKey||u!==this.props.aspectRatio){var s=this.computeRoot({type:e,width:n,height:r,data:i,dataKey:a,aspectRatio:u});this.setState(o(o(o({},k),s),{nestIndex:[s.currentRoot]}))}},e.prototype.handleMouseEnter=function(t,e){var n=this.props,r=n.onMouseEnter,i=n.children;v.findChildByType(i,g.default.displayName)?this.setState({isTooltipActive:!0,activeNode:t},(function(){r&&r(t,e)})):r&&r(t,e)},e.prototype.handleMouseLeave=function(t,e){var n=this.props,r=n.onMouseLeave,i=n.children;v.findChildByType(i,g.default.displayName)?this.setState({isTooltipActive:!1,activeNode:null},(function(){r&&r(t,e)})):r&&r(t,e)},e.prototype.handleClick=function(t){var e=this.props,n=e.onClick;if("nest"===e.type&&t.children){var r=this.props,i=r.width,a=r.height,u=r.dataKey,s=r.aspectRatio,l=O({depth:0,node:o(o({},t),{x:0,y:0,width:i,height:a}),index:0,valueKey:u}),c=S(l,s),f=this.state.nestIndex;f.push(t),this.setState({formatRoot:c,currentRoot:l,nestIndex:f})}n&&n(t)},e.prototype.handleNestIndex=function(t,e){var n=this.state.nestIndex,r=this.props,i=r.width,a=r.height,u=r.dataKey,s=r.aspectRatio,l=O({depth:0,node:o(o({},t),{x:0,y:0,width:i,height:a}),index:0,valueKey:u}),c=S(l,s);n=n.slice(0,e+1),this.setState({formatRoot:c,currentRoot:t,nestIndex:n})},e.prototype.renderItem=function(t,e,n){var r=this,i=this.props,a=i.isAnimationActive,u=i.animationBegin,s=i.animationDuration,f=i.animationEasing,h=i.isUpdateAnimationActive,p=i.type,y=i.animationId,v=i.colorPanel,g=this.state.isAnimationFinished,m=e.width,_=e.height,x=e.x,b=e.y,w=e.depth,A=parseInt(""+(2*Math.random()-1)*m,10),O={};return(n||"nest"===p)&&(O={onMouseEnter:this.handleMouseEnter.bind(this,e),onMouseLeave:this.handleMouseLeave.bind(this,e),onClick:this.handleClick.bind(this,e)}),a?l.default.createElement(c.default,{begin:u,duration:s,isActive:a,easing:f,key:"treemap-"+y,from:{x:x,y:b,width:m,height:_},to:{x:x,y:b,width:m,height:_},onAnimationStart:this.handleAnimationStart,onAnimationEnd:this.handleAnimationEnd},(function(n){var i=n.x,y=n.y,m=n.width,_=n.height;return l.default.createElement(c.default,{from:"translate("+A+"px, "+A+"px)",to:"translate(0, 0)",attributeName:"transform",begin:u,easing:f,isActive:a,duration:s},l.default.createElement(d.default,o({},O),w>2&&!g?null:r.constructor.renderContentItem(t,o(o({},e),{isAnimationActive:a,isUpdateAnimationActive:!h,width:m,height:_,x:i,y:y}),p,v)))})):l.default.createElement(d.default,o({},O),this.constructor.renderContentItem(t,o(o({},e),{isAnimationActive:!1,isUpdateAnimationActive:!1,width:m,height:_,x:x,y:b}),p,v))},e.renderContentItem=function(t,e,n,r){if(l.default.isValidElement(t))return l.default.cloneElement(t,e);if(h.default.isFunction(t))return t(e);var i=e.x,a=e.y,u=e.width,s=e.height,c=e.index,f=null;u>10&&s>10&&e.children&&"nest"===n&&(f=l.default.createElement(m.default,{points:[{x:i+2,y:a+s/2},{x:i+6,y:a+s/2+3},{x:i+2,y:a+s/2+6}]}));var p=null,d=b.getStringSize(e.name);u>20&&s>20&&d.width<u&&d.height<s&&(p=l.default.createElement("text",{x:i+8,y:a+s/2+7,fontSize:14},e.name));var v=r||x.COLOR_PANEL;return l.default.createElement("g",null,l.default.createElement(y.default,o({fill:e.depth<2?v[c%v.length]:"rgba(255,255,255,0)",stroke:"#fff"},h.default.omit(e,"children"))),f,p)},e.prototype.renderNode=function(t,e,n){var r=this,i=this.props,a=i.content,u=i.type,s=o(o(o({},A.filterProps(this.props)),e),{root:t}),c=!e.children||!e.children.length;return!(this.state.currentRoot.children||[]).filter((function(t){return t.depth===e.depth&&t.name===e.name})).length&&t.depth&&"nest"===u?null:l.default.createElement(d.default,{key:"recharts-treemap-node-"+n,className:"recharts-treemap-depth-"+e.depth},this.renderItem(a,s,c),e.children&&e.children.length?e.children.map((function(t,n){return r.renderNode(e,t,n)})):null)},e.prototype.renderAllNodes=function(){var t=this.state.formatRoot;return t?this.renderNode(t,t,0):null},e.prototype.renderTooltip=function(){var t=this.props,e=t.children,n=t.nameKey,r=v.findChildByType(e,g.default.displayName);if(!r)return null;var i=this.props,o=i.width,a=i.height,u=i.dataKey,s=this.state,c=s.isTooltipActive,f=s.activeNode,h={x:0,y:0,width:o,height:a},p=f?{x:f.x+f.width/2,y:f.y+f.height/2}:null,d=c&&f?[{payload:f,name:_.getValueByDataKey(f,n,""),value:_.getValueByDataKey(f,u)}]:[];return l.default.cloneElement(r,{viewBox:h,active:c,coordinate:p,label:"",payload:d})},e.prototype.renderNestIndex=function(){var t=this,e=this.props,n=e.nameKey,r=e.nestIndexContent,i=this.state.nestIndex;return l.default.createElement("div",{className:"recharts-treemap-nest-index-wrapper",style:{marginTop:"8px",textAlign:"center"}},i.map((function(e,i){var o=h.default.get(e,n,"root"),a=null;return l.default.isValidElement(r)&&(a=l.default.cloneElement(r,e,i)),a=h.default.isFunction(r)?r(e,i):o,l.default.createElement("div",{onClick:t.handleNestIndex.bind(t,e,i),key:"nest-index-"+w.uniqueId(),className:"recharts-treemap-nest-index-box",style:{cursor:"pointer",display:"inline-block",padding:"0 7px",background:"#000",color:"#fff",marginRight:"3px"}},a)})))},e.prototype.render=function(){if(!v.validateWidthHeight(this))return null;var t=this.props,e=t.width,n=t.height,r=t.className,i=t.style,u=t.children,s=t.type,c=a(t,["width","height","className","style","children","type"]),h=A.filterProps(c);return l.default.createElement("div",{className:f.default("recharts-wrapper",r),style:o(o({},i),{position:"relative",cursor:"default",width:e,height:n})},l.default.createElement(p.default,o({},h,{width:e,height:"nest"===s?n-30:n}),this.renderAllNodes(),v.filterSvgElements(u)),this.renderTooltip(),"nest"===s&&this.renderNestIndex())},e.displayName="Treemap",e.defaultProps={aspectRatio:.5*(1+Math.sqrt(5)),dataKey:"value",type:"flat",isAnimationActive:!v.isSsr(),isUpdateAnimationActive:!v.isSsr(),animationBegin:0,animationDuration:1500,animationEasing:"linear"},e}(l.PureComponent);e.default=P},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.COLOR_PANEL=["#1890FF","#66B5FF","#41D9C7","#2FC25B","#6EDB8F","#9AE65C","#FACC14","#E6965C","#57AD71","#223273","#738AE6","#7564CC","#8543E0","#A877ED","#5C8EE6","#13C2C2","#70E0E0","#5CA3E6","#3436C7","#8082FF","#DD81E6","#F04864","#FA7D92","#D598D9"]},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__rest||function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n},u=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e},s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var l=u(n(0)),c=s(n(4)),f=s(n(3)),h=s(n(39)),p=s(n(7)),d=s(n(44)),y=s(n(34)),v=n(51),g=n(8),m=n(9),_=n(2),x={x:0,y:0},b=function(t){return t.y+t.dy/2},w=function(t){return t&&t.value||0},A=function(t,e){return e.reduce((function(e,n){return e+w(t[n])}),0)},O=function(t,e,n){return n.reduce((function(n,r){var i=e[r],o=t[i.source];return n+b(o)*w(e[r])}),0)},E=function(t,e,n){return n.reduce((function(n,r){var i=e[r],o=t[i.target];return n+b(o)*w(e[r])}),0)},M=function(t,e){return t.y-e.y},S=function t(e,n){for(var r=n.targetNodes,i=0,o=r.length;i<o;i++){var a=e[r[i]];a&&(a.depth=Math.max(n.depth+1,a.depth),t(e,a))}},k=function(t,e,n){for(var r=0,i=t.length;r<i;r++){var o=t[r],a=o.length;o.sort(M);for(var u=0,s=0;s<a;s++){(c=u-(l=o[s]).y)>0&&(l.y+=c),u=l.y+l.dy+n}u=e+n;for(s=a-1;s>=0;s--){var l,c;if(!((c=(l=o[s]).y+l.dy+n-u)>0))break;l.y-=c,u=l.y}}},P=function(t,e,n,r){for(var i=0,o=e.length;i<o;i++)for(var a=e[i],u=0,s=a.length;u<s;u++){var l=a[u];if(l.sourceLinks.length){var c=A(n,l.sourceLinks),f=O(t,n,l.sourceLinks)/c;l.y+=(f-b(l))*r}}},N=function(t,e,n,r){for(var i=e.length-1;i>=0;i--)for(var o=e[i],a=0,u=o.length;a<u;a++){var s=o[a];if(s.targetLinks.length){var l=A(n,s.targetLinks),c=E(t,n,s.targetLinks)/l;s.y+=(c-b(s))*r}}},C=function(t){var e=t.data,n=t.width,r=t.height,i=t.iterations,a=t.nodeWidth,u=t.nodePadding,s=e.links,l=function(t,e,n){for(var r=t.nodes,i=t.links,a=r.map((function(t,e){var n=function(t,e){for(var n=[],r=[],i=[],o=[],a=0,u=t.length;a<u;a++){var s=t[a];s.source===e&&(i.push(s.target),o.push(a)),s.target===e&&(n.push(s.source),r.push(a))}return{sourceNodes:n,sourceLinks:r,targetLinks:o,targetNodes:i}}(i,e);return o(o(o({},t),n),{value:Math.max(A(i,n.sourceLinks),A(i,n.targetLinks)),depth:0})})),u=0,s=a.length;u<s;u++){(h=a[u]).sourceNodes.length||S(a,h)}var l=f.default.maxBy(a,(function(t){return t.depth})).depth;if(l>=1){var c=(e-n)/l;for(u=0,s=a.length;u<s;u++){var h;(h=a[u]).targetNodes.length||(h.depth=l),h.x=h.depth*c,h.dx=n}}return{tree:a,maxDepth:l}}(e,n,a).tree,c=function(t){for(var e=[],n=0,r=t.length;n<r;n++){var i=t[n];e[i.depth]||(e[i.depth]=[]),e[i.depth].push(i)}return e}(l),h=function(t,e,n,r){for(var i=f.default.min(t.map((function(t){return(e-(t.length-1)*n)/f.default.sumBy(t,w)}))),a=0,u=t.length;a<u;a++)for(var s=0,l=t[a].length;s<l;s++){var c=t[a][s];c.y=s,c.dy=c.value*i}return r.map((function(t){return o(o({},t),{dy:w(t)*i})}))}(c,r,u,s);k(c,r,u);for(var p=1,d=1;d<=i;d++)N(l,c,h,p*=.99),k(c,r,u),P(l,c,h,p),k(c,r,u);return function(t,e){for(var n=0,r=t.length;n<r;n++){var i=t[n],o=0,a=0;i.targetLinks.sort((function(n,r){return t[e[n].target].y-t[e[r].target].y})),i.sourceLinks.sort((function(n,r){return t[e[n].source].y-t[e[r].source].y}));for(var u=0,s=i.targetLinks.length;u<s;u++){(c=e[i.targetLinks[u]])&&(c.sy=o,o+=c.dy)}u=0;for(var l=i.sourceLinks.length;u<l;u++){var c;(c=e[i.sourceLinks[u]])&&(c.ty=a,a+=c.dy)}}}(l,h),{nodes:l,links:h}},T=function(t){function e(e){var n=t.call(this,e)||this;return n.state={activeElement:null,activeElementType:null,isTooltipActive:!1,nodes:[],links:[]},n.state=n.constructor.createDefaultState(e),n}return i(e,t),e.prototype.UNSAFE_componentWillReceiveProps=function(t){var e=this.props,n=e.data,r=e.width,i=e.height,o=e.margin,a=e.iterations,u=e.nodeWidth,s=e.nodePadding,l=e.nameKey;t.data===n&&t.width===r&&t.height===i&&v.shallowEqual(t.margin,o)&&t.iterations===a&&t.nodeWidth===u&&t.nodePadding===s&&t.nameKey===l||this.setState(this.constructor.createDefaultState(t))},e.createDefaultState=function(t){var e=t.data,n=t.width,r=t.height,i=t.margin,o=t.iterations,a=t.nodeWidth,u=t.nodePadding,s=n-(i&&i.left||0)-(i&&i.right||0),l=r-(i&&i.top||0)-(i&&i.bottom||0),c=C({data:e,width:s,height:l,iterations:o,nodeWidth:a,nodePadding:u}),f=c.links;return{activeElement:null,activeElementType:null,isTooltipActive:!1,nodes:c.nodes,links:f}},e.prototype.handleMouseEnter=function(t,e,n){var r=this.props,i=r.onMouseEnter,o=r.children;g.findChildByType(o,d.default.displayName)?this.setState({activeElement:t,activeElementType:e,isTooltipActive:!0},(function(){i&&i(t,e,n)})):i&&i(t,e,n)},e.prototype.handleMouseLeave=function(t,e,n){var r=this.props,i=r.onMouseLeave,o=r.children;g.findChildByType(o,d.default.displayName)?this.setState({isTooltipActive:!1},(function(){i&&i(t,e,n)})):i&&i(t,e,n)},e.prototype.handleClick=function(t,e,n){var r=this.props.onClick;r&&r(t,e,n)},e.renderLinkItem=function(t,e){if(l.default.isValidElement(t))return l.default.cloneElement(t,e);if(f.default.isFunction(t))return t(e);var n=e.sourceX,r=e.sourceY,i=e.sourceControlX,u=e.targetX,s=e.targetY,c=e.targetControlX,h=e.linkWidth,p=a(e,["sourceX","sourceY","sourceControlX","targetX","targetY","targetControlX","linkWidth"]);return l.default.createElement("path",o({className:"recharts-sankey-link",d:"\n          M"+n+","+r+"\n          C"+i+","+r+" "+c+","+s+" "+u+","+s+"\n        ",fill:"none",stroke:"#333",strokeWidth:h,strokeOpacity:"0.2"},_.filterProps(p)))},e.prototype.renderLinks=function(t,e){var n=this,r=this.props,i=r.linkCurvature,a=r.link,u=r.margin,s=f.default.get(u,"top")||0,c=f.default.get(u,"left")||0;return l.default.createElement(p.default,{className:"recharts-sankey-links",key:"recharts-sankey-links"},t.map((function(t,r){var u,f,h=t.sy,d=t.ty,y=t.dy,v=e[t.source],g=e[t.target],m=v.x+v.dx+c,x=g.x+c,b=(f=x-(u=+m),function(t){return u+f*t}),w=b(i),A=b(1-i),O=v.y+h+y/2+s,E=g.y+d+y/2+s,M=o({sourceX:m,targetX:x,sourceY:O,targetY:E,sourceControlX:w,targetControlX:A,sourceRelativeY:h,targetRelativeY:d,linkWidth:y,index:r,payload:o(o({},t),{source:v,target:g})},_.filterProps(a)),S={onMouseEnter:n.handleMouseEnter.bind(n,M,"link"),onMouseLeave:n.handleMouseLeave.bind(n,M,"link"),onClick:n.handleClick.bind(n,M,"link")};return l.default.createElement(p.default,o({key:"link"+r},S),n.constructor.renderLinkItem(a,M))})))},e.renderNodeItem=function(t,e){return l.default.isValidElement(t)?l.default.cloneElement(t,e):f.default.isFunction(t)?t(e):l.default.createElement(y.default,o({className:"recharts-sankey-node",fill:"#0088fe",fillOpacity:"0.8"},_.filterProps(e)))},e.prototype.renderNodes=function(t){var e=this,n=this.props,r=n.node,i=n.margin,a=f.default.get(i,"top")||0,u=f.default.get(i,"left")||0;return l.default.createElement(p.default,{className:"recharts-sankey-nodes",key:"recharts-sankey-nodes"},t.map((function(t,n){var i=t.x,s=t.y,c=t.dx,f=t.dy,h=o(o({},_.filterProps(r)),{x:i+u,y:s+a,width:c,height:f,index:n,payload:t}),d={onMouseEnter:e.handleMouseEnter.bind(e,h,"node"),onMouseLeave:e.handleMouseLeave.bind(e,h,"node"),onClick:e.handleClick.bind(e,h,"node")};return l.default.createElement(p.default,o({key:"node"+n},d),e.constructor.renderNodeItem(r,h))})))},e.prototype.renderTooltip=function(){var t=this.props,e=t.children,n=t.width,r=t.height,i=t.nameKey,o=g.findChildByType(e,d.default.displayName);if(!o)return null;var a,u=this.state,s=u.isTooltipActive,c=u.activeElement,f=u.activeElementType,h={x:0,y:0,width:n,height:r},p=c?(a=c,"node"===f?{x:a.x+a.width/2,y:a.y+a.height/2}:{x:(a.sourceX+a.targetX)/2,y:(a.sourceY+a.targetY)/2}):x,y=c?function(t,e,n){var r=t.payload;return"node"===e?[{payload:t,name:m.getValueByDataKey(r,n,""),value:m.getValueByDataKey(r,"value")}]:r.source&&r.target?[{payload:t,name:m.getValueByDataKey(r.source,n,"")+" - "+m.getValueByDataKey(r.target,n,""),value:m.getValueByDataKey(r,"value")}]:[]}(c,f,i):[];return l.default.cloneElement(o,{viewBox:h,active:s,coordinate:p,label:"",payload:y})},e.prototype.render=function(){if(!g.validateWidthHeight(this))return null;var t=this.props,e=t.width,n=t.height,r=t.className,i=t.style,u=t.children,s=a(t,["width","height","className","style","children"]),f=this.state,p=f.links,d=f.nodes,y=_.filterProps(s);return l.default.createElement("div",{className:c.default("recharts-wrapper",r),style:o(o({},i),{position:"relative",cursor:"default",width:e,height:n})},l.default.createElement(h.default,o({},y,{width:e,height:n}),g.filterSvgElements(u),this.renderLinks(p,d),this.renderNodes(d)),this.renderTooltip())},e.displayName="Sankey",e.defaultProps={nameKey:"name",dataKey:"value",nodePadding:10,nodeWidth:10,linkCurvature:.5,iterations:32,margin:{top:5,right:5,bottom:5,left:5}},e}(l.PureComponent);e.default=T},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var i=r(n(18)),o=r(n(137)),a=r(n(56)),u=r(n(55)),s=n(12);e.default=i.default({chartName:"RadarChart",GraphicalChild:o.default,axisComponents:[{axisType:"angleAxis",AxisComp:a.default},{axisType:"radiusAxis",AxisComp:u.default}],formatAxisMap:s.formatAxisMap,defaultProps:{layout:"centric",startAngle:90,endAngle:-270,cx:"50%",cy:"50%",innerRadius:0,outerRadius:"80%"}})},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var i=r(n(18)),o=r(n(91)),a=r(n(35)),u=r(n(36)),s=r(n(59)),l=n(21);e.default=i.default({chartName:"ScatterChart",GraphicalChild:o.default,eventType:"single",axisComponents:[{axisType:"xAxis",AxisComp:a.default},{axisType:"yAxis",AxisComp:u.default},{axisType:"zAxis",AxisComp:s.default}],formatAxisMap:l.formatAxisMap})},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var i=r(n(18)),o=r(n(89)),a=r(n(35)),u=r(n(36)),s=n(21);e.default=i.default({chartName:"AreaChart",GraphicalChild:o.default,axisComponents:[{axisType:"xAxis",AxisComp:a.default},{axisType:"yAxis",AxisComp:u.default}],formatAxisMap:s.formatAxisMap})},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var i=r(n(18)),o=r(n(56)),a=r(n(55)),u=n(12),s=r(n(138));e.default=i.default({chartName:"RadialBarChart",GraphicalChild:s.default,legendContent:"children",axisComponents:[{axisType:"angleAxis",AxisComp:o.default},{axisType:"radiusAxis",AxisComp:a.default}],formatAxisMap:u.formatAxisMap,defaultProps:{layout:"radial",startAngle:0,endAngle:360,cx:"50%",cy:"50%",innerRadius:0,outerRadius:"80%"}})},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var i=r(n(18)),o=r(n(89)),a=r(n(90)),u=r(n(88)),s=r(n(91)),l=r(n(35)),c=r(n(36)),f=r(n(59)),h=n(21);e.default=i.default({chartName:"ComposedChart",GraphicalChild:[u.default,o.default,a.default,s.default],axisComponents:[{axisType:"xAxis",AxisComp:l.default},{axisType:"yAxis",AxisComp:c.default},{axisType:"zAxis",AxisComp:f.default}],formatAxisMap:h.formatAxisMap})},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var i=r(n(18)),o=r(n(144));e.default=i.default({chartName:"FunnelChart",GraphicalChild:o.default,eventType:"item",axisComponents:[],defaultProps:{layout:"centric"}})},function(t,e,n){"use strict";n.r(e);var r=n(0),i=n.n(r),o=n(60),a=n(150),u=function(t){var e=[],n=null,r=function(){for(var r=arguments.length,i=new Array(r),o=0;o<r;o++)i[o]=arguments[o];e=i,n||(n=requestAnimationFrame((function(){n=null,t.apply(void 0,e)})))};return r.cancel=function(){n&&(cancelAnimationFrame(n),n=null)},r},s=n(1);var l=function(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)},c=n(151),f="object"==typeof self&&self&&self.Object===Object&&self,h=c.a||f||Function("return this")(),p=function(){return h.Date.now()},d=h.Symbol,y=Object.prototype,v=y.hasOwnProperty,g=y.toString,m=d?d.toStringTag:void 0;var _=function(t){var e=v.call(t,m),n=t[m];try{t[m]=void 0;var r=!0}catch(t){}var i=g.call(t);return r&&(e?t[m]=n:delete t[m]),i},x=Object.prototype.toString;var b=function(t){return x.call(t)},w="[object Null]",A="[object Undefined]",O=d?d.toStringTag:void 0;var E=function(t){return null==t?void 0===t?A:w:O&&O in Object(t)?_(t):b(t)};var M=function(t){return null!=t&&"object"==typeof t},S="[object Symbol]";var k=function(t){return"symbol"==typeof t||M(t)&&E(t)==S},P=NaN,N=/^\s+|\s+$/g,C=/^[-+]0x[0-9a-f]+$/i,T=/^0b[01]+$/i,j=/^0o[0-7]+$/i,I=parseInt;var D=function(t){if("number"==typeof t)return t;if(k(t))return P;if(l(t)){var e="function"==typeof t.valueOf?t.valueOf():t;t=l(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=t.replace(N,"");var n=T.test(t);return n||j.test(t)?I(t.slice(2),n?2:8):C.test(t)?P:+t},R="Expected a function",L=Math.max,B=Math.min;var F=function(t,e,n){var r,i,o,a,u,s,c=0,f=!1,h=!1,d=!0;if("function"!=typeof t)throw new TypeError(R);function y(e){var n=r,o=i;return r=i=void 0,c=e,a=t.apply(o,n)}function v(t){var n=t-s;return void 0===s||n>=e||n<0||h&&t-c>=o}function g(){var t=p();if(v(t))return m(t);u=setTimeout(g,function(t){var n=e-(t-s);return h?B(n,o-(t-c)):n}(t))}function m(t){return u=void 0,d&&r?y(t):(r=i=void 0,a)}function _(){var t=p(),n=v(t);if(r=arguments,i=this,s=t,n){if(void 0===u)return function(t){return c=t,u=setTimeout(g,e),f?y(t):a}(s);if(h)return clearTimeout(u),u=setTimeout(g,e),y(s)}return void 0===u&&(u=setTimeout(g,e)),a}return e=D(e)||0,l(n)&&(f=!!n.leading,o=(h="maxWait"in n)?L(D(n.maxWait)||0,e):o,d="trailing"in n?!!n.trailing:d),_.cancel=function(){void 0!==u&&clearTimeout(u),c=0,r=s=i=u=void 0},_.flush=function(){return void 0===u?a:m(p())},_},z="Expected a function";var W=function(t,e,n){var r=!0,i=!0;if("function"!=typeof t)throw new TypeError(z);return l(n)&&(r="leading"in n?!!n.leading:r,i="trailing"in n?!!n.trailing:i),F(t,e,{leading:r,maxWait:e,trailing:i})},V={debounce:F,throttle:W},U=function(t){return V[t]},q=function(t){return"function"==typeof t},G=function(){return"undefined"==typeof window},H=function(t){return t instanceof Element||t instanceof HTMLDocument};function K(t){return(K="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function X(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Y(t,e){return!e||"object"!==K(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function $(t){return($=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Z(t,e){return(Z=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var J=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),Y(this,$(e).apply(this,arguments))}var n,r,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Z(t,e)}(e,t),n=e,(r=[{key:"render",value:function(){return this.props.children}}])&&X(n.prototype,r),i&&X(n,i),e}(r.PureComponent);function Q(t){return(Q="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function tt(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function et(t){return(et=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function nt(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function rt(t,e){return(rt=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function it(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var ot=function(t){function e(t){var n;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),n=function(t,e){return!e||"object"!==Q(e)&&"function"!=typeof e?nt(t):e}(this,et(e).call(this,t)),it(nt(n),"cancelHandler",(function(){n.resizeHandler&&n.resizeHandler.cancel&&(n.resizeHandler.cancel(),n.resizeHandler=null)})),it(nt(n),"rafClean",(function(){n.raf&&n.raf.cancel&&(n.raf.cancel(),n.raf=null)})),it(nt(n),"toggleObserver",(function(t){var e=n.getElement();e&&n.resizeObserver[t]&&n.resizeObserver[t](e)})),it(nt(n),"getElement",(function(){var t=n.props,e=t.querySelector,r=t.targetDomEl;if(!G()){if(e)return document.querySelector(e);if(r&&H(r))return r;var i=n.element&&Object(o.findDOMNode)(n.element);if(i)return i.parentElement}})),it(nt(n),"createUpdater",(function(){return n.rafClean(),n.raf=u((function(t){var e=t.width,r=t.height,i=n.props.onResize;q(i)&&i(e,r),n.setState({width:e,height:r})})),n.raf})),it(nt(n),"createResizeHandler",(function(t){var e=n.state,r=e.width,i=e.height,o=n.props,a=o.handleWidth,u=o.handleHeight;if(a||u){var s=n.createUpdater();t.forEach((function(t){var e=t&&t.contentRect||{},o=e.width,l=e.height,c=a&&r!==o||u&&i!==l;!n.skipOnMount&&c&&!G()&&s({width:o,height:l}),n.skipOnMount=!1}))}})),it(nt(n),"onRef",(function(t){n.element=t})),it(nt(n),"getRenderType",(function(){var t=n.props,e=t.render,i=t.children;return q(e)?"renderProp":q(i)?"childFunction":Object(r.isValidElement)(i)?"child":Array.isArray(i)?"childArray":"parent"})),it(nt(n),"getTargetComponent",(function(){var t=n.props,e=t.render,i=t.children,o=t.nodeType,a=n.state,u={width:a.width,height:a.height};switch(n.getRenderType()){case"renderProp":return Object(r.cloneElement)(e(u),{key:"resize-detector"});case"childFunction":return Object(r.cloneElement)(i(u));case"child":return Object(r.cloneElement)(i,u);case"childArray":return i.map((function(t){return!!t&&Object(r.cloneElement)(t,u)}));default:return Object(r.createElement)(o)}}));var i=t.skipOnMount,s=t.refreshMode,l=t.refreshRate,c=t.refreshOptions;n.state={width:void 0,height:void 0},n.skipOnMount=i,n.raf=null,n.element=null,n.unmounted=!1;var f=U(s);return n.resizeHandler=f?f(n.createResizeHandler,l,c):n.createResizeHandler,n.resizeObserver=new a.a(n.resizeHandler),n}var n,s,l;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&rt(t,e)}(e,t),n=e,(s=[{key:"componentDidMount",value:function(){this.toggleObserver("observe")}},{key:"componentWillUnmount",value:function(){this.toggleObserver("unobserve"),this.rafClean(),this.cancelHandler(),this.unmounted=!0}},{key:"render",value:function(){return i.a.createElement(J,{ref:this.onRef},this.getTargetComponent())}}])&&tt(n.prototype,s),l&&tt(n,l),e}(r.PureComponent);ot.propTypes={handleWidth:s.bool,handleHeight:s.bool,skipOnMount:s.bool,refreshRate:s.number,refreshMode:s.string,refreshOptions:Object(s.shape)({leading:s.bool,trailing:s.bool}),querySelector:s.string,targetDomEl:s.any,onResize:s.func,render:s.func,children:s.any,nodeType:s.node},ot.defaultProps={handleWidth:!1,handleHeight:!1,skipOnMount:!1,refreshRate:1e3,refreshMode:void 0,refreshOptions:void 0,querySelector:null,targetDomEl:null,onResize:null,render:void 0,children:null,nodeType:"div"};var at=ot;function ut(t){return(ut="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function st(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function lt(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function ct(t,e,n){return e&&lt(t.prototype,e),n&&lt(t,n),t}function ft(t,e){return!e||"object"!==ut(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function ht(t){return(ht=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function pt(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&dt(t,e)}function dt(t,e){return(dt=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var yt=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{handleWidth:!0,handleHeight:!0};return(function(n){function r(){return st(this,r),ft(this,ht(r).apply(this,arguments))}return pt(r,n),ct(r,[{key:"render",value:function(){return i.a.createElement(at,e,i.a.createElement(t,this.props))}}]),r}(r.Component))};n.d(e,"withResizeDetector",(function(){return yt}));e.default=at}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,